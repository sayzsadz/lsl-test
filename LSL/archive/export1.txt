--------------------------------------------------------
--  File created - Thursday-May-02-2019   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Type XXLSL_CALLBACK_T
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "APPS"."XXLSL_CALLBACK_T" as object
  (
            p_cust        VARCHAR2(300),
			p_description VARCHAR2(100),
            p_amount      NUMBER,
            p_qty         NUMBER
  );

/
--------------------------------------------------------
--  DDL for Type XXLSL_CALLBCK
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "APPS"."XXLSL_CALLBCK" as table of xxlsl_callback_t;

/
--------------------------------------------------------
--  DDL for Type XXLSL_CUST_DET
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "APPS"."XXLSL_CUST_DET" IS RECORD
(
p_cust VARCHAR2(150),
p_description VARCHAR2(150),
p_amount NUMBER,
p_qty NUMBER 
);

/
--------------------------------------------------------
--  DDL for Type XXLSL_R_TYPE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TYPE "APPS"."XXLSL_R_TYPE" IS RECORD (
			p_cust        VARCHAR2(300),
			p_description VARCHAR2(100),
            p_amount      NUMBER,
            p_qty         NUMBER
	);

    CREATE TYPE emp_det IS RECORD
(
EMP_NO NUMBER,
EMP_NAME VARCHAR2(150),
MANAGER NUMBER,
SALARY NUMBER 
);

/
--------------------------------------------------------
--  DDL for Sequence XXLSL_AP_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APPS"."XXLSL_AP_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100012 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence XXLSL_TRX_DIST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPS"."XXLSL_TRX_DIST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1082 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence XXLSL_TRX_HEADER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPS"."XXLSL_TRX_HEADER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 163 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence XXLSL_TRX_LINE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPS"."XXLSL_TRX_LINE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 162 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence XXPBSA_SUP_RET_HEADER_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPS"."XXPBSA_SUP_RET_HEADER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 50027 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence XXPBSA_SUP_RET_LINE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPS"."XXPBSA_SUP_RET_LINE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10027 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Table XXPBSA_ACCOUNT_COMBINATIONS
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Procedure XXLSL_EXECUTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXLSL_EXECUTE" 
as
	v_status	            varchar2(50);
	v_status1	            varchar2(5);
    P_CODE_COMBINATION_ID   number;
    p_cust                  number;
    p_cust_num              varchar2(50);
    p_trx_date              date;
    p_gl_date               date;
    p_trx_number            varchar2(50);
    
    cnt             number := 0;

	l_return_status 	varchar2(1);
	p_count  			NUMBER;
	l_msg_count 		number;
	l_msg_data 			varchar2(2000);
	l_batch_id 			number;
	l_cnt 				number := 0;
	l_customer_trx_id 	number;
	cnt 				number; 
	v_context 			varchar2(100);

	l_batch_source_rec 		ar_invoice_api_pub.batch_source_rec_type;
	l_trx_header_tbl 		ar_invoice_api_pub.trx_header_tbl_type;
	l_trx_lines_tbl 		ar_invoice_api_pub.trx_line_tbl_type;
	l_trx_dist_tbl 			ar_invoice_api_pub.trx_dist_tbl_type;
	l_trx_salescredits_tbl 	ar_invoice_api_pub.trx_salescredits_tbl_type;

    V_TRX_HEADER_ID number;
    V_TRX_LINE_ID   number;
    V_TRX_DIST_ID   number;

    username            varchar2(30) := 'SJAYASINGHE1';
    responsiblity_name  varchar2(30) := 'Purchasing Super User';
    org_id              number       := 81; 
    
    cnts                 number := 0;
    
	
--	TYPE tr_type IS TABLE OF xxlsl_CALLBACK_T INDEX BY BINARY_INTEGER;
--
--	l_rarray    tr_type;
--	l_rec       xxlsl_CALLBACK_T;

	cursor c1
	is		
         select 'N/A' CUST_NAME, 'N/A' SEGMENT6, 'N/A' DETAILS, sum(AMT) AMT, '0' BAL, '0' QTY, sysdate SALESDATE
         from 
         (
         select distinct replace(vs.description, 'Head Office', 'Customer 0001') cust_name
              , vs.flex_value segment6
              , sale.TITLE details
              , sale.amt
              , (nvl(sale.amt,0) - nvl(pay_taking.amt,0)) bal
              ,sale.qty
              , to_date(to_char (to_date(sale.SALESDATE,'yyyy-mm-dd"T"HH24:MI:SS'), 'DD-MON-RRRR')) SALESDATE
              from 
                   (
                    select ss.SALES_DATE SALESDATE, ssp.*, ss.STOREID, ssp.TOTALUNITS qty, ROUND(SSP.AVGCOSTEX * SSP.TOTALUNITS, 2) amt
                    from SALESSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ss ,
                         SALESSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ssp
                    where 1 = 1
                          and ss.SALESUMMARYID = ssp.SALESUMMARYID
                   ) sale,
                   (
                    select sum(NVL(ccs.AMOUNT, 0)) amt
                    from CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ccs,
                         PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ps,
                         PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK pts
                    where 1 = 1
                          and ps.TRANSACTIONID = ccs.TRANSACTIONID
                          and pts.PAYMENTTYPESID = ps.PAYMENTTYPESID
                   ) pay_taking,
                   (
                    SELECT ffv.flex_value, ffvt.description, nvl(ffv.attribute10,167) attribute10
                    FROM   fnd_flex_values ffv
                          ,fnd_flex_values_tl ffvt
                    WHERE  ffv.flex_value_id = ffvt.flex_value_id
                           AND ffv.flex_value_set_id = 1017028
                           AND ffv.flex_value = '09100'
                    ) vs
              where 1 = 1
                    and sale.STOREID = vs.attribute10
                    and rownum < 5
            );
                    
    cursor c2
	is		
         select distinct replace(vs.description, 'Head Office', 'Customer 0001') cust_name
              , vs.flex_value segment6
              , sale.TITLE details
              , sale.amt
              , (nvl(sale.amt,0) - nvl(pay_taking.amt,0)) bal
              ,sale.qty
              , to_date(to_char (to_date(sale.SALESDATE,'yyyy-mm-dd"T"HH24:MI:SS'), 'DD-MON-RRRR')) SALESDATE
              from 
                   (
                    select ss.SALES_DATE SALESDATE, ssp.*, ss.STOREID, ssp.TOTALUNITS qty, ROUND(SSP.AVGCOSTEX * SSP.TOTALUNITS, 2) amt
                    from SALESSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ss ,
                         SALESSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ssp
                    where 1 = 1
                          and ss.SALESUMMARYID = ssp.SALESUMMARYID
                   ) sale,
                   (
                    select sum(NVL(ccs.AMOUNT, 0)) amt
                    from CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ccs,
                         PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ps,
                         PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK pts
                    where 1 = 1
                          and ps.TRANSACTIONID = ccs.TRANSACTIONID
                          and pts.PAYMENTTYPESID = ps.PAYMENTTYPESID
                   ) pay_taking,
                   (
                    SELECT ffv.flex_value, ffvt.description, nvl(ffv.attribute10,167) attribute10
                    FROM   fnd_flex_values ffv
                          ,fnd_flex_values_tl ffvt
                    WHERE  ffv.flex_value_id = ffvt.flex_value_id
                           AND ffv.flex_value_set_id = 1017028
                           AND ffv.flex_value = '09100'
                    ) vs
              where 1 = 1
                    and sale.STOREID = vs.attribute10
                    and rownum < 5;
                    
        cursor c3
        is
         select 'N/A' CUST_NAME, 'N/A' SEGMENT6, 'N/A' DETAILS, sum(AMT) AMT, '0' BAL, '0' QTY, sysdate SALESDATE
         from 
         (
         select distinct replace(vs.description, 'Head Office', 'Customer 0001') cust_name
              , vs.flex_value segment6
              , sale.TITLE details
              , sale.amt
              , (nvl(sale.amt,0) - nvl(pay_taking.amt,0)) bal
              ,sale.qty
              , to_date(to_char (to_date(sale.SALESDATE,'yyyy-mm-dd"T"HH24:MI:SS'), 'DD-MON-RRRR')) SALESDATE
              from 
                   (
                    select ss.SALES_DATE SALESDATE, ssp.*, ss.STOREID, ssp.TOTALUNITS qty, ROUND(SSP.AVGCOSTEX * SSP.TOTALUNITS, 2) amt
                    from SALESSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ss ,
                         SALESSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ssp
                    where 1 = 1
                          and ss.SALESUMMARYID = ssp.SALESUMMARYID
                   ) sale,
                   (
                    select sum(amt) amt, PAYMENTTYPE
                    from
                        (
                            select NVL(pts.totalvalue, 0) amt, PAYMENTTYPE
                            from PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK pts
                            where 1 = 1
                                  and rownum < 5
                        )
                    group by PAYMENTTYPE
                   ) pay_taking,
                   (
                    SELECT ffv.flex_value, ffvt.description, nvl(ffv.attribute10,167) attribute10
                    FROM   fnd_flex_values ffv
                          ,fnd_flex_values_tl ffvt
                    WHERE  ffv.flex_value_id = ffvt.flex_value_id
                           AND ffv.flex_value_set_id = 1017028
                           AND ffv.flex_value = '09100'
                    ) vs
              where 1 = 1
                    and sale.STOREID = vs.attribute10
                    and rownum < 5
            );
  
begin
  for cur_rec in c1
  loop

  select CODE_COMBINATION_ID
  into P_CODE_COMBINATION_ID
  from gl_code_combinations
  where segment2 = cur_rec.segment6
        and segment6 = '312200';

  SELECT a.cust_account_id, a.account_number
  into p_cust, p_cust_num
  FROM hz_locations l,
       hz_party_sites s,
       hz_parties p,
       hz_cust_accounts a,
       hz_cust_acct_sites_all sa,
       hz_cust_site_uses_all su,
       fnd_territories_tl t,
       hz_contact_points hcp,
       hz_contact_points hcp1,
       hz_contact_points hcp2
 WHERE l.location_id = s.location_id
	   AND s.party_id = p.party_id
	   AND a.party_id = p.party_id
	   AND sa.cust_account_id = a.cust_account_id
	   AND sa.party_site_id = s.party_site_id
	   AND sa.cust_acct_site_id = su.cust_acct_site_id
	   AND t.territory_code = l.country
	   AND a.status = 'A'
	   AND sa.status = 'A'
	   AND p.party_id = hcp.owner_table_id(+)
	   AND hcp.owner_table_name(+) = 'HZ_PARTIES'
	   AND hcp.contact_point_type(+) = 'PHONE'
	   AND hcp.phone_line_type(+) = 'GEN'
	   AND p.party_id = hcp1.owner_table_id(+)
	   AND hcp1.owner_table_name(+) = 'HZ_PARTIES'
	   AND hcp1.contact_point_type(+) = 'PHONE'
	   AND hcp1.phone_line_type(+) = 'FAX'
	   AND p.party_id = hcp2.owner_table_id(+)
	   AND hcp2.owner_table_name(+) = 'HZ_PARTIES'
	   AND hcp2.contact_point_type(+) = 'EMAIL'
	   AND p.party_name = cur_rec.cust_name;

		
                select xxlsl_trx_header_seq.nextval
                into v_trx_header_id
                from dual;
                
                select xxlsl_trx_dist_seq.nextval
                into v_trx_dist_id
                from dual;

            BEGIN
            
            for cur in c2
            loop
            
            cnts := cnts + 1;
            
            DBMS_OUTPUT.PUT_LINE('1');
            --1. Set applications context if not already set.
                BEGIN
                v_context := xxlsl_set_context(username,responsiblity_name,org_id);
                IF v_context = 'F'
                    THEN
                        DBMS_OUTPUT.PUT_LINE('Error while setting the context');        
                    END IF;
                DBMS_OUTPUT.PUT_LINE('2');
                exception
                when others then
                dbms_output.put_line('Error in Crea_cm:'||sqlerrm);
                end;
            
                select xxlsl_trx_line_seq.nextval
                into v_trx_line_id
                from dual;
            
                --v_trx_header_id = 102
                --v_trx_line_id = 101
                --v_trx_dist_id = 1021
            
            
            
                -- Populate header information.
                l_trx_header_tbl(1).trx_header_id := v_trx_header_id;
                --l_trx_header_tbl(1).trx_number := 'Test_inv';--The transaction number is populated when automatic transaction numbering is selected on the transaction batch source.
                l_trx_header_tbl(1).bill_to_customer_id := p_cust;
                l_trx_header_tbl(1).cust_trx_type_id := 1;
                l_trx_header_tbl(1).primary_salesrep_id := -3;
                -- Populate batch source information.
                l_batch_source_rec.batch_source_id := 1001;
                -- Populate line 1 information.
                l_trx_lines_tbl(cnts).trx_header_id := v_trx_header_id;
                l_trx_lines_tbl(cnts).trx_line_id := v_trx_line_id;
                l_trx_lines_tbl(cnts).line_number := 1;
                l_trx_lines_tbl(cnts).description := cur.details;
                l_trx_lines_tbl(cnts).quantity_invoiced := cur.qty;
                l_trx_lines_tbl(cnts).unit_selling_price := (cur.amt/cur.qty);
                l_trx_lines_tbl(cnts).uom_code := 'ECH';
                l_trx_lines_tbl(cnts).line_type := 'LINE';
                l_trx_lines_tbl(cnts).taxable_flag := 'N';
                -- Populate Distribution Information
                l_trx_dist_tbl(1).trx_dist_id := v_trx_dist_id;
                l_trx_dist_tbl(1).trx_header_id := v_trx_header_id;
                l_trx_dist_tbl(1).trx_LINE_ID := v_trx_line_id;
                l_trx_dist_tbl(1).ACCOUNT_CLASS := 'REV';
                l_trx_dist_tbl(1).percent     := 100;
                l_trx_dist_tbl(1).AMOUNT := cur_rec.amt;
                l_trx_dist_tbl(1).CODE_COMBINATION_ID := P_CODE_COMBINATION_ID;
            
                -- CAll the api
                    AR_INVOICE_API_PUB.create_single_invoice(
                                                                p_api_version 			=> 1.0,
                                                                p_batch_source_rec 		=> l_batch_source_rec,
                                                                p_trx_header_tbl 		=> l_trx_header_tbl,
                                                                p_trx_lines_tbl 		=> l_trx_lines_tbl,
                                                                p_trx_dist_tbl 			=> l_trx_dist_tbl,
                                                                p_trx_salescredits_tbl 	=> l_trx_salescredits_tbl,
                                                                x_customer_trx_id 		=> l_customer_trx_id,
                                                                x_return_status 		=> l_return_status,
                                                                x_msg_count 			=> l_msg_count,
                                                                x_msg_data 				=> l_msg_data
                                                            ); 
            
                DBMS_OUTPUT.PUT_LINE('l_return_status : '||l_return_status);
            
                IF l_return_status = 'S' THEN
                dbms_output.put_line('unexpected errors found!'); 
                 IF l_msg_count = 1 Then
                      dbms_output.put_line('l_msg_data '||l_msg_data);
                   ELSIF l_msg_count > 1 Then
                   LOOP
                     p_count := p_count+1;
                     l_msg_data := FND_MSG_PUB.Get(FND_MSG_PUB.G_NEXT,FND_API.G_FALSE);
                     IF l_msg_data is NULL Then
                     EXIT;
                     END IF;
                     dbms_output.put_line('Message' || p_count ||'.'||l_msg_data);
                   END LOOP;
                   END IF;
                ELSE
                dbms_output.put_line(' Got Created Sucessfully : '||l_customer_trx_id);
                END IF;
                --return l_customer_trx_id;
            

        end loop;
END;



	
        
        dbms_output.put_line(v_status);

		select trx_date, trx_date, trx_number
		into p_trx_date, p_gl_date, p_trx_number
		from ra_customer_trx_all
		where CUSTOMER_TRX_ID = v_status;

--    l_rec.p_cust        := p_cust;
--	l_rec.p_description := cur_rec.details;
--    l_rec.p_amount      := cur_rec.amt;
--    l_rec.p_qty         := cur_rec.qty;
--    
--    cnt := cnt + 1;
--    
--    l_rarray(cnt) := l_rec; 

    v_status1 := xxlsl_apply_recipt(
										 p_amount 				=> cur_rec.amt - cur_rec.bal ,
										 p_receipt_number 		=> 'RCP'||v_status,
										 p_receipt_date 		=> p_trx_date,
										 p_gl_date 				=> p_gl_date,
										 p_customer_number 		=> p_cust_num,
										 p_receipt_method_id 	=> 1001,
										 p_trx_number 			=> p_trx_number,
										 p_currency_code 		=> 'LKR'
										);



	end loop;
--    v_status := xxlsl_ar_inv(null, null, null, null, null, null, l_rarray);
--    v_status1 := xxlsl_apply_recipt(
--										 p_amount 				=> cur_rec.amt - cur_rec.bal ,
--										 p_receipt_number 		=> 'RCP'||v_status,
--										 p_receipt_date 		=> p_trx_date,
--										 p_gl_date 				=> p_gl_date,
--										 p_customer_number 		=> p_cust_num,
--										 p_receipt_method_id 	=> 1001,
--										 p_trx_number 			=> p_trx_number,
--										 p_currency_code 		=> 'LKR'
--										);
exception 
    when others
        then
            dbms_output.put_line('No. 2 AR Invoices can be created.');
end;

/
--------------------------------------------------------
--  DDL for Procedure XXLSL_SALE_EXECUTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXLSL_SALE_EXECUTE" 
as
	v_status	varchar2(50);
	v_status1	varchar2(5);
    P_CODE_COMBINATION_ID number;
    p_cust      number;
    p_cust_num  varchar2(50);
    p_trx_date      date;
    p_gl_date       date;
    p_trx_number    varchar2(50);

	cursor c1
	is		
	  select COMM cust_name, details, DEPTNO qty, TOTAL_INV amt, BALANCE bal, sysdate salesdate
	  from EBA_DEMO_LOAD_EMP@DBLINK1
	  where CREATED = sysdate;

begin
  for cur_rec in c1
  loop

  select CODE_COMBINATION_ID
  into P_CODE_COMBINATION_ID
  from gl_code_combinations
  where segment6 = '123456';

  SELECT a.cust_account_id, a.account_number
  into p_cust, p_cust_num
  FROM hz_locations l,
       hz_party_sites s,
       hz_parties p,
       hz_cust_accounts a,
       hz_cust_acct_sites_all sa,
       hz_cust_site_uses_all su,
       fnd_territories_vl t,
       hz_contact_points hcp,
       hz_contact_points hcp1,
       hz_contact_points hcp2
 WHERE l.location_id = s.location_id
	   AND s.party_id = p.party_id
	   AND a.party_id = p.party_id
	   AND sa.cust_account_id = a.cust_account_id
	   AND sa.party_site_id = s.party_site_id
	   AND sa.cust_acct_site_id = su.cust_acct_site_id
	   AND t.territory_code = l.country
	   AND a.status = 'A'
	   AND sa.status = 'A'
	   AND p.party_id = hcp.owner_table_id(+)
	   AND hcp.owner_table_name(+) = 'HZ_PARTIES'
	   AND hcp.contact_point_type(+) = 'PHONE'
	   AND hcp.phone_line_type(+) = 'GEN'
	   AND p.party_id = hcp1.owner_table_id(+)
	   AND hcp1.owner_table_name(+) = 'HZ_PARTIES'
	   AND hcp1.contact_point_type(+) = 'PHONE'
	   AND hcp1.phone_line_type(+) = 'FAX'
	   AND p.party_id = hcp2.owner_table_id(+)
	   AND hcp2.owner_table_name(+) = 'HZ_PARTIES'
	   AND hcp2.contact_point_type(+) = 'EMAIL'
	   AND p.party_name = cur_rec.cust_name;

		v_status := xxlsl_ar_inv(p_cust => p_cust, p_description => cur_rec.details, P_CODE_COMBINATION_ID => P_CODE_COMBINATION_ID, p_amount => cur_rec.amt, p_qty => cur_rec.qty, p_sale_date => cur_rec.salesdate);
		dbms_output.put_line(v_status);

		select trx_date, trx_date, trx_number
		into p_trx_date, p_gl_date, p_trx_number
		from ra_customer_trx_all
		where CUSTOMER_TRX_ID = v_status;

		v_status1 := xxlsl_apply_recipt(
										 p_amount 				=> cur_rec.amt - cur_rec.bal ,
										 p_receipt_number 		=> 'RCP'||v_status,
										 p_receipt_date 		=> p_trx_date,
										 p_gl_date 				=> p_gl_date,
										 p_customer_number 		=> p_cust_num,
										 p_receipt_method_id 	=> 1001,
										 p_trx_number 			=> p_trx_number,
										 p_currency_code 		=> 'LKR'
										);

	end loop;
end;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_AR_INVOICE_API
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_AR_INVOICE_API" 
is
        l_return_status         varchar2(1);
        l_msg_count             number;
        l_msg_data              varchar2(2000);
        l_batch_source_rec      ar_invoice_api_pub.batch_source_rec_type;
        l_trx_header_tbl        ar_invoice_api_pub.trx_header_tbl_type;
        l_trx_lines_tbl         ar_invoice_api_pub.trx_line_tbl_type;
        l_trx_dist_tbl          ar_invoice_api_pub.trx_dist_tbl_type;
        l_trx_salescredits_tbl  ar_invoice_api_pub.trx_salescredits_tbl_type;
        l_cust_trx_id           number;

BEGIN

 begin
  MO_GLOBAL.SET_POLICY_CONTEXT('S',81);
end;

  fnd_global.apps_initialize(0,20678,222);

  l_batch_source_rec.batch_source_id :=  1021;
  l_trx_header_tbl(1).trx_header_id  :=  1022;
  l_trx_header_tbl(1).trx_date       := sysdate;
  l_trx_header_tbl(1).trx_currency   :=  'LKR';
  l_trx_header_tbl(1).cust_trx_type_id :=  1;
  l_trx_header_tbl(1).bill_to_customer_id :=  1040;
  l_trx_header_tbl(1).term_id    :=  5;
  l_trx_header_tbl(1).finance_charges  :=  'N';
  l_trx_header_tbl(1).status_trx   :=  'OP';
  l_trx_header_tbl(1).printing_option :=  'PRI';
  l_trx_header_tbl(1).reference_number :=  '1111';

 -- l_trx_header_tbl(1).default_tax_exempt_flag := 'Y';
  --l_trx_lines_tbl(1).TAX_CLASSIFICATION_CODE := NULL;
  l_trx_lines_tbl(1).taxable_flag := 'N';


  l_trx_lines_tbl(1).trx_header_id :=  1022;
  l_trx_lines_tbl(1).trx_line_id   :=  1021;
  l_trx_lines_tbl(1).line_number   :=  1;
  l_trx_lines_tbl(1).inventory_item_id  :=  1291;
  --l_trx_lines_tbl(1).description :=  'CAST IRON'; 
                                             --GRILL-325*485MM';
 l_trx_lines_tbl(1).quantity_invoiced   :=  3;
 l_trx_lines_tbl(1).unit_selling_price :=  525;   --Price
 l_trx_lines_tbl(1).uom_code    :=  null;--'ECH';
 l_trx_lines_tbl(1).line_type   :=  'LINE';
 
 l_trx_dist_tbl(1).trx_dist_id  :=  1021;
 l_trx_dist_tbl(1).trx_line_id  :=  1021;
 l_trx_dist_tbl(1).ACCOUNT_CLASS := 'REV';
 l_trx_dist_tbl(1).percent     := 100;
 l_trx_dist_tbl(1).CODE_COMBINATION_ID := 6130;


 l_trx_header_tbl(1).primary_salesrep_id := -3;


--Here we call the API to create Invoice with the stored values


    AR_INVOICE_API_PUB.create_invoice
    (p_api_version          => 1.0
    ,p_commit               => 'T'
    ,p_batch_source_rec     => l_batch_source_rec
    ,p_trx_header_tbl       => l_trx_header_tbl
    ,p_trx_lines_tbl        => l_trx_lines_tbl
    ,p_trx_dist_tbl         => l_trx_dist_tbl
    ,p_trx_salescredits_tbl => l_trx_salescredits_tbl
    ,x_return_status        => l_return_status
    ,x_msg_count            => l_msg_count
    ,x_msg_data             => l_msg_data
    );

    dbms_output.put_line('Created:'||l_msg_data||l_return_status);

    IF l_return_status = fnd_api.g_ret_sts_error OR
       l_return_status = fnd_api.g_ret_sts_unexp_error THEN

        dbms_output.put_line(l_return_status||':'||sqlerrm);
    Else
        dbms_output.put_line(l_return_status||':'||sqlerrm);
        If (ar_invoice_api_pub.g_api_outputs.batch_id IS NOT NULL) Then
            Dbms_output.put_line('Invoice(s) suceessfully created!') ;
            Dbms_output.put_line('Batch ID: ' || ar_invoice_api_pub.g_api_outputs.batch_id);
            Dbms_output.put_line('customer_trx_id: ' || l_cust_trx_id);
        Else
            Dbms_output.put_line(sqlerrm);
        End If;
    end if;
    commit;
End;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_ASSIGNITMTOCAT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_ASSIGNITMTOCAT" (p_segment1 IN VARCHAR2, p_category_set_name IN VARCHAR2, p_category_name IN VARCHAR2)
AS 
        l_api_version		     NUMBER := 1.0; 
        l_init_msg_list		     VARCHAR2(2) := FND_API.G_TRUE; 
        l_commit		         VARCHAR2(2) := FND_API.G_TRUE; 

        l_category_id            NUMBER;
        l_category_set_id        NUMBER;
        l_transaction_type       VARCHAR2(20) := EGO_ITEM_PUB.G_TTYPE_UPDATE;

        x_message_list           Error_Handler.Error_Tbl_Type;
        x_return_status		     VARCHAR2(2);
        x_msg_count		         NUMBER := 0;
        x_msg_data               VARCHAR2(255);
        x_error_code             NUMBER;

        l_user_id		         NUMBER := -1;
        l_resp_id		         NUMBER := -1;
        l_application_id	     NUMBER := -1;
        l_rowcnt		         NUMBER := 1;
        l_user_name		         VARCHAR2(30) := 'SJAYASINGHE1';
        l_resp_name		         VARCHAR2(30) := 'EGO_DEVELOPMENT_MANAGER';
        l_old_category_id        number;

        CURSOR csr_org_items IS
        SELECT inventory_item_id, organization_id
        FROM mtl_system_items_b 
        WHERE segment1 like p_segment1;

BEGIN
        begin
            SELECT mc.category_id
            into l_old_category_id
            FROM  mtl_item_categories mic,
                  mtl_category_sets_tl mcst,
                  mtl_category_sets_b mcs,
                  mtl_categories_b_kfv mc,
                  mtl_system_items_b msi
            WHERE mic.category_set_id = mcs.category_set_id
                  AND mcs.category_set_id   = mcst.category_set_id
                  AND mcst.LANGUAGE         = USERENV ('LANG')
                  AND mic.category_id       = mc.category_id     
                  AND msi.organization_id = mic.organization_id    
                  AND msi.inventory_item_id = mic.inventory_item_id
                  AND msi.organization_id = 101
                  AND msi.segment1 = p_segment1;
        exception
            when others
                then
                  l_transaction_type := EGO_ITEM_PUB.G_TTYPE_CREATE;
        end;

	-- Get the user_id
	SELECT user_id
	INTO l_user_id
	FROM fnd_user
	WHERE user_name = l_user_name;

	-- Get the application_id and responsibility_id
	SELECT application_id, responsibility_id
	INTO l_application_id, l_resp_id
	FROM fnd_responsibility
	WHERE responsibility_key = l_resp_name;

	FND_GLOBAL.APPS_INITIALIZE(l_user_id, l_resp_id, l_application_id);  -- MGRPLM / Development Manager / EGO
	dbms_output.put_line('Initialized applications context: '|| l_user_id || ' '|| l_resp_id ||' '|| l_application_id );

        SELECT category_set_id INTO l_category_set_id FROM mtl_category_sets 
        WHERE category_set_name = p_category_set_name;  -- 'Product Family'

        SELECT category_id INTO l_category_id FROM mtl_categories_b 
        WHERE segment1||'.'||segment2||'.'||segment3||'.'||segment4 = p_category_name;
              --and category_id = 2125; -- 'Consumer Goods'      

        -- call API to load Items
       DBMS_OUTPUT.PUT_LINE('====================================================');
       DBMS_OUTPUT.PUT_LINE('Calling EGO_ITEM_PUB.Process_Item_Cat_Assignment API');        

      FOR itm IN csr_org_items
      LOOP
      
              EGO_ITEM_PUB.Process_Item_Cat_Assignment        (
                                                                    p_api_version => l_api_version
                                                                  , p_init_msg_list => l_init_msg_list
                                                                  , p_commit => l_commit
                                                                  , p_category_id => l_category_id
                                                                  , p_category_set_id => l_category_set_id
                                                                  , p_old_category_id => l_old_category_id
                                                                  , p_inventory_item_id => itm.inventory_item_id
                                                                  , p_organization_id => itm.organization_id
                                                                  , p_transaction_type => l_transaction_type
                                                                  , x_return_status => x_return_status
                                                                  , x_errorcode => x_error_code
                                                                  , x_msg_count => x_msg_count
                                                                  , x_msg_data => x_msg_data
                                                             );

      END LOOP;

       DBMS_OUTPUT.PUT_LINE('==================================================');
       DBMS_OUTPUT.PUT_LINE('Return Status: '||x_return_status);

       IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
          DBMS_OUTPUT.PUT_LINE('Error Message Count :'||x_msg_count);
          DBMS_OUTPUT.PUT_LINE('Error Message :'||x_msg_data);
       END IF;
       DBMS_OUTPUT.PUT_LINE('=========================================');       

EXCEPTION
        WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('Exception Occured :');
          DBMS_OUTPUT.PUT_LINE(SQLCODE ||':'||SQLERRM);
          DBMS_OUTPUT.PUT_LINE('========================================');
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_ASSIGN_ORGS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_ASSIGN_ORGS" (p_item_id     IN  NUMBER,
                      p_org_id      IN  NUMBER,
                      p_primary_uom IN  VARCHAR2,
                      x_status      OUT VARCHAR2,
                      x_msg         OUT VARCHAR2) IS 
            PRAGMA AUTONOMOUS_TRANSACTION;
    -- local variables
  l_proc_name    CONSTANT VARCHAR2(50) := 'assign_orgs';  
  x_msg_count             NUMBER;
  x_msg_data          Error_Handler.Error_Tbl_Type;



BEGIN 
    -- call API to assign Items 
DBMS_OUTPUT.PUT_LINE('==========================================='); 
DBMS_OUTPUT.PUT_LINE('Calling EGO_ITEM_PUB.Assign_Item_To_Org API');                      
      DBMS_OUTPUT.put_line ('Organization Id   : ' ||p_org_id);
      DBMS_OUTPUT.put_line ('Inventory Item Id : ' ||p_item_id);
     EGO_ITEM_PUB.ASSIGN_ITEM_TO_ORG(p_api_version       => 1.0,
                                     p_init_msg_list     => fnd_api.g_true,
                                     p_commit            => fnd_api.g_true,
                                     p_inventory_item_id => p_item_id,
                                     p_item_number       => null,
                                     p_organization_id   => p_org_id,
                                     p_organization_code => NULL,
                                     p_primary_uom_code  => p_primary_uom,
                                     x_return_status     => x_status,
                                     x_msg_count         => x_msg_count);

DBMS_OUTPUT.PUT_LINE('Return Status: '||x_status);
  IF (x_status <> FND_API.G_RET_STS_SUCCESS) THEN  
     -- Set the process code and error messages to the table.
     DBMS_OUTPUT.PUT_LINE('Error Messages :'); 
     Error_Handler.GET_MESSAGE_LIST(x_message_list => x_msg_data); 

     FOR i IN 1..x_msg_data.COUNT LOOP  
       DBMS_OUTPUT.PUT_LINE(x_msg_data(i).message_text);
       IF x_msg IS NULL THEN
         x_msg := x_msg_data(i).message_text;
       ELSE
         x_msg := x_msg ||'; '|| x_msg_data(i).message_text;
       END IF;
     END LOOP; 

  END IF;
  DBMS_OUTPUT.PUT_LINE('=========================================');                                    
     COMMIT;                                                  
EXCEPTION
  WHEN OTHERS THEN 
   DBMS_OUTPUT.PUT_LINE(SQLERRM);   
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_AUTO_CREATE_PO_PRC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_AUTO_CREATE_PO_PRC" 
      (
        p_requisition_number            IN VARCHAR2
      , p_po_header_id                    IN NUMBER
      , x_po_number                        OUT VARCHAR2
      , x_po_header_id                    OUT NUMBER      
      , x_error_msg                        OUT VARCHAR2
      )
      IS
      

  cursor c_po_header (cp_header_id number)
  is
  select    distinct porl.vendor_id
           ,porl.vendor_site_id
           ,poa.agent_id
           ,pod.org_id
           ,NVL(PORL.CURRENCY_CODE, 'LKR') CURRENCY_CODE
           ,PORL.DELIVER_TO_LOCATION_ID BILL_TO_LOCATION_ID
  from PO_AGENTS poa  INNER JOIN PO_REQUISITION_HEADERS_ALL porh ON PORH.PREPARER_ID = POA.AGENT_ID
                      INNER JOIN PO_REQUISITION_LINES_ALL porl ON PORH.REQUISITION_HEADER_ID = PORL.REQUISITION_HEADER_ID
                      INNER JOIN PO_VENDOR_SITES_ALL povs on PORL.VENDOR_ID = POVS.VENDOR_ID and POVS.VENDOR_SITE_ID = PORL.VENDOR_SITE_ID
                      INNER JOIN per_all_people_f papf ON POA.AGENT_ID = PAPF.PERSON_ID
                      INNER JOIN PO_DOCUMENT_TYPES_ALL_B  POD ON  POD.ORG_ID = POVS.ORG_ID and PORL.ORG_ID = POD.ORG_ID
                      INNER JOIN per_all_assignments_f paaf ON PAAF.PERSON_ID = PAPF.PERSON_ID
    where 1 = 1
          --AND porh.segment1 = '500003' -- for testing purpose
          AND TRUNC(SYSDATE) BETWEEN papf.effective_start_date AND papf.effective_end_date
          AND papf.person_id=paaf.person_id
          and POD.DOCUMENT_TYPE_CODE = 'PO'
          and pod.DOCUMENT_SUBTYPE = 'STANDARD'
          and porh.REQUISITION_HEADER_ID = cp_header_id;

                
            cursor c_req_lines
            is
            select             prha.segment1 req_num
            ,                hla.ship_to_location_id
            ,                prla.*
            from              po_requisition_headers_all prha
            inner join         po_requisition_lines_all prla
            on                 prha.requisition_header_id = prla.requisition_header_id
            inner join         hr_locations_all hla
            on                 prla.deliver_to_location_id = hla.location_id
            where             1=1
            and             prha.authorization_status = 'APPROVED' 
            and             nvl(prla.reqs_in_pool_flag,'N') = 'Y'      
            and             nvl(prla.cancel_flag,'N') = 'N'
            and             nvl(prla.closed_code,'OPEN') = 'OPEN'
            and             prha.segment1 = p_requisition_number
            order by         hla.ship_to_location_id
            ,                prla.creation_date desc
            ;        
            
   
            l_vendor_id             PO_HEADERS_ALL.vendor_id%type;
            l_vendor_site_id        PO_HEADERS_ALL.vendor_site_id%type;
            l_agent_id              PO_HEADERS_ALL.agent_id%type;
            l_org_id                PO_HEADERS_ALL.org_id%type;
            l_currency_code         PO_HEADERS_ALL.currency_code%type;
            l_bill_to_location_id   PO_HEADERS_ALL.bill_to_location_id%type;

TYPE l_po_header IS RECORD
   (
            vendor_id l_vendor_id%type
           ,vendor_site_id l_vendor_site_id%type
           ,agent_id l_agent_id%type
           ,org_id l_org_id%type
           ,currency_code l_currency_code%type
           ,bill_to_location_id l_bill_to_location_id%type

   );

            l_line_num number;
            l_nr_of_lines number := 0;
            l_shipment_num number;
            l_prev_deliver_to_location_id po_requisition_lines_all.deliver_to_location_id%type;
            l_prev_ship_to_location_id hr_locations_all.ship_to_location_id%type;
            l_prev_blanket_po_header_id po_headers_all.po_header_id%type;
            l_prev_blanket_po_line_num po_lines_all.line_num%type;
            l_interface_header_id po_headers_interface.interface_header_id%type;
            l_batch_id po_headers_interface.batch_id%type;
            
            l_document_num po_headers_all.segment1%type;
            l_last_updated_by po_headers_all.last_updated_by%type;
            l_created_by po_headers_all.created_by%type;
            l_interface_line_id po_lines_interface.interface_line_id%type;
            l_promised_date po_line_locations_all.promised_date%type;
            l_from_line_id po_lines_all.from_line_id%type;
            l_consolidate ap_supplier_sites_all.attribute12%type;
            x_return_status varchar2(1);
            x_msg_count number;
            x_msg_data fnd_new_messages.message_text%type;
            x_document_num po_headers_all.segment1%type;
            x_autocreated_doc_id po_headers_all.po_header_id%type;
            x_num_lines_processed number;
            l_po_header_rec l_po_header;
            l_header_created boolean := false;
        
      BEGIN  
      
        x_error_msg := null;
        l_line_num := 0;
        dbms_output.put_line ('For all requisition lines ...' || p_requisition_number);
      <<req>>
      FOR i IN c_req_lines
       LOOP
       
            l_nr_of_lines := l_nr_of_lines + 1;
            mo_global.init ('PO');
            mo_global.set_policy_context ('S', i.org_id);
            
            IF NOT l_header_created
            THEN
              l_header_created := true;
              
              
              
            OPEN  C_PO_Header (cp_header_id => p_po_header_id);
            FETCH C_PO_Header INTO l_po_header_rec;
            CLOSE C_PO_Header;
            
            l_vendor_id             := l_po_header_rec.vendor_id;
            l_vendor_site_id        := l_po_header_rec.vendor_site_id;
            l_agent_id              := l_po_header_rec.agent_id;
            l_org_id                := l_po_header_rec.org_id;
            l_currency_code         := l_po_header_rec.currency_code;
            l_bill_to_location_id   := l_po_header_rec.bill_to_location_id;
            
          

            select po_headers_interface_s.nextval
            ,po_core_sv1.default_po_unique_identifier ('PO_HEADERS',l_org_id)
            into l_interface_header_id
            ,l_document_num
            from dual;
            
            l_batch_id := l_interface_header_id;
            
            dbms_output.put_line ('Interface header id is ' || l_interface_header_id || ' and org id is ' || l_org_id || ' and batch id is ' || l_batch_id);
            
            insert into po_headers_interface
            ( 
            interface_header_id
            , interface_source_code
            , org_id
            , batch_id
            , process_code
            , action
            , document_type_code
            , document_subtype
            , document_num
            , group_code
            , vendor_id
            , vendor_site_id
            , agent_id
            , currency_code
            , creation_date
            , created_by
            , last_update_date
            , last_updated_by
            , style_id
            , Comments
            )
            values
            (
             l_interface_header_id
            , 'PO'
            , l_org_id
            , l_batch_id
            , 'NEW'
            , 'NEW'
            , 'PO'
            , 'STANDARD'
            , l_document_num
            , 'REQUISITION' -- 'DEFAULT'
            , l_vendor_id
            , l_vendor_site_id
            , l_agent_id
            , l_currency_code
            , sysdate
            , fnd_global.user_id
            , sysdate
            , fnd_global.user_id
            , 1
            , 'My description'
            );
            
            END IF; -- Only first time
            
            select po_lines_interface_s.nextval
            into   l_interface_line_id
            from   dual;

            l_shipment_num     := 1;
            l_line_num        := l_line_num + 1;
            --l_from_line_id    := i.blanket_po_line_num;
            l_promised_date    := null;
            
            IF i.blanket_po_line_num IS NOT NULL 
            THEN 
            BEGIN
              SELECT PO_Line_Id 
              INTO   l_from_line_id
              FROM   PO_LINES_ALL L 
              WHERE  L.Line_Num = i.blanket_po_line_num 
              AND    L.PO_header_Id = i.blanket_po_header_id 
              ;
              
              EXCEPTION 
                WHEN Others THEN 
                  l_from_line_id := null;
            END;
            END IF;
            
            dbms_output.put_line ('Link to blanket ' || i.blanket_po_header_id || ' line ' || i.blanket_po_line_num || ' with id ' || l_from_line_id);
            
            insert into po_lines_interface
            ( interface_header_id
            , interface_line_id
            , requisition_line_id
            , from_header_id
            , from_line_id
            , promised_date
            , creation_date
            , created_by
            , last_update_date
            , last_updated_by
            , line_num
            , shipment_num
            , LINE_ATTRIBUTE9
            , LINE_ATTRIBUTE8
            , LINE_ATTRIBUTE7
            , LINE_ATTRIBUTE6
            , LINE_ATTRIBUTE5
            , LINE_ATTRIBUTE4
            , LINE_ATTRIBUTE12
            )
            values
            ( l_interface_header_id
            , l_interface_line_id
            , i.requisition_line_id
            , i.blanket_po_header_id
            , l_from_line_id
            , l_promised_date
            , sysdate
            , fnd_global.user_id
            , sysdate
            , fnd_global.User_id
            , l_line_num
            , l_shipment_num
            , i.ATTRIBUTE9
            , i.ATTRIBUTE8
            , i.ATTRIBUTE7
            , i.ATTRIBUTE6
            , i.ATTRIBUTE5
            , i.ATTRIBUTE4
            , i.ATTRIBUTE12
            );
            
                        
            COMMIT;
        END LOOP Req;
        
        dbms_output.put_line ('Auto create PO nr of lines ' || l_nr_of_lines);
        
        IF l_nr_of_lines = 0
        THEN 
           dbms_output.put_line ('ERROR: Requisition not approved.');
          x_error_msg := 'Cannot find lines on requisition ' || p_requisition_number || ' that are OPEN and APPROVED.';
          x_return_status := fnd_api.g_ret_Sts_error;
        ELSE
            
            po_interface_s.create_documents(p_api_version              => 1.0
                                   ,x_return_status            => x_return_status
                                   ,x_msg_count                => x_msg_count
                                   ,x_msg_data                 => x_msg_data
                                   ,p_batch_id                 => l_batch_id
                                   ,p_req_operating_unit_id    => l_org_id
                                   ,p_purch_operating_unit_id  => l_org_id
                                   ,x_document_id              => x_autocreated_doc_id
                                   ,x_number_lines             => x_num_lines_processed
                                   ,x_document_number          => x_document_num
                                   ,p_document_creation_method => 'AUTOCREATE'
                                   ,p_orig_org_id              => l_org_id);
                                   
            x_po_number         := x_document_num;
            x_po_header_id    := x_autocreated_doc_id;
            
            dbms_output.put_line ('Auto create PObatch ' || l_batch_id || ' and org id ' || l_org_id);
            dbms_output.put_line ('Auto create PO' || x_document_num || ' status ' || x_return_status);
            
            
            
            IF x_return_status <> fnd_api.g_ret_sts_success
            THEN
              x_error_msg := x_msg_data;
              dbms_output.put_line ('Error creating PO: ' ||x_msg_data);
              DELETE FROM PO_HEADERS_INTERFACE WHERE INterface_Header_Id = l_batch_id;
              DELETE FROM PO_LINES_INTERFACE WHERE Interface_Header_Id = l_batch_id;
            
            END IF;
            
        END IF;
        
        dbms_output.put_line ('');
        
        END XXPBSA_AUTO_CREATE_PO_PRC;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_CREATE_GL_ACC_COMB
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_CREATE_GL_ACC_COMB" 
IS
V_COMBINATION VARCHAR2(240);
CURSOR C1 IS
SELECT DISTINCT CODE 
FROM   XXPBSA_ACCOUNT_COMBINATIONS;
--where   rownum=1;

begin

FOR I IN C1 LOOP

select xxpbsa_create_ccid(I.CODE) into V_COMBINATION  from dual;

dbms_output.put_line (V_COMBINATION);

insert into XXPBSA_COMB_ERROR_STATUS (code,status) values (i.code,v_combination);

END LOOP;


end;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_DELIVERY_SUMMARY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_DELIVERY_SUMMARY" (p_errbuf OUT VARCHAR2, p_retcode OUT VARCHAR2)
AS
      ln_user_id      NUMBER;
      ln_po_header_id NUMBER;
      ln_vendor_id    NUMBER;
      lv_segment1     VARCHAR2(20);
      ln_org_id       NUMBER;
      ln_line_num     NUMBER;
      ln_parent_txn_id NUMBER;
      ln_INTERFACE_SOURCE_CODE NUMBER;

         v_request_id         number;

         lv_status     VARCHAR2(10);
         lv_dev_status VARCHAR2(10);
         lv_message    VARCHAR2(100);
         ln_interval   NUMBER;
         lv_dev_phase  VARCHAR2(10);
         lv_phase      VARCHAR2(10);
         callv_status  BOOLEAN ;
         wait_status   BOOLEAN ;

  CURSOR po_header IS

    SELECT  distinct ph.PO_HEADER_ID
            ,ph.vendor_id
            ,ph.segment1
            ,ph.org_id
            ,PRHA.INTERFACE_SOURCE_CODE
    FROM po_headers_all ph
        ,po_lines_all pl
        ,PO_DISTRIBUTIONS_ALL PD
        ,PO_REQ_DISTRIBUTIONS_ALL PRDA
        ,PO_REQUISITION_LINES_ALL PRLA
        ,PO_REQUISITION_HEADERS_ALL PRHA
        ,deliverysummary@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ds
        ,deliverysummaryline@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK dsl
        ,PURCHASE_REQUESTS_HEADER@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prh
        ,PURCHASE_REQUESTS_LINES@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prl
        ,mtl_system_items_b msi
    WHERE   1 = 1
           AND ph.po_header_id = pl.po_header_id
           AND pd.po_line_id = pl.po_line_id
           AND ds.DeliveryId = dsl.DeliveryId
           AND ds.status_flag is null
           AND prh.PURCHASEREQUESTID = PRHA.INTERFACE_SOURCE_CODE
           AND msi.inventory_item_id = pl.item_id
           AND msi.segment1 = dsl.PARTNUMBER
           AND ds.EXTERNALREFERENCENUMBER = ph.SEGMENT1
           AND pd.REQ_DISTRIBUTION_ID = PRDA.DISTRIBUTION_ID
           AND PRDA.REQUISITION_LINE_ID = PRLA.REQUISITION_LINE_ID
           AND PRLA.REQUISITION_HEADER_ID = PRHA.REQUISITION_HEADER_ID
           and ph.AUTHORIZATION_STATUS = 'APPROVED'
           --AND NVL(ds.PurchaseOrderID, 0) = NVL(prl.PurchaseOrderID, 0)
           --and rownum = 1
    order by PRHA.INTERFACE_SOURCE_CODE desc;

  CURSOR po_line IS
    SELECT distinct pl.item_id,
           pl.po_line_id,
           pl.line_num,
           dsl.quantity quantity,
           pd.po_distribution_id,
           pl.unit_meas_lookup_code,
           mp.organization_code,
           pll.line_location_id,
           pll.closed_code,
           (pd.quantity_ordered - pll.quantity_received) quantity_received,
           pll.cancel_flag,
           pll.shipment_num,
           PRHA.INTERFACE_SOURCE_CODE
      FROM po_headers_all        ph,
           po_lines_all          pl,
           po_line_locations_all pll,
           po_distributions_all  pd,
           mtl_parameters        mp,
           mtl_system_items_b    msi,
           PO_REQ_DISTRIBUTIONS_ALL PRDA,
           PO_REQUISITION_LINES_ALL PRLA,
           PO_REQUISITION_HEADERS_ALL PRHA,
           deliverysummary@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ds,
           deliverysummaryline@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK dsl,
           PURCHASE_REQUESTS_HEADER@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prh,
           PURCHASE_REQUESTS_LINES@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prl
     WHERE 1 = 1
           --AND pl.po_header_id in (select max(po_header_id) from po_headers_all ph)--use a BLANKET PO
           AND pl.po_line_id = pll.po_line_id
           AND ph.po_header_id = pd.po_header_id
           AND pd.line_location_id = pll.line_location_id
           AND pd.po_line_id = pl.po_line_id
           AND pll.ship_to_organization_id = mp.organization_id
           AND ds.DeliveryId = dsl.DeliveryId
           --AND NVL(ds.PurchaseOrderID, 0) = NVL(prl.PurchaseOrderID, 0)
           AND ds.EXTERNALREFERENCENUMBER = ph.SEGMENT1
           AND ds.status_flag is null
           AND prh.PURCHASEREQUESTID = PRHA.INTERFACE_SOURCE_CODE
           AND msi.inventory_item_id = pl.item_id
           AND msi.segment1 = dsl.PARTNUMBER
           AND pd.REQ_DISTRIBUTION_ID = PRDA.DISTRIBUTION_ID
           AND PRDA.REQUISITION_LINE_ID = PRLA.REQUISITION_LINE_ID
           AND PRLA.REQUISITION_HEADER_ID = PRHA.REQUISITION_HEADER_ID
           and ph.AUTHORIZATION_STATUS = 'APPROVED'
           --and rownum = 1
           order by PRHA.INTERFACE_SOURCE_CODE desc
           ;

BEGIN
  dbms_output.put_line('***ezroi rcv api insert script***');

  for cur_headers in po_header
  loop

         ln_po_header_id            := cur_headers.PO_HEADER_ID;
         ln_vendor_id               := cur_headers.vendor_id;
         lv_segment1                := cur_headers.segment1;
         ln_org_id                  := cur_headers.org_id;
         ln_INTERFACE_SOURCE_CODE   := cur_headers.INTERFACE_SOURCE_CODE;

  SELECT user_id
    INTO ln_user_id
    FROM fnd_user
   WHERE user_name = upper('SJAYASINGHE1');

  INSERT INTO rcv_headers_interface
    (header_interface_id,
     group_id,
     processing_status_code,
     receipt_source_code,
     transaction_type,
     last_update_date,
     last_updated_by,
     last_update_login,
     vendor_id,
     expected_receipt_date,
     validation_flag,
     org_id)
    SELECT rcv_headers_interface_s.nextval,
           rcv_interface_groups_s.nextval,
           'PENDING',
           'VENDOR',
           'NEW',
           sysdate,
           ln_user_id,
           0,
           ln_vendor_id,
           sysdate,
           'y',
           ln_org_id
      FROM dual;

  FOR cur_po_line IN po_line
  LOOP
    IF cur_po_line.closed_code IN ('APPROVED', 'OPEN')
       AND cur_po_line.quantity_received >= cur_po_line.quantity
       AND NVL(cur_po_line.cancel_flag,'N') = 'N'
    THEN
      INSERT INTO rcv_transactions_interface
        (interface_transaction_id,
         group_id,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by,
         last_update_login,
         transaction_type,
         transaction_date,
         processing_status_code,
         processing_mode_code,
         transaction_status_code,
         po_header_id,
         po_line_id,
         item_id,
         quantity,
         unit_of_measure,
         po_line_location_id,
         po_distribution_id,
         auto_transact_code,
         receipt_source_code,
         to_organization_code,
         source_document_code,
         header_interface_id,
         validation_flag,
         org_id)
        SELECT rcv_transactions_interface_s.nextval,
               rcv_interface_groups_s.currval,
               sysdate,
               ln_user_id,
               sysdate,
               ln_user_id,
               0,
               'RECEIVE',
               SYSDATE,
               'PENDING',
               'BATCH',
               'PENDING',
               ln_po_header_id,
               cur_po_line.po_line_id,
               cur_po_line.item_id,
               cur_po_line.quantity,
               cur_po_line.unit_meas_lookup_code,
               cur_po_line.line_location_id,
               cur_po_line.po_distribution_id,
               'RECEIVE',
               'VENDOR',
               cur_po_line.organization_code,
               'PO',
               rcv_headers_interface_s.currval,
               'Y',
               ln_org_id
          FROM dual;

      ln_parent_txn_id := rcv_transactions_interface_s.currval;  

      INSERT INTO rcv_transactions_interface
        (
         parent_interface_txn_id,
         interface_transaction_id,
         group_id,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by,
         last_update_login,
         transaction_type,
         transaction_date,
         processing_status_code,
         processing_mode_code,
         transaction_status_code,
         po_header_id,
         po_line_id,
         item_id,
         quantity,
         unit_of_measure,
         po_line_location_id,
         po_distribution_id,
         auto_transact_code,
         receipt_source_code,
         to_organization_code,
         source_document_code,
         header_interface_id,
         validation_flag,
         org_id)
        SELECT ln_parent_txn_id,
               rcv_transactions_interface_s.nextval,
               rcv_interface_groups_s.currval,            
               sysdate,
               ln_user_id,
               sysdate,
               ln_user_id,
               0,
               'DELIVER',
               SYSDATE,
               'PENDING',
               'BATCH',
               'PENDING',
               ln_po_header_id,
               cur_po_line.po_line_id,
               cur_po_line.item_id,
               cur_po_line.quantity,
               cur_po_line.unit_meas_lookup_code,
               cur_po_line.line_location_id,
               cur_po_line.po_distribution_id,
               NULL,--'RECEIVE',
               'VENDOR',
               cur_po_line.organization_code,
               'PO',
               rcv_headers_interface_s.currval,
               'Y',
               ln_org_id
          FROM dual;         
      dbms_output.put_line('po line: ' || cur_po_line.line_num || ' shipment: ' || cur_po_line.shipment_num ||
                           ' has been inserted into roi.');

                           update deliverysummary@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK
                           set status_flag = 'P'
                           where EXTERNALREFERENCENUMBER = lv_segment1;
    ELSE
      dbms_output.put_line('po line ' || cur_po_line.line_num || ' is either closed, cancelled, received.');
    END IF;
  END LOOP;


 dbms_output.put_line('*** ezroi complete - end ***');
 COMMIT;


BEGIN
apps.mo_global.init ('PO');
apps.mo_global.set_policy_context ('S',204);
apps.fnd_global.apps_initialize ( user_id => 0, resp_id => 20707, resp_appl_id => 201 );
--------CALLING STANDARD RECEIVING TRANSACTION PROCESSOR ---------------------------------

  v_request_id   := apps.fnd_request.submit_request ( application => 'PO', 
                                                      PROGRAM => 'RVCTP', 
                                                      argument1 => 'BATCH', 
                                                      argument2 => apps.rcv_interface_groups_s.currval, 
                                                      argument3 => 81);
                                                      commit;
    dbms_output.put_line('Request Id '||v_request_id);                                                 

   wait_status := fnd_concurrent.wait_for_request (v_request_id, 60 , 0, lv_phase , lv_status , lv_dev_phase, lv_dev_status, lv_message);
    -- callv_status :=fnd_concurrent.get_request_status(ln_request_id, '', '',
    --          rphase,rstatus,dphase,dstatus, message);
    fnd_file.put_line(fnd_file.log,'dphase = '||lv_dev_phase||'and '||'dstatus ='||lv_dev_status) ;
    IF UPPER(lv_dev_phase)='COMPLETE' AND UPPER(lv_dev_status)= 'NORMAL' THEN
      dbms_output.put_line ('GRN program completed successfully');
      fnd_file.put_line(fnd_file.log,'GRN program completed successfully');
    END IF;
END;
 END LOOP;
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_EXECUTE_DEL_IMPORT_PRC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_EXECUTE_DEL_IMPORT_PRC" (errbuf OUT NOCOPY VARCHAR2, retcode OUT NOCOPY VARCHAR2)
as
begin

    XXPBSA_EXECUTE_DEL_IMPORT_PRC@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK;

end;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_EXECUTE_IMPORT_PRC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_EXECUTE_IMPORT_PRC" (errbuf OUT NOCOPY VARCHAR2, retcode OUT NOCOPY VARCHAR2)
as
begin

    XXPBSA_EXECUTE_IMPORT_PRC@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK;

end;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_EXECUTE_SUP_IMPORT_PRC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_EXECUTE_SUP_IMPORT_PRC" (errbuf OUT NOCOPY VARCHAR2, retcode OUT NOCOPY VARCHAR2)
as
begin

    XXPBSA_EXECUTE_SUP_IMPORT_PRC@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK;

end;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_HO_EXECUTE_IMPORT_PRC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_HO_EXECUTE_IMPORT_PRC" (p_proc_name varchar2, p_param1 varchar2, p_param2 varchar2, p_response out varchar2)
as
l_response varchar2(100);
begin
    IF p_proc_name = 'purchase-orders'
        THEN
            XXPBSA_HO_EXECUTE_IMPORT_PRC@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK('purchase-orders', p_param1, p_param2, l_response);
            p_response := l_response;
    ELSIF p_proc_name = 'suppliers'
        THEN
            XXPBSA_HO_EXECUTE_IMPORT_PRC@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK('suppliers', p_param1, p_param2, l_response); 
            p_response := l_response;
    ELSIF p_proc_name = 'supplier-returns'
        THEN
            XXPBSA_HO_EXECUTE_IMPORT_PRC@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK('supplier-returns', p_param1, p_param2, l_response); 
            p_response := l_response;
    ELSIF p_proc_name = 'rejected-lines'
        THEN
            XXPBSA_HO_EXECUTE_IMPORT_PRC@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK('rejected-lines', p_param1, p_param2, l_response); 
            p_response := l_response; 
    END IF;
end;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_ITEM_LOAD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_ITEM_LOAD" (p_item_number IN  VARCHAR2,
                    p_org_id      IN  NUMBER,
                    p_batch_id    IN  NUMBER,
                    x_ret_status  OUT VARCHAR2) IS
           
  -- local variables
  l_proc_name    CONSTANT VARCHAR2(50) := 'item_load';
  l_process_code          VARCHAR2(3);
  l_msg                   VARCHAR2(4000);
  l_item_tt               ego_item_pub.item_tbl_type;
  x_items_tt              ego_item_pub.item_tbl_type;
  x_inventory_item_id     mtl_system_items_b.inventory_item_id%TYPE;
  x_organization_id       mtl_system_items_b.organization_id%TYPE;
  x_return_status         VARCHAR2(1);
  x_msg_count             NUMBER;
  x_msg_data              error_handler.error_tbl_type;
  x_msg                   VARCHAR2(4000);

  -- cursor declarations
  CURSOR get_stg_item(c_item VARCHAR2,
                                       c_batch_id NUMBER) IS
  SELECT *
     FROM xxpbsa_item_load_v cmis
   WHERE cmis.batch_id = 2
        AND cmis.segment1 = 'TEST_ITEM_PBSA2'
        AND cmis.process_code = 'V';

  CURSOR get_hier_orgs IS
  SELECT p.organization_id
  FROM mtl_parameters p
  WHERE 1 = 1
        and p.organization_id != p_org_id; 

BEGIN


    --Setting FND global variables.
    fnd_global.apps_initialize (user_id      => 0, -- Thomas Chandler
                                resp_id      => 20634,  -- Inventory
                                resp_appl_id => 401); -- INV

   FOR cr_itm IN get_stg_item('TEST_ITEM_PBSA2', 12) LOOP
     -- Set local PC to current value
     l_process_code := cr_itm.process_code;

      -- Running style Create or Update only.                          
      IF cr_itm.action_code = 'I' THEN 
        l_item_tt(1).transaction_type  := 'CREATE';   -- Replace this with 'UPDATE' for update transaction.
      ELSE -- 'U' update
        l_item_tt(1).transaction_type  := 'UPDATE';
      END IF;  
        l_item_tt(1).segment1                   := p_item_number;
        l_item_tt(1).organization_id            := p_org_id;
        l_item_tt(1).description                := cr_itm.description;
        l_item_tt(1).long_description           := cr_itm.long_description;
        l_item_tt(1).primary_uom_code           := cr_itm.primary_uom_code;
        l_item_tt(1).inventory_item_status_code := cr_itm.inventory_item_status_code;
        l_item_tt(1).template_name              := cr_itm.template_name;
        -- General Planning Tab
        l_item_tt(1).min_minmax_quantity        := cr_itm.min_minmax_quantity;
        l_item_tt(1).max_minmax_quantity        := cr_itm.max_minmax_quantity;
        l_item_tt(1).minimum_order_quantity     := cr_itm.minimum_order_quantity;
        l_item_tt(1).maximum_order_quantity     := cr_itm.maximum_order_quantity;
        l_item_tt(1).fixed_lot_multiplier       := cr_itm.fixed_lot_multiplier;
        l_item_tt(1).source_type                := cr_itm.source_type;
        l_item_tt(1).source_organization_id     := cr_itm.source_organization_code;
        l_item_tt(1).source_subinventory        := cr_itm.source_subinventory;
        -- Lead Times Tab
        l_item_tt(1).full_lead_time             := cr_itm.full_lead_time;
        -- physical attributes tab
        l_item_tt(1).weight_uom_code            := cr_itm.weight_uom_code;
        l_item_tt(1).unit_weight                := cr_itm.unit_weight;
        l_item_tt(1).volume_uom_code            := cr_itm.volume_uom_code;
        l_item_tt(1).unit_volume                := cr_itm.unit_volume;
        l_item_tt(1).dimension_uom_code         := cr_itm.dimension_uom_code;
        l_item_tt(1).unit_length                := cr_itm.unit_length;
        l_item_tt(1).unit_width                 := cr_itm.unit_width;
        l_item_tt(1).unit_height                := cr_itm.unit_height;
        -- purchasing tab
        l_item_tt(1).buyer_id                   := cr_itm.buyer_name;
        l_item_tt(1).list_price_per_unit        := cr_itm.list_price_per_unit;
        l_item_tt(1).expense_account            := cr_itm.expense_account;
        --l_item_tt(1).hazard_class               := cr_itm.hazard_class;
        -- Order Management Tab
        l_item_tt(1).sales_account              := cr_itm.sales_account;
        -- Costing Tab
        l_item_tt(1).cost_of_sales_account      := cr_itm.cost_of_sales_account;
        -- attributes
        l_item_tt(1).attribute10                := cr_itm.attribute10;

        ego_item_pub.process_items (p_api_version        => 1.0,
                                    p_init_msg_list      => fnd_api.g_true,
                                    p_commit             => fnd_api.g_true,
                                    p_item_tbl           => l_item_tt,
                                                                      x_item_tbl           => x_items_tt,
  x_return_status      => x_return_status,
                                    x_msg_count          => x_msg_count);

        IF (x_return_status = fnd_api.g_ret_sts_success) THEN
          x_ret_status := x_return_status;
           l_process_code := 'I'; 
          FOR i IN 1 .. x_items_tt.COUNT LOOP
              dbms_output.put_line ('Inventory Item Id :' || x_items_tt(i).inventory_item_id);
              x_inventory_item_id :=  x_items_tt(i).inventory_item_id;
              dbms_output.put_line ('  Organization Id :' || x_items_tt(i).organization_id);
              x_organization_id := x_items_tt(i).organization_id;
          END LOOP;

           -- Call the Organization Assignments depending on Insert or Update.
           IF cr_itm.action_code = 'I' THEN 

               IF cr_itm.all_orgs_flag = 'Y' THEN
                 -- Loop through all the orgs in the hierarchy and assign.
                 FOR cr_orgs IN get_hier_orgs LOOP

                   XXPBSA_ASSIGN_ORGS(x_inventory_item_id, 
                               cr_orgs.organization_id,
                               cr_itm.primary_uom_code,
                               x_return_status,
                               x_msg);

                       COMMIT;
                 END LOOP; 
               ELSE 
                 -- Call the org assignment for the one org.
                 XXPBSA_ASSIGN_ORGS(x_inventory_item_id,
                             101,
                             cr_itm.primary_uom_code,
                             x_return_status,
                             x_msg);
                       COMMIT;  
               END IF;


               IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
                 l_process_code := 'IE';
                 -- append message
                 IF x_msg IS NOT NULL THEN
                   l_msg := x_msg||'; '||l_msg;
                 END IF;
               END IF;

           END IF;

        ELSE -- ITEM MASTER FAILED Process out the messages
          l_process_code := 'IE';
          error_handler.get_message_list (x_message_list => x_msg_data);

          FOR i IN 1 .. x_msg_data.COUNT LOOP
              l_msg := l_msg ||'; '|| x_msg_data(i).message_text;
          END LOOP;
        END IF;

     -- Call the update to the process code and messages
     update xxpbsa_item_load_v
     set PROCESS_CODE = 'P'
     where segment1 = p_item_number
           and batch_id = p_batch_id;

   END LOOP; -- Main Item loop
EXCEPTION
  WHEN OTHERS THEN 
    dbms_output.put_line(SQLERRM);
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_JE_INTERFACE_BKDEPO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_JE_INTERFACE_BKDEPO" (errbuf OUT NOCOPY VARCHAR2, retcode OUT NOCOPY VARCHAR2) 
IS        
        cursor cur
        is

SELECT LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  ENTERED_DR,
  ENTERED_CR,
  ACCOUNTED_DR,
  ACCOUNTED_CR,
  PERIOD_NAME,
  REFERENCE1,
  SYSDATE||'-'||'Outlet - Ampara' REFERENCE2,
  'TEST BANK DEPOSIT JE' REFERENCE4,
  REFERENCE5
FROM
  (
  ( SELECT DISTINCT bd.RECEIPTNUMBER,
    2021 LEDGER_ID,     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE, --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,--ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,    --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,         --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,         --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                    --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    BDL.CASHAMOUNT ENTERED_DR ,        --  i.ENTERED_DR
    0 ENTERED_CR ,        --  i.ENTERED_CR
    BDL.CASHAMOUNT ACCOUNTED_DR ,      --  i.ACCOUNTED_DR
    0 ACCOUNTED_CR ,      --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    TO_CHAR(SYSDATE) REFERENCE1 ,                 --  i.REFERENCE1
    bd.RECEIPTNUMBER REFERENCE2,                --  i.REFERENCE2
    'Bank Account' REFERENCE4 ,                --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    bd.RECEIPTNUMBER REFERENCE5            --  i.REFERENCE5
  FROM BANKDEPOSITSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG bd ,
    BANKDEPOSITSUMMARYLINE@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG bdl,
    gl_code_combinations gcc
  WHERE bd.RECEIPTNUMBER = bdl.RECEIPTNUMBER
        AND gcc.segment6 =        
                            (
                            SELECT ffv.flex_value
                            FROM   fnd_flex_values ffv
                                  ,fnd_flex_values_tl ffvt
                            WHERE  ffv.flex_value_id = ffvt.flex_value_id
                                   AND ffv.flex_value_set_id = 1017032
                                   AND ffvt.description like UPPER('BOC')
                            )
  ) 
  UNION ALL
  (
   select '0' RECEIPTNUMBER, LEDGER_ID, STATUS, SET_OF_BOOKS_ID, USER_JE_SOURCE_NAME, USER_JE_CATEGORY_NAME, ACCOUNTING_DATE, CURRENCY_CODE, DATE_CREATED, CREATED_BY, ACTUAL_FLAG, USER_CURRENCY_CONVERSION_TYPE, CURRENCY_CONVERSION_DATE, CURRENCY_CONVERSION_RATE, SEGMENT1, SEGMENT2, SEGMENT3, SEGMENT4, SEGMENT5, SEGMENT6, SEGMENT7, SEGMENT8, SEGMENT9, sum(ENTERED_DR) ENTERED_DR, sum(ENTERED_CR) ENTERED_CR, sum(ACCOUNTED_DR) ACCOUNTED_DR, sum(ACCOUNTED_CR) ACCOUNTED_CR, PERIOD_NAME, REFERENCE1, REFERENCE2, REFERENCE4, REFERENCE5
  from
  (
  SELECT DISTINCT bd.RECEIPTNUMBER RECEIPTNUMBER,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '11401' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    '219030' SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    0 ENTERED_DR ,   --  i.ENTERED_DR
    to_number(BDL.CASHAMOUNT) ENTERED_CR ,   --  i.ENTERED_CR
    0 ACCOUNTED_DR , --  i.ACCOUNTED_DR
    to_number(BDL.CASHAMOUNT) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    TO_CHAR(SYSDATE) REFERENCE1 ,      --  i.REFERENCE1
    'Control Account' REFERENCE2,     --  i.REFERENCE2
    'CONTROL' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'Control Account' REFERENCE5 --  i.REFERENCE5
  FROM BANKDEPOSITSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG bd ,
       BANKDEPOSITSUMMARYLINE@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG bdl,
       gl_code_combinations gcc
  WHERE bd.RECEIPTNUMBER = bdl.RECEIPTNUMBER
        AND gcc.segment6 =
            (
            SELECT ffv.flex_value
            FROM   fnd_flex_values ffv
                  ,fnd_flex_values_tl ffvt
            WHERE  ffv.flex_value_id = ffvt.flex_value_id
                   AND ffv.flex_value_set_id = 1017032
                   AND upper(ffvt.description) like UPPER('%Floating%Cash%')
            )
          )
    group by LEDGER_ID, STATUS, SET_OF_BOOKS_ID, USER_JE_SOURCE_NAME, USER_JE_CATEGORY_NAME, ACCOUNTING_DATE, CURRENCY_CODE, DATE_CREATED, CREATED_BY, ACTUAL_FLAG, USER_CURRENCY_CONVERSION_TYPE, CURRENCY_CONVERSION_DATE, CURRENCY_CONVERSION_RATE, SEGMENT1, SEGMENT2, SEGMENT3, SEGMENT4, SEGMENT5, SEGMENT6, SEGMENT7, SEGMENT8, SEGMENT9, PERIOD_NAME, REFERENCE1, REFERENCE2, REFERENCE4, REFERENCE5
  )
  ) glq
WHERE 1 = 1;


BEGIN

for cur_rec in cur
loop

INSERT INTO GL_INTERFACE (
                          LEDGER_ID                     ,
                          STATUS                        ,                                  
                          SET_OF_BOOKS_ID               ,        
                          USER_JE_SOURCE_NAME           ,        
                          USER_JE_CATEGORY_NAME         ,      
                          ACCOUNTING_DATE               ,      
                          CURRENCY_CODE                 ,      
                          DATE_CREATED                  ,      
                          CREATED_BY                    ,      
                          ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          USER_CURRENCY_CONVERSION_TYPE ,        
                          CURRENCY_CONVERSION_DATE      ,        
                          CURRENCY_CONVERSION_RATE      ,        
                          SEGMENT1                      ,        
                          SEGMENT2                      ,        
                          SEGMENT3                      ,        
                          SEGMENT4                      ,        
                          SEGMENT5                      ,        
                          SEGMENT6                      ,  
                          SEGMENT7                      ,
                          SEGMENT8                      ,
                          SEGMENT9                      ,      
                          ENTERED_DR                    ,        
                          ENTERED_CR                    ,        
                          ACCOUNTED_DR                  ,        
                          ACCOUNTED_CR                  ,        
                          PERIOD_NAME                   ,        
                          REFERENCE1                    ,        
                          REFERENCE2                    ,        
                          REFERENCE4                    ,   
                          REFERENCE5                              
                        )
                    values
                        ( 

                          cur_rec.LEDGER_ID                     ,
                          cur_rec.STATUS                        ,                                  
                          cur_rec.SET_OF_BOOKS_ID               ,        
                          cur_rec.USER_JE_SOURCE_NAME           ,        
                          cur_rec.USER_JE_CATEGORY_NAME         ,      
                          cur_rec.ACCOUNTING_DATE               ,      
                          cur_rec.CURRENCY_CODE                 ,      
                          cur_rec.DATE_CREATED                  ,      
                          cur_rec.CREATED_BY                    ,      
                          cur_rec.ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          cur_rec.USER_CURRENCY_CONVERSION_TYPE ,        
                          cur_rec.CURRENCY_CONVERSION_DATE      ,        
                          cur_rec.CURRENCY_CONVERSION_RATE      ,        

                         cur_rec.SEGMENT1                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02   
                         cur_rec.SEGMENT2                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01  
                         cur_rec.SEGMENT3                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01   
                         cur_rec.SEGMENT4                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05   
                         cur_rec.SEGMENT5                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00   
                         cur_rec.SEGMENT6                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00   
                         cur_rec.SEGMENT7                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01   
                         cur_rec.SEGMENT8                     , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100  
                         cur_rec.SEGMENT9                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00                          

                          cur_rec.ENTERED_DR                    ,        
                          cur_rec.ENTERED_CR                    ,        
                          cur_rec.ACCOUNTED_DR                  ,        
                          cur_rec.ACCOUNTED_CR                  ,        
                          cur_rec.PERIOD_NAME                   ,        
                          cur_rec.REFERENCE1                    ,        
                          cur_rec.REFERENCE2                    ,        
                          cur_rec.REFERENCE4                    ,   
                          cur_rec.REFERENCE5                   
                         );
 end loop;
 XXPBSA_REQ_JE_IMPORT('Manual');
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_JE_INTERFACE_INTRANS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_JE_INTERFACE_INTRANS" (errbuf OUT NOCOPY VARCHAR2, retcode OUT NOCOPY VARCHAR2) 
IS        
        cursor cur
        is
 
 select  LEDGER_ID,
        STATUS,
        SET_OF_BOOKS_ID,
        USER_JE_SOURCE_NAME,
        USER_JE_CATEGORY_NAME,
        ACCOUNTING_DATE,
        CURRENCY_CODE,
        DATE_CREATED,
        CREATED_BY,
        ACTUAL_FLAG,
        USER_CURRENCY_CONVERSION_TYPE,
        CURRENCY_CONVERSION_DATE,
        CURRENCY_CONVERSION_RATE,
        SEGMENT1,
        SEGMENT2,
        SEGMENT3,
        SEGMENT4,
        SEGMENT5,
        SEGMENT6,
        SEGMENT7,
        SEGMENT8,
        SEGMENT9,
        ENTERED_DR,
        ENTERED_CR,
        ACCOUNTED_DR,
        ACCOUNTED_CR,
        PERIOD_NAME,
        REFERENCE1,
        SYSDATE||'-'||'Outlet - Ampara' REFERENCE2,
        'TEST INTER-STOCK JOURNAL' REFERENCE4,
        REFERENCE5
from
(
SELECT DISTINCT ist.INTERSTORESTOCKTRANSFERID,
    2021 LEDGER_ID,     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE, --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,--ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,    --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,         --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,         --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                    --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    istl.LINETOTALPRICE + istl.LINETOTALPRICETAX ENTERED_DR ,        --  i.ENTERED_DR
    0 ENTERED_CR ,        --  i.ENTERED_CR
    istl.LINETOTALPRICE + istl.LINETOTALPRICETAX ACCOUNTED_DR ,      --  i.ACCOUNTED_DR
    0 ACCOUNTED_CR ,      --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    TO_CHAR(SYSDATE) REFERENCE1 ,                 --  i.REFERENCE1
    TO_CHAR(ist.RECEIVINGSTOREID) REFERENCE2,                --  i.REFERENCE2
    ist.INTERSTORESTOCKTRANSFERDATE REFERENCE4 ,                --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'In Transit' REFERENCE5            --  i.REFERENCE5
  FROM INTERSTORESTOCKTRANSFERSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ist ,
    INTERSTORESTOCKTRANSUMMARYLINE@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG istl,
    gl_code_combinations gcc
  WHERE istl.INTERSTORESTOCKTRANSFERID = ist.INTERSTORESTOCKTRANSFERID
        and UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))) like UPPER('%Stock%Control%')
  
UNION ALL   
SELECT DISTINCT 0 INTERSTORESTOCKTRANSFERID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gl.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    0 ENTERED_DR ,   --  i.ENTERED_DR
    istl.LINETOTALPRICE + istl.LINETOTALPRICETAX ENTERED_CR ,   --  i.ENTERED_CR
    0 ACCOUNTED_DR , --  i.ACCOUNTED_DR
    istl.LINETOTALPRICE + istl.LINETOTALPRICETAX ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    TO_CHAR(SYSDATE) REFERENCE1 ,      --  i.REFERENCE1
    'Inv Contr Account' REFERENCE2,     --  i.REFERENCE2
    'INV CONTROL' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'Inv Account' REFERENCE5 --  i.REFERENCE5
  FROM  INTERSTORESTOCKTRANSFERSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ist ,
        INTERSTORESTOCKTRANSUMMARYLINE@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG istl,
        (
       SELECT distinct gcc.segment4
             ,gcc.segment6
             ,msi.segment1 item_segment1
             ,msi.attribute10 attribute10
        FROM  mtl_item_categories mic,
              mtl_category_sets_tl mcst,
              mtl_category_sets_b mcs,
              mtl_categories_b_kfv mc,
              mtl_system_items_b msi,
              GL_CODE_COMBINATIONS gcc
        WHERE mic.category_set_id = mcs.category_set_id
              AND mcs.category_set_id   = mcst.category_set_id
              AND mcst.LANGUAGE         = USERENV ('LANG')
              AND mic.category_id       = mc.category_id     
              AND msi.organization_id = mic.organization_id    
              AND msi.inventory_item_id = mic.inventory_item_id   
              AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%Control%'||mc.segment1||'%')
              --AND UPPER('%'||mc.segment4||'%') like (CASE WHEN mc.segment1 like '%GROCERY%' then UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) else mc.segment4 end)
              AND gcc.end_date_active is null
    ) gl
  WHERE ist.INTERSTORESTOCKTRANSFERID = istl.INTERSTORESTOCKTRANSFERID
        and gl.attribute10 = istl.PRODUCTID
UNION ALL
SELECT DISTINCT ist.INTERSTORESTOCKTRANSFERID,
    2021 LEDGER_ID,     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE, --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,--ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,    --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,         --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,         --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    NVL('11000', ist.RECEIVINGSTOREID) SEGMENT2 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                    --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    0 ENTERED_DR ,        --  i.ENTERED_DR
    istl.LINETOTALPRICE + istl.LINETOTALPRICETAX ENTERED_CR ,        --  i.ENTERED_CR
    0 ACCOUNTED_DR ,      --  i.ACCOUNTED_DR
    istl.LINETOTALPRICE + istl.LINETOTALPRICETAX ACCOUNTED_CR ,      --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    TO_CHAR(SYSDATE) REFERENCE1 ,                 --  i.REFERENCE1
    TO_CHAR(ist.RECEIVINGSTOREID) REFERENCE2,                --  i.REFERENCE2
    ist.INTERSTORESTOCKTRANSFERDATE REFERENCE4 ,                --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'In Transit' REFERENCE5            --  i.REFERENCE5
  FROM INTERSTORESTOCKTRANSFERSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ist ,
    INTERSTORESTOCKTRANSUMMARYLINE@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG istl,
    gl_code_combinations gcc
  WHERE istl.INTERSTORESTOCKTRANSFERID = ist.INTERSTORESTOCKTRANSFERID
        and UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))) like UPPER('%Stock%Control%')
UNION ALL   
SELECT DISTINCT 0 INTERSTORESTOCKTRANSFERID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    NVL('11000', ist.RECEIVINGSTOREID) SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gl.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    istl.LINETOTALPRICE + istl.LINETOTALPRICETAX ENTERED_DR ,   --  i.ENTERED_DR
    0 ENTERED_CR ,   --  i.ENTERED_CR
    istl.LINETOTALPRICE + istl.LINETOTALPRICETAX ACCOUNTED_DR , --  i.ACCOUNTED_DR
    0 ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    TO_CHAR(SYSDATE) REFERENCE1 ,      --  i.REFERENCE1
    'Inv Contr Account' REFERENCE2,     --  i.REFERENCE2
    'INV CONTROL' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'Inv Account' REFERENCE5 --  i.REFERENCE5
  FROM  INTERSTORESTOCKTRANSFERSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ist ,
        INTERSTORESTOCKTRANSUMMARYLINE@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG istl,
        (
       SELECT distinct gcc.segment4
             ,gcc.segment6
             ,msi.segment1 item_segment1
             ,msi.attribute10 attribute10
        FROM  mtl_item_categories mic,
              mtl_category_sets_tl mcst,
              mtl_category_sets_b mcs,
              mtl_categories_b_kfv mc,
              mtl_system_items_b msi,
              GL_CODE_COMBINATIONS gcc
        WHERE mic.category_set_id = mcs.category_set_id
              AND mcs.category_set_id   = mcst.category_set_id
              AND mcst.LANGUAGE         = USERENV ('LANG')
              AND mic.category_id       = mc.category_id     
              AND msi.organization_id = mic.organization_id    
              AND msi.inventory_item_id = mic.inventory_item_id   
              AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%Control%'||mc.segment1||'%')
              --AND UPPER('%'||mc.segment4||'%') like (CASE WHEN mc.segment1 like '%GROCERY%' then UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) else mc.segment4 end)
              AND gcc.end_date_active is null
    ) gl
  WHERE ist.INTERSTORESTOCKTRANSFERID = istl.INTERSTORESTOCKTRANSFERID
        and gl.attribute10 = istl.PRODUCTID
);

BEGIN

for cur_rec in cur
loop

INSERT INTO GL_INTERFACE (
                          LEDGER_ID                     ,
                          STATUS                        ,                                  
                          SET_OF_BOOKS_ID               ,        
                          USER_JE_SOURCE_NAME           ,        
                          USER_JE_CATEGORY_NAME         ,      
                          ACCOUNTING_DATE               ,      
                          CURRENCY_CODE                 ,      
                          DATE_CREATED                  ,      
                          CREATED_BY                    ,      
                          ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          USER_CURRENCY_CONVERSION_TYPE ,        
                          CURRENCY_CONVERSION_DATE      ,        
                          CURRENCY_CONVERSION_RATE      ,        
                          SEGMENT1                      ,        
                          SEGMENT2                      ,        
                          SEGMENT3                      ,        
                          SEGMENT4                      ,        
                          SEGMENT5                      ,        
                          SEGMENT6                      ,  
                          SEGMENT7                      ,
                          SEGMENT8                      ,
                          SEGMENT9                      ,      
                          ENTERED_DR                    ,        
                          ENTERED_CR                    ,        
                          ACCOUNTED_DR                  ,        
                          ACCOUNTED_CR                  ,        
                          PERIOD_NAME                   ,        
                          REFERENCE1                    ,        
                          REFERENCE2                    ,        
                          REFERENCE4                    ,   
                          REFERENCE5                              
                        )
                    values
                        ( 

                          cur_rec.LEDGER_ID                     ,
                          cur_rec.STATUS                        ,                                  
                          cur_rec.SET_OF_BOOKS_ID               ,        
                          cur_rec.USER_JE_SOURCE_NAME           ,        
                          cur_rec.USER_JE_CATEGORY_NAME         ,      
                          cur_rec.ACCOUNTING_DATE               ,      
                          cur_rec.CURRENCY_CODE                 ,      
                          cur_rec.DATE_CREATED                  ,      
                          cur_rec.CREATED_BY                    ,      
                          cur_rec.ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          cur_rec.USER_CURRENCY_CONVERSION_TYPE ,        
                          cur_rec.CURRENCY_CONVERSION_DATE      ,        
                          cur_rec.CURRENCY_CONVERSION_RATE      ,        

                         cur_rec.SEGMENT1                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02   
                         cur_rec.SEGMENT2                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01  
                         cur_rec.SEGMENT3                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01   
                         cur_rec.SEGMENT4                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05   
                         cur_rec.SEGMENT5                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00   
                         cur_rec.SEGMENT6                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00   
                         cur_rec.SEGMENT7                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01   
                         cur_rec.SEGMENT8                     , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100  
                         cur_rec.SEGMENT9                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00                          
                          cur_rec.ENTERED_DR                    ,        
                          cur_rec.ENTERED_CR                    ,        
                          cur_rec.ACCOUNTED_DR                  ,        
                          cur_rec.ACCOUNTED_CR                  ,        
                          cur_rec.PERIOD_NAME                   ,        
                          cur_rec.REFERENCE1                    ,        
                          cur_rec.REFERENCE2                    ,        
                          cur_rec.REFERENCE4                    ,   
                          cur_rec.REFERENCE5                   
                         );
 end loop;
 XXPBSA_REQ_JE_IMPORT('Manual');
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_JE_INTERFACE_PROD_MOVE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_JE_INTERFACE_PROD_MOVE" (errbuf OUT NOCOPY VARCHAR2, retcode OUT NOCOPY VARCHAR2) 
IS

cursor cur
is
SELECT LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  ENTERED_DR,
  ENTERED_CR,
  ACCOUNTED_DR,
  ACCOUNTED_CR,
  PERIOD_NAME,
  REFERENCE1,
  SYSDATE||'-'||'Outlet - Ampara' REFERENCE2,
  'TEST PROD MOVE' REFERENCE4,
  REFERENCE5
FROM
  (
  (
    SELECT DISTINCT 0 SALESUMMARYID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    gl.SEGMENT4 SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gl.SEGMENT6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    0 ENTERED_DR ,   --  i.ENTERED_DR
    round(pms.VALUEADJUSTED * UNITADJUSTED + VALUEADJUSTEDTAX, 2) ENTERED_CR ,   --  i.ENTERED_CR
    0 ACCOUNTED_DR , --  i.ACCOUNTED_DR
    round(pms.VALUEADJUSTED * UNITADJUSTED + VALUEADJUSTEDTAX, 2) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    SYSDATE REFERENCE1 ,      --  i.REFERENCE1
    'Price Variance' REFERENCE2,     --  i.REFERENCE2
    'PRICE VARIANCE' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'Price Variance' REFERENCE5 --  i.REFERENCE5
  FROM PRODUCTMOVEMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pms,
    (
    SELECT   distinct gcc.segment4
             ,gcc.segment6
             ,msi.segment1 item_segment1
        FROM  mtl_item_categories mic,
              mtl_category_sets_tl mcst,
              mtl_category_sets_b mcs,
              mtl_categories_b_kfv mc,
              mtl_system_items_b msi,
              GL_CODE_COMBINATIONS gcc
        WHERE mic.category_set_id = mcs.category_set_id
              AND mcs.category_set_id   = mcst.category_set_id
              AND mcst.LANGUAGE         = USERENV ('LANG')
              AND mic.category_id       = mc.category_id     
              AND msi.organization_id = mic.organization_id    
              AND msi.inventory_item_id = mic.inventory_item_id   
              AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('% Price%Variance%')
              --AND UPPER('%'||mc.segment4||'%') like (CASE WHEN mc.segment1 like '%GROCERY%' then UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) else mc.segment4 end)
              AND gcc.end_date_active is null
    ) gl
  WHERE pms.PARTNUMBER = gl.item_segment1
  ) 
  UNION ALL
    (
      SELECT DISTINCT 0 SALESUMMARYID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    gl.SEGMENT4 SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gl.SEGMENT6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    ROUND(pms.VALUEADJUSTED * UNITADJUSTED + VALUEADJUSTEDTAX, 2) ENTERED_DR ,   --  i.ENTERED_DR
    0 ENTERED_CR ,   --  i.ENTERED_CR
    ROUND(pms.VALUEADJUSTED * UNITADJUSTED + VALUEADJUSTEDTAX, 2) ACCOUNTED_DR , --  i.ACCOUNTED_DR
    0  ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    SYSDATE REFERENCE1 ,      --  i.REFERENCE1
    'Inv Control Account' REFERENCE2,     --  i.REFERENCE2
    'INV CONTROL' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'Inv Control Account' REFERENCE5 --  i.REFERENCE5
  FROM PRODUCTMOVEMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pms,
    (
    SELECT   distinct gcc.segment4
             ,gcc.segment6
             ,msi.segment1 item_segment1
        FROM  mtl_item_categories mic,
              mtl_category_sets_tl mcst,
              mtl_category_sets_b mcs,
              mtl_categories_b_kfv mc,
              mtl_system_items_b msi,
              GL_CODE_COMBINATIONS gcc
        WHERE mic.category_set_id = mcs.category_set_id
              AND mcs.category_set_id   = mcst.category_set_id
              AND mcst.LANGUAGE         = USERENV ('LANG')
              AND mic.category_id       = mc.category_id     
              AND msi.organization_id = mic.organization_id    
              AND msi.inventory_item_id = mic.inventory_item_id   
              AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%Control%'||mc.segment1||'%')
              --AND UPPER('%'||mc.segment4||'%') like (CASE WHEN mc.segment1 like '%GROCERY%' then UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) else mc.segment4 end)
              AND gcc.end_date_active is null
    ) gl
  WHERE pms.PARTNUMBER = gl.item_segment1
    )
    
  ) glq
WHERE 1 = 1;


BEGIN

for cur_rec in cur
loop

INSERT INTO GL_INTERFACE (
                          LEDGER_ID                     ,
                          STATUS                        ,                                  
                          SET_OF_BOOKS_ID               ,        
                          USER_JE_SOURCE_NAME           ,        
                          USER_JE_CATEGORY_NAME         ,      
                          ACCOUNTING_DATE               ,      
                          CURRENCY_CODE                 ,      
                          DATE_CREATED                  ,      
                          CREATED_BY                    ,      
                          ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          USER_CURRENCY_CONVERSION_TYPE ,        
                          CURRENCY_CONVERSION_DATE      ,        
                          CURRENCY_CONVERSION_RATE      ,        
                          SEGMENT1                      ,        
                          SEGMENT2                      ,        
                          SEGMENT3                      ,        
                          SEGMENT4                      ,        
                          SEGMENT5                      ,        
                          SEGMENT6                      ,  
                          SEGMENT7                      ,
                          SEGMENT8                      ,
                          SEGMENT9                      ,      
                          ENTERED_DR                    ,        
                          ENTERED_CR                    ,        
                          ACCOUNTED_DR                  ,        
                          ACCOUNTED_CR                  ,        
                          PERIOD_NAME                   ,        
                          REFERENCE1                    ,        
                          REFERENCE2                    ,        
                          REFERENCE4                    ,   
                          REFERENCE5                              
                        )
                    values
                        ( 

                          cur_rec.LEDGER_ID                     ,
                          cur_rec.STATUS                        ,                                  
                          cur_rec.SET_OF_BOOKS_ID               ,        
                          cur_rec.USER_JE_SOURCE_NAME           ,        
                          cur_rec.USER_JE_CATEGORY_NAME         ,      
                          cur_rec.ACCOUNTING_DATE               ,      
                          cur_rec.CURRENCY_CODE                 ,      
                          cur_rec.DATE_CREATED                  ,      
                          cur_rec.CREATED_BY                    ,      
                          cur_rec.ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          cur_rec.USER_CURRENCY_CONVERSION_TYPE ,        
                          cur_rec.CURRENCY_CONVERSION_DATE      ,        
                          cur_rec.CURRENCY_CONVERSION_RATE      ,        

                         cur_rec.SEGMENT1                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02   
                         cur_rec.SEGMENT2                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01  
                         cur_rec.SEGMENT3                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01   
                         cur_rec.SEGMENT4                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05   
                         cur_rec.SEGMENT5                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00   
                         cur_rec.SEGMENT6                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00   
                         cur_rec.SEGMENT7                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01   
                         cur_rec.SEGMENT8                     , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100  
                         cur_rec.SEGMENT9                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00                          

                          cur_rec.ENTERED_DR                    ,        
                          cur_rec.ENTERED_CR                    ,        
                          cur_rec.ACCOUNTED_DR                  ,        
                          cur_rec.ACCOUNTED_CR                  ,        
                          cur_rec.PERIOD_NAME                   ,        
                          cur_rec.REFERENCE1                    ,        
                          cur_rec.REFERENCE2                    ,        
                          cur_rec.REFERENCE4                    ,   
                          cur_rec.REFERENCE5                   
                         );
 end loop;
 XXPBSA_REQ_JE_IMPORT('Manual');
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_JE_INTERFACE_RET_SUM
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_JE_INTERFACE_RET_SUM" (errbuf OUT NOCOPY VARCHAR2, retcode OUT NOCOPY VARCHAR2) 
IS        
        cursor cur
        is 

       select LEDGER_ID,
          STATUS,
          SET_OF_BOOKS_ID,
          USER_JE_SOURCE_NAME,
          USER_JE_CATEGORY_NAME,
          ACCOUNTING_DATE,
          CURRENCY_CODE,
          DATE_CREATED,
          CREATED_BY,
          ACTUAL_FLAG,
          USER_CURRENCY_CONVERSION_TYPE,
          CURRENCY_CONVERSION_DATE,
          CURRENCY_CONVERSION_RATE,
          SEGMENT1,
          SEGMENT2,
          SEGMENT3,
          SEGMENT4,
          SEGMENT5,
          SEGMENT6,
          SEGMENT7,
          SEGMENT8,
          SEGMENT9,
          SUM(ENTERED_DR) ENTERED_DR,
          SUM(ENTERED_CR) ENTERED_CR,
          SUM(ACCOUNTED_DR) ACCOUNTED_DR,
          SUM(ACCOUNTED_CR) ACCOUNTED_CR,
          PERIOD_NAME,
          REFERENCE1,
          SYSDATE||'-'||'Outlet - Ampara' REFERENCE2,
          'TEST JOURNAL RETURN' REFERENCE4,
          REFERENCE5
        from
        (
        SELECT LEDGER_ID,
          STATUS,
          SET_OF_BOOKS_ID,
          USER_JE_SOURCE_NAME,
          USER_JE_CATEGORY_NAME,
          ACCOUNTING_DATE,
          CURRENCY_CODE,
          DATE_CREATED,
          CREATED_BY,
          ACTUAL_FLAG,
          USER_CURRENCY_CONVERSION_TYPE,
          CURRENCY_CONVERSION_DATE,
          CURRENCY_CONVERSION_RATE,
          SEGMENT1,
          SEGMENT2,
          SEGMENT3,
          SEGMENT4,
          SEGMENT5,
          SEGMENT6,
          SEGMENT7,
          SEGMENT8,
          SEGMENT9,
          ENTERED_DR,
          ENTERED_CR,
          ACCOUNTED_DR,
          ACCOUNTED_CR,
        --(
        --  CASE 
        --  WHEN                 segment1
        --                ||'.'||segment2
        --                ||'.'||segment3
        --                ||'.'||segment4
        --                ||'.'||segment5
        --                ||'.'||segment6
        --                ||'.'||segment7
        --                ||'.'||segment8
        --                ||'.'||segment9 = XXPBSA_GET_GL_ACCOUNT('Lanka Sathosa Ltd.Head Office.Unspecified.Unspecified.Unspecified.Sales And Payment Control.Unspecified.Unspecified') THEN
        --    ENTERED_DR
        --  ELSE 0
        --  END) ENTERED_DR ,
        --(
        --  CASE 
        --  WHEN                 segment1
        --                ||'.'||segment2
        --                ||'.'||segment3
        --                ||'.'||segment4
        --                ||'.'||segment5
        --                ||'.'||segment6
        --                ||'.'||segment7
        --                ||'.'||segment8
        --                ||'.'||segment9 = XXPBSA_GET_GL_ACCOUNT('Lanka Sathosa Ltd.Head Office.Unspecified.Unspecified.Unspecified.Sales And Payment Control.Unspecified.Unspecified') THEN
        --    0
        --  ELSE ENTERED_CR
        --  END) ENTERED_CR,
        --(
        --  CASE 
        --  WHEN                 segment1
        --                ||'.'||segment2
        --                ||'.'||segment3
        --                ||'.'||segment4
        --                ||'.'||segment5
        --                ||'.'||segment6
        --                ||'.'||segment7
        --                ||'.'||segment8
        --                ||'.'||segment9 = XXPBSA_GET_GL_ACCOUNT('Lanka Sathosa Ltd.Head Office.Unspecified.Unspecified.Unspecified.Sales And Payment Control.Unspecified.Unspecified') THEN
        --    ACCOUNTED_DR
        --  ELSE 0
        --  END) ACCOUNTED_DR,
        --(
        --  CASE 
        --  WHEN                 segment1
        --                ||'.'||segment2
        --                ||'.'||segment3
        --                ||'.'||segment4
        --                ||'.'||segment5
        --                ||'.'||segment6
        --                ||'.'||segment7
        --                ||'.'||segment8
        --                ||'.'||segment9 = XXPBSA_GET_GL_ACCOUNT('Lanka Sathosa Ltd.Head Office.Unspecified.Unspecified.Unspecified.Sales And Payment Control.Unspecified.Unspecified') THEN
        --    0
        --  ELSE ACCOUNTED_CR
        --  END) ACCOUNTED_CR,
          PERIOD_NAME,
          REFERENCE1,
          REFERENCE2,
          REFERENCE4,
          REFERENCE5
        FROM
          (
          (select SALESUMMARYID,
          LEDGER_ID,
          STATUS,
          SET_OF_BOOKS_ID,
          USER_JE_SOURCE_NAME,
          USER_JE_CATEGORY_NAME,
          ACCOUNTING_DATE,
          CURRENCY_CODE,
          DATE_CREATED,
          CREATED_BY,
          ACTUAL_FLAG,
          USER_CURRENCY_CONVERSION_TYPE,
          CURRENCY_CONVERSION_DATE,
          CURRENCY_CONVERSION_RATE,
          SEGMENT1,
          SEGMENT2,
          SEGMENT3,
          SEGMENT4,
          SEGMENT5,
          SEGMENT6,
          SEGMENT7,
          SEGMENT8,
          SEGMENT9,
          SUM(ENTERED_DR) ENTERED_DR,
          SUM(ENTERED_CR) ENTERED_CR,
          SUM(ACCOUNTED_DR) ACCOUNTED_DR,
          SUM(ACCOUNTED_CR) ACCOUNTED_CR,
          PERIOD_NAME,
          REFERENCE1,
          REFERENCE2,
          REFERENCE4,
          REFERENCE5
          from
          (SELECT DISTINCT ss.SALESUMMARYID,
            2021 LEDGER_ID,     --  SELECT * FROM GL_SETS_OF_BOOKS
            'Y' STATUS,                         --  i.STATUS
            2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
            'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
            'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
            sysdate ACCOUNTING_DATE, --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
            'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
            sysdate DATE_CREATED,--ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
            0 CREATED_BY,                       --  fnd_global.user_id
            'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
            --  i.ENCUMBRANCE_TYPE_ID       ,
            --  i.BUDGET_VERSION_ID         ,
            '' USER_CURRENCY_CONVERSION_TYPE,    --  i.USER_CURRENCY_CONVERSION_TYPE
            '' CURRENCY_CONVERSION_DATE,         --  i.CURRENCY_CONVERSION_DATE
            '' CURRENCY_CONVERSION_RATE,         --  i.CURRENCY_CONVERSION_RATE
            '11' SEGMENT1,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
            '11000' SEGMENT2 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
            '00' SEGMENT3,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
            gl.segment4 SEGMENT4 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
            '000' SEGMENT5,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
            gl.segment6 SEGMENT6,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
            '00000' SEGMENT7,                    --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
            '000' SEGMENT8,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
            '000' SEGMENT9,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
            SSP.TOTALVALUEEX ENTERED_DR ,        --  i.ENTERED_DR
            0 ENTERED_CR ,        --  i.ENTERED_CR
            SSP.TOTALVALUEEX ACCOUNTED_DR ,      --  i.ACCOUNTED_DR
            0 ACCOUNTED_CR ,      --  i.ACCOUNTED_CR
            XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
            SYSDATE REFERENCE1 ,                 --  i.REFERENCE1
            SSP.TITLE REFERENCE2,                --  i.REFERENCE2
            'SALES RETURN' REFERENCE4 ,                --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
            'Sales Return' REFERENCE5            --  i.REFERENCE5
          FROM RETURNSSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ss ,
            RETURNSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ssp,
            (SELECT distinct gcc.segment4
             , gcc.segment6
             ,msi.segment1 item_segment1
             ,mc.segment1
        FROM  mtl_item_categories mic,
              mtl_category_sets_tl mcst,
              mtl_category_sets_b mcs,
              mtl_categories_b_kfv mc,
              mtl_system_items_b msi,
              GL_CODE_COMBINATIONS gcc
        WHERE mic.category_set_id = mcs.category_set_id
              AND mcs.category_set_id   = mcst.category_set_id
              AND mcst.LANGUAGE         = USERENV ('LANG')
              AND mic.category_id       = mc.category_id     
              AND msi.organization_id = mic.organization_id    
              AND msi.inventory_item_id = mic.inventory_item_id
              AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%'||mc.segment1||'%')
              AND UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) like UPPER('%'||mc.segment4||'%')
              AND gcc.end_date_active is null
              ) gl
          WHERE ss.SALESUMMARYID = ssp.SALESUMMARYID
                AND gl.item_segment1(+) = ssp.partnumber
                AND ss.status_flag is null
          )
          group by SALESUMMARYID,
          LEDGER_ID,
          STATUS,
          SET_OF_BOOKS_ID,
          USER_JE_SOURCE_NAME,
          USER_JE_CATEGORY_NAME,
          ACCOUNTING_DATE,
          CURRENCY_CODE,
          DATE_CREATED,
          CREATED_BY,
          ACTUAL_FLAG,
          USER_CURRENCY_CONVERSION_TYPE,
          CURRENCY_CONVERSION_DATE,
          CURRENCY_CONVERSION_RATE,
          SEGMENT1,
          SEGMENT2,
          SEGMENT3,
          SEGMENT4,
          SEGMENT5,
          SEGMENT6,
          SEGMENT7,
          SEGMENT8,
          SEGMENT9,
          PERIOD_NAME,
          REFERENCE1,
          REFERENCE2,
          REFERENCE4,
          REFERENCE5) 
          UNION ALL
          (SELECT SALESUMMARYID,
          LEDGER_ID,
          STATUS,
          SET_OF_BOOKS_ID,
          USER_JE_SOURCE_NAME,
          USER_JE_CATEGORY_NAME,
          ACCOUNTING_DATE,
          CURRENCY_CODE,
          DATE_CREATED,
          CREATED_BY,
          ACTUAL_FLAG,
          USER_CURRENCY_CONVERSION_TYPE,
          CURRENCY_CONVERSION_DATE,
          CURRENCY_CONVERSION_RATE,
          SEGMENT1,
          SEGMENT2,
          SEGMENT3,
          SEGMENT4,
          SEGMENT5,
          SEGMENT6,
          SEGMENT7,
          SEGMENT8,
          SEGMENT9,
          SUM(ENTERED_DR) ENTERED_DR,
          SUM(ENTERED_CR) ENTERED_CR,
          SUM(ACCOUNTED_DR) ACCOUNTED_DR,
          SUM(ACCOUNTED_CR) ACCOUNTED_CR,
          PERIOD_NAME,
          REFERENCE1,
          REFERENCE2,
          REFERENCE4,
          REFERENCE5
        FROM
          ( SELECT DISTINCT '0' SALESUMMARYID,
            2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
            'Y' STATUS,                         --  i.STATUS
            2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
            'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
            'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
            sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
            'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
            sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
            0 CREATED_BY,                       --  fnd_global.user_id
            'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
            --  i.ENCUMBRANCE_TYPE_ID       ,
            --  i.BUDGET_VERSION_ID         ,
            '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
            '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
            '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
            '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
            '01100' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
            '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
            '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
            '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
            '210800' SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
            '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
            '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
            '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
            SSP.TOTALVALUETAX ENTERED_DR ,   --  i.ENTERED_DR
            0 ENTERED_CR ,   --  i.ENTERED_CR
            SSP.TOTALVALUETAX ACCOUNTED_DR , --  i.ACCOUNTED_DR
            0 ACCOUNTED_CR , --  i.ACCOUNTED_CR
            XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
            SYSDATE REFERENCE1 ,      --  i.REFERENCE1
            'Tax Account' REFERENCE2,     --  i.REFERENCE2
            'TAX' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
            'Tax Account' REFERENCE5 --  i.REFERENCE5
          FROM RETURNSSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ss ,
            RETURNSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ssp
          WHERE ss.SALESUMMARYID = ssp.SALESUMMARYID
                and ss.status_flag is null
          )
        GROUP BY SALESUMMARYID,
          LEDGER_ID,
          STATUS,
          SET_OF_BOOKS_ID,
          USER_JE_SOURCE_NAME,
          USER_JE_CATEGORY_NAME,
          ACCOUNTING_DATE,
          CURRENCY_CODE,
          DATE_CREATED,
          CREATED_BY,
          ACTUAL_FLAG,
          USER_CURRENCY_CONVERSION_TYPE,
          CURRENCY_CONVERSION_DATE,
          CURRENCY_CONVERSION_RATE,
          SEGMENT1,
          SEGMENT2,
          SEGMENT3,
          SEGMENT4,
          SEGMENT5,
          SEGMENT6,
          SEGMENT7,
          SEGMENT8,
          SEGMENT9,
          PERIOD_NAME,
          REFERENCE1,
          REFERENCE2,
          REFERENCE4,
          REFERENCE5)
        UNION ALL
        (
        SELECT SALESUMMARYID,
          LEDGER_ID,
          STATUS,
          SET_OF_BOOKS_ID,
          USER_JE_SOURCE_NAME,
          USER_JE_CATEGORY_NAME,
          ACCOUNTING_DATE,
          CURRENCY_CODE,
          DATE_CREATED,
          CREATED_BY,
          ACTUAL_FLAG,
          USER_CURRENCY_CONVERSION_TYPE,
          CURRENCY_CONVERSION_DATE,
          CURRENCY_CONVERSION_RATE,
          SEGMENT1,
          SEGMENT2,
          SEGMENT3,
          SEGMENT4,
          SEGMENT5,
          SEGMENT6,
          SEGMENT7,
          SEGMENT8,
          SEGMENT9,
          SUM(ENTERED_DR) ENTERED_DR,
          SUM(ENTERED_CR) ENTERED_CR,
          SUM(ACCOUNTED_DR) ACCOUNTED_DR,
          SUM(ACCOUNTED_CR) ACCOUNTED_CR,
          PERIOD_NAME,
          REFERENCE1,
          REFERENCE2,
          REFERENCE4,
          REFERENCE5
        FROM
          ( SELECT DISTINCT '0' SALESUMMARYID,
            2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
            'Y' STATUS,                         --  i.STATUS
            2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
            'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
            'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
            sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
            'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
            sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
            0 CREATED_BY,                       --  fnd_global.user_id
            'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
            --  i.ENCUMBRANCE_TYPE_ID       ,
            --  i.BUDGET_VERSION_ID         ,
            '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
            '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
            '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
            '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
            '09100' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
            '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
            gl.segment4 SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
            '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
            gl.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
            '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
            '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
            '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
            0 ENTERED_DR ,   --  i.ENTERED_DR
            SSP.AVGCOSTEX * SSP.TOTALUNITS ENTERED_CR ,   --  i.ENTERED_CR
            0 ACCOUNTED_DR , --  i.ACCOUNTED_DR
            SSP.AVGCOSTEX * SSP.TOTALUNITS ACCOUNTED_CR , --  i.ACCOUNTED_CR
            XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
            SYSDATE REFERENCE1 ,      --  i.REFERENCE1
            'Cost Account' REFERENCE2,     --  i.REFERENCE2
            'COST' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
            'Cost Account' REFERENCE5 --  i.REFERENCE5
          FROM RETURNSSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ss ,
            RETURNSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ssp,
            (
        SELECT   distinct gcc.segment4
             ,gcc.segment6
             ,msi.segment1 item_segment1
        FROM  mtl_item_categories mic,
              mtl_category_sets_tl mcst,
              mtl_category_sets_b mcs,
              mtl_categories_b_kfv mc,
              mtl_system_items_b msi,
              GL_CODE_COMBINATIONS gcc
        WHERE mic.category_set_id = mcs.category_set_id
              AND mcs.category_set_id   = mcst.category_set_id
              AND mcst.LANGUAGE         = USERENV ('LANG')
              AND mic.category_id       = mc.category_id     
              AND msi.organization_id = mic.organization_id    
              AND msi.inventory_item_id = mic.inventory_item_id   
              AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%Cost of Sale%'||mc.segment1||'%')
              --AND UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) like UPPER('%'||mc.segment4||'%')
              AND gcc.end_date_active is null
        ) gl
  WHERE ss.SALESUMMARYID = ssp.SALESUMMARYID
        AND ssp.partnumber = gl.item_segment1(+)
        and ss.status_flag is null
          )
        GROUP BY SALESUMMARYID,
          LEDGER_ID,
          STATUS,
          SET_OF_BOOKS_ID,
          USER_JE_SOURCE_NAME,
          USER_JE_CATEGORY_NAME,
          ACCOUNTING_DATE,
          CURRENCY_CODE,
          DATE_CREATED,
          CREATED_BY,
          ACTUAL_FLAG,
          USER_CURRENCY_CONVERSION_TYPE,
          CURRENCY_CONVERSION_DATE,
          CURRENCY_CONVERSION_RATE,
          SEGMENT1,
          SEGMENT2,
          SEGMENT3,
          SEGMENT4,
          SEGMENT5,
          SEGMENT6,
          SEGMENT7,
          SEGMENT8,
          SEGMENT9,
          PERIOD_NAME,
          REFERENCE1,
          REFERENCE2,
          REFERENCE4,
          REFERENCE5
        )
        UNION ALL
            (SELECT SALESUMMARYID,
          LEDGER_ID,
          STATUS,
          SET_OF_BOOKS_ID,
          USER_JE_SOURCE_NAME,
          USER_JE_CATEGORY_NAME,
          ACCOUNTING_DATE,
          CURRENCY_CODE,
          DATE_CREATED,
          CREATED_BY,
          ACTUAL_FLAG,
          USER_CURRENCY_CONVERSION_TYPE,
          CURRENCY_CONVERSION_DATE,
          CURRENCY_CONVERSION_RATE,
          SEGMENT1,
          SEGMENT2,
          SEGMENT3,
          SEGMENT4,
          SEGMENT5,
          SEGMENT6,
          SEGMENT7,
          SEGMENT8,
          SEGMENT9,
          SUM(ENTERED_DR) ENTERED_DR,
          SUM(ENTERED_CR) ENTERED_CR,
          SUM(ACCOUNTED_DR) ACCOUNTED_DR,
          SUM(ACCOUNTED_CR) ACCOUNTED_CR,
          PERIOD_NAME,
          REFERENCE1,
          REFERENCE2,
          REFERENCE4,
          REFERENCE5
        FROM
          ( SELECT DISTINCT '0' SALESUMMARYID,
            2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
            'Y' STATUS,                         --  i.STATUS
            2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
            'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
            'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
            sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
            'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
            sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
            0 CREATED_BY,                       --  fnd_global.user_id
            'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
            --  i.ENCUMBRANCE_TYPE_ID       ,
            --  i.BUDGET_VERSION_ID         ,
            '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
            '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
            '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
            '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
            '09100' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
            '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
            gl.segment4 SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
            '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
            gl.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
            '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
            '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
            '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
            SSP.AVGCOSTEX * SSP.TOTALUNITS ENTERED_DR ,   --  i.ENTERED_DR
            0 ENTERED_CR ,   --  i.ENTERED_CR
            SSP.AVGCOSTEX * SSP.TOTALUNITS ACCOUNTED_DR , --  i.ACCOUNTED_DR
            0 ACCOUNTED_CR , --  i.ACCOUNTED_CR
            XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
            SYSDATE REFERENCE1 ,      --  i.REFERENCE1
            'Inventory Control Account' REFERENCE2,     --  i.REFERENCE2
            'INV CONTROL' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
            'Inventory Control Account' REFERENCE5 --  i.REFERENCE5
          FROM RETURNSSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ss ,
            RETURNSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ssp,
            (SELECT   distinct gcc.segment4
                     ,gcc.segment6
                     ,msi.segment1 item_segment1
                FROM  mtl_item_categories mic,
                      mtl_category_sets_tl mcst,
                      mtl_category_sets_b mcs,
                      mtl_categories_b_kfv mc,
                      mtl_system_items_b msi,
                      GL_CODE_COMBINATIONS gcc
                WHERE mic.category_set_id = mcs.category_set_id
                      AND mcs.category_set_id   = mcst.category_set_id
                      AND mcst.LANGUAGE         = USERENV ('LANG')
                      AND mic.category_id       = mc.category_id     
                      AND msi.organization_id = mic.organization_id    
                      AND msi.inventory_item_id = mic.inventory_item_id   
                      AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%'||mc.segment1||'%')
                      AND UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) like UPPER('%'||mc.segment4||'%')
                      AND gcc.end_date_active is null
              ) gl
                WHERE ss.SALESUMMARYID = ssp.SALESUMMARYID
                AND gl.item_segment1(+) = ssp.partnumber
                AND ss.status_flag is null
          )
        GROUP BY SALESUMMARYID,
          LEDGER_ID,
          STATUS,
          SET_OF_BOOKS_ID,
          USER_JE_SOURCE_NAME,
          USER_JE_CATEGORY_NAME,
          ACCOUNTING_DATE,
          CURRENCY_CODE,
          DATE_CREATED,
          CREATED_BY,
          ACTUAL_FLAG,
          USER_CURRENCY_CONVERSION_TYPE,
          CURRENCY_CONVERSION_DATE,
          CURRENCY_CONVERSION_RATE,
          SEGMENT1,
          SEGMENT2,
          SEGMENT3,
          SEGMENT4,
          SEGMENT5,
          SEGMENT6,
          SEGMENT7,
          SEGMENT8,
          SEGMENT9,
          PERIOD_NAME,
          REFERENCE1,
          REFERENCE2,
          REFERENCE4,
          REFERENCE5)
          UNION ALL
          (
          SELECT SALESUMMARYID,
          LEDGER_ID,
          STATUS,
          SET_OF_BOOKS_ID,
          USER_JE_SOURCE_NAME,
          USER_JE_CATEGORY_NAME,
          ACCOUNTING_DATE,
          CURRENCY_CODE,
          DATE_CREATED,
          CREATED_BY,
          ACTUAL_FLAG,
          USER_CURRENCY_CONVERSION_TYPE,
          CURRENCY_CONVERSION_DATE,
          CURRENCY_CONVERSION_RATE,
          SEGMENT1,
          SEGMENT2,
          SEGMENT3,
          SEGMENT4,
          SEGMENT5,
          SEGMENT6,
          SEGMENT7,
          SEGMENT8,
          SEGMENT9,
          SUM(ENTERED_DR) ENTERED_DR,
          SUM(ENTERED_CR) ENTERED_CR,
          SUM(ACCOUNTED_DR) ACCOUNTED_DR,
          SUM(ACCOUNTED_CR) ACCOUNTED_CR,
          PERIOD_NAME,
          REFERENCE1,
          REFERENCE2,
          REFERENCE4,
          REFERENCE5
        FROM
          ( SELECT DISTINCT '0' SALESUMMARYID,
            2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
            'Y' STATUS,                         --  i.STATUS
            2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
            'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
            'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
            sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
            'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
            sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
            0 CREATED_BY,                       --  fnd_global.user_id
            'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
            --  i.ENCUMBRANCE_TYPE_ID       ,
            --  i.BUDGET_VERSION_ID         ,
            '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
            '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
            '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
            '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
            '09100' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
            '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
            '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
            '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
            '219030' SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
            '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
            '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
            '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
            0 ENTERED_DR ,   --  i.ENTERED_DR
            SSP.TOTALVALUEEX + SSP.TOTALVALUETAX ENTERED_CR ,   --  i.ENTERED_CR
            0 ACCOUNTED_DR , --  i.ACCOUNTED_DR
            SSP.TOTALVALUEEX + SSP.TOTALVALUETAX ACCOUNTED_CR , --  i.ACCOUNTED_CR
            XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
            SYSDATE REFERENCE1 ,      --  i.REFERENCE1
            'Sales Control Account' REFERENCE2,     --  i.REFERENCE2
            'SALES CONTROL' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
            'Sales Control Account' REFERENCE5 --  i.REFERENCE5
          FROM RETURNSSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ss ,
            RETURNSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ssp
          WHERE ss.SALESUMMARYID = ssp.SALESUMMARYID
                and ss.status_flag is null
          )
        GROUP BY SALESUMMARYID,
          LEDGER_ID,
          STATUS,
          SET_OF_BOOKS_ID,
          USER_JE_SOURCE_NAME,
          USER_JE_CATEGORY_NAME,
          ACCOUNTING_DATE,
          CURRENCY_CODE,
          DATE_CREATED,
          CREATED_BY,
          ACTUAL_FLAG,
          USER_CURRENCY_CONVERSION_TYPE,
          CURRENCY_CONVERSION_DATE,
          CURRENCY_CONVERSION_RATE,
          SEGMENT1,
          SEGMENT2,
          SEGMENT3,
          SEGMENT4,
          SEGMENT5,
          SEGMENT6,
          SEGMENT7,
          SEGMENT8,
          SEGMENT9,
          PERIOD_NAME,
          REFERENCE1,
          REFERENCE2,
          REFERENCE4,
          REFERENCE5
          )
          ) glq
        WHERE 1 = 1
        )
        group by LEDGER_ID,
          STATUS,
          SET_OF_BOOKS_ID,
          USER_JE_SOURCE_NAME,
          USER_JE_CATEGORY_NAME,
          ACCOUNTING_DATE,
          CURRENCY_CODE,
          DATE_CREATED,
          CREATED_BY,
          ACTUAL_FLAG,
          USER_CURRENCY_CONVERSION_TYPE,
          CURRENCY_CONVERSION_DATE,
          CURRENCY_CONVERSION_RATE,
          SEGMENT1,
          SEGMENT2,
          SEGMENT3,
          SEGMENT4,
          SEGMENT5,
          SEGMENT6,
          SEGMENT7,
          SEGMENT8,
          SEGMENT9,
          PERIOD_NAME,
          REFERENCE1,
          REFERENCE2,
          REFERENCE4,
          REFERENCE5;


BEGIN

for cur_rec in cur
loop

INSERT INTO GL_INTERFACE (
                          LEDGER_ID                     ,
                          STATUS                        ,                                  
                          SET_OF_BOOKS_ID               ,        
                          USER_JE_SOURCE_NAME           ,        
                          USER_JE_CATEGORY_NAME         ,      
                          ACCOUNTING_DATE               ,      
                          CURRENCY_CODE                 ,      
                          DATE_CREATED                  ,      
                          CREATED_BY                    ,      
                          ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          USER_CURRENCY_CONVERSION_TYPE ,        
                          CURRENCY_CONVERSION_DATE      ,        
                          CURRENCY_CONVERSION_RATE      ,        
                          SEGMENT1                      ,        
                          SEGMENT2                      ,        
                          SEGMENT3                      ,        
                          SEGMENT4                      ,        
                          SEGMENT5                      ,        
                          SEGMENT6                      ,  
                          SEGMENT7                      ,
                          SEGMENT8                      ,
                          SEGMENT9                      ,      
                          ENTERED_DR                    ,        
                          ENTERED_CR                    ,        
                          ACCOUNTED_DR                  ,        
                          ACCOUNTED_CR                  ,        
                          PERIOD_NAME                   ,        
                          REFERENCE1                    ,        
                          REFERENCE2                    ,        
                          REFERENCE4                    ,   
                          REFERENCE5                              
                        )
                    values
                        ( 

                          cur_rec.LEDGER_ID                     ,
                          cur_rec.STATUS                        ,                                  
                          cur_rec.SET_OF_BOOKS_ID               ,        
                          cur_rec.USER_JE_SOURCE_NAME           ,        
                          cur_rec.USER_JE_CATEGORY_NAME         ,      
                          cur_rec.ACCOUNTING_DATE               ,      
                          cur_rec.CURRENCY_CODE                 ,      
                          cur_rec.DATE_CREATED                  ,      
                          cur_rec.CREATED_BY                    ,      
                          cur_rec.ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          cur_rec.USER_CURRENCY_CONVERSION_TYPE ,        
                          cur_rec.CURRENCY_CONVERSION_DATE      ,        
                          cur_rec.CURRENCY_CONVERSION_RATE      ,        

                         cur_rec.SEGMENT1                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02   
                         cur_rec.SEGMENT2                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01  
                         cur_rec.SEGMENT3                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01   
                         cur_rec.SEGMENT4                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05   
                         cur_rec.SEGMENT5                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00   
                         cur_rec.SEGMENT6                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00   
                         cur_rec.SEGMENT7                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01   
                         cur_rec.SEGMENT8                     , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100  
                         cur_rec.SEGMENT9                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00                          

                          cur_rec.ENTERED_DR                    ,        
                          cur_rec.ENTERED_CR                    ,        
                          cur_rec.ACCOUNTED_DR                  ,        
                          cur_rec.ACCOUNTED_CR                  ,        
                          cur_rec.PERIOD_NAME                   ,        
                          cur_rec.REFERENCE1                    ,        
                          cur_rec.REFERENCE2                    ,        
                          cur_rec.REFERENCE4                    ,   
                          cur_rec.REFERENCE5                   
                         );
 end loop;
 XXPBSA_REQ_JE_IMPORT('Manual');
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_JE_INTERFACE_SALES_SUM
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_JE_INTERFACE_SALES_SUM" 
IS

    l_segment4      varchar2(20);
    l_segment6      varchar2(20);
    l_code          varchar2(500);
    l_segment2      varchar2(20);
    l_batch_name    varchar2(100);



cursor cur
is
select LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
SUM(ENTERED_DR) ENTERED_DR,
  SUM(ENTERED_CR) ENTERED_CR,
  SUM(ACCOUNTED_DR) ACCOUNTED_DR,
  SUM(ACCOUNTED_CR) ACCOUNTED_CR,
    PERIOD_NAME,
  REFERENCE1,
  SYSDATE REFERENCE2,
  'TEST JOURNAL SALES' REFERENCE4,
  REFERENCE5
from
(
SELECT LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  ENTERED_DR,
  ENTERED_CR,
  ACCOUNTED_DR,
  ACCOUNTED_CR,
--(
--  CASE 
--  WHEN                 segment1
--                ||'.'||segment2
--                ||'.'||segment3
--                ||'.'||segment4
--                ||'.'||segment5
--                ||'.'||segment6
--                ||'.'||segment7
--                ||'.'||segment8
--                ||'.'||segment9 = XXPBSA_GET_GL_ACCOUNT('Lanka Sathosa Ltd.Head Office.Unspecified.Unspecified.Unspecified.Sales And Payment Control.Unspecified.Unspecified') THEN
--    ENTERED_DR
--  ELSE 0
--  END) ENTERED_DR ,
--(
--  CASE 
--  WHEN                 segment1
--                ||'.'||segment2
--                ||'.'||segment3
--                ||'.'||segment4
--                ||'.'||segment5
--                ||'.'||segment6
--                ||'.'||segment7
--                ||'.'||segment8
--                ||'.'||segment9 = XXPBSA_GET_GL_ACCOUNT('Lanka Sathosa Ltd.Head Office.Unspecified.Unspecified.Unspecified.Sales And Payment Control.Unspecified.Unspecified') THEN
--    0
--  ELSE ENTERED_CR
--  END) ENTERED_CR,
--(
--  CASE 
--  WHEN                 segment1
--                ||'.'||segment2
--                ||'.'||segment3
--                ||'.'||segment4
--                ||'.'||segment5
--                ||'.'||segment6
--                ||'.'||segment7
--                ||'.'||segment8
--                ||'.'||segment9 = XXPBSA_GET_GL_ACCOUNT('Lanka Sathosa Ltd.Head Office.Unspecified.Unspecified.Unspecified.Sales And Payment Control.Unspecified.Unspecified') THEN
--    ACCOUNTED_DR
--  ELSE 0
--  END) ACCOUNTED_DR,
--(
--  CASE 
--  WHEN                 segment1
--                ||'.'||segment2
--                ||'.'||segment3
--                ||'.'||segment4
--                ||'.'||segment5
--                ||'.'||segment6
--                ||'.'||segment7
--                ||'.'||segment8
--                ||'.'||segment9 = XXPBSA_GET_GL_ACCOUNT('Lanka Sathosa Ltd.Head Office.Unspecified.Unspecified.Unspecified.Sales And Payment Control.Unspecified.Unspecified') THEN
--    0
--  ELSE ACCOUNTED_CR
--  END) ACCOUNTED_CR,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5
FROM
  (
  (select SALESUMMARYID,
  LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  SUM(ENTERED_DR) ENTERED_DR,
  SUM(ENTERED_CR) ENTERED_CR,
  SUM(ACCOUNTED_DR) ACCOUNTED_DR,
  SUM(ACCOUNTED_CR) ACCOUNTED_CR,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5
  from
  (SELECT DISTINCT ss.SALESUMMARYID,
    2021 LEDGER_ID,     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE, --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,--ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,    --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,         --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,         --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    gl.segment4 SEGMENT4 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gl.segment6 SEGMENT6,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                    --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    0 ENTERED_DR ,        --  i.ENTERED_DR
    SSP.TOTALVALUEEX ENTERED_CR ,        --  i.ENTERED_CR
    0 ACCOUNTED_DR ,      --  i.ACCOUNTED_DR
    SSP.TOTALVALUEEX ACCOUNTED_CR ,      --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    SYSDATE REFERENCE1 ,                 --  i.REFERENCE1
    SSP.TITLE REFERENCE2,                --  i.REFERENCE2
    'SALES' REFERENCE4 ,                --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ssp.PARTNUMBER REFERENCE5            --  i.REFERENCE5
  FROM SALESSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ss ,
    SALESSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ssp,
    (SELECT distinct gcc.segment4
     , gcc.segment6
     ,msi.segment1 item_segment1
     ,mc.segment1
FROM  mtl_item_categories mic,
      mtl_category_sets_tl mcst,
      mtl_category_sets_b mcs,
      mtl_categories_b_kfv mc,
      mtl_system_items_b msi,
      GL_CODE_COMBINATIONS gcc
WHERE mic.category_set_id = mcs.category_set_id
      AND mcs.category_set_id   = mcst.category_set_id
      AND mcst.LANGUAGE         = USERENV ('LANG')
      AND mic.category_id       = mc.category_id     
      AND msi.organization_id = mic.organization_id    
      AND msi.inventory_item_id = mic.inventory_item_id
      --AND UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))) like '%Sales%'
      AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%'||mc.segment1||'%')
      --AND UPPER('%'||mc.segment4||'%') like (CASE WHEN mc.segment1 like '%GROCERY%' then UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) else mc.segment4 end)
      AND UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) = (CASE WHEN mc.segment1 like '%GROCERY%' then UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) else 'UNSPECIFIED' end)
      AND gcc.end_date_active is null
      ) gl
  WHERE ss.SALESUMMARYID = ssp.SALESUMMARYID
        AND gl.item_segment1(+) = ssp.partnumber
        AND ss.status_flag is null

  )
  group by SALESUMMARYID,
  LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5) 
  UNION ALL
  (SELECT SALESUMMARYID,
  LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  SUM(ENTERED_DR) ENTERED_DR,
  SUM(ENTERED_CR) ENTERED_CR,
  SUM(ACCOUNTED_DR) ACCOUNTED_DR,
  SUM(ACCOUNTED_CR) ACCOUNTED_CR,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5
FROM
  ( SELECT DISTINCT '0' SALESUMMARYID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    '210800' SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    0 ENTERED_DR ,   --  i.ENTERED_DR
    SSP.TOTALVALUETAX ENTERED_CR ,   --  i.ENTERED_CR
    0 ACCOUNTED_DR , --  i.ACCOUNTED_DR
    SSP.TOTALVALUETAX ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    SYSDATE REFERENCE1 ,      --  i.REFERENCE1
    'Tax Account' REFERENCE2,     --  i.REFERENCE2
    'TAX' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'Tax Account' REFERENCE5 --  i.REFERENCE5
  FROM SALESSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ss ,
    SALESSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ssp
  WHERE ss.SALESUMMARYID = ssp.SALESUMMARYID
        and ss.status_flag is null

  )
GROUP BY SALESUMMARYID,
  LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5)
UNION ALL
(
SELECT SALESUMMARYID,
  LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  SUM(ENTERED_DR) ENTERED_DR,
  SUM(ENTERED_CR) ENTERED_CR,
  SUM(ACCOUNTED_DR) ACCOUNTED_DR,
  SUM(ACCOUNTED_CR) ACCOUNTED_CR,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5
FROM
  ( SELECT DISTINCT '0' SALESUMMARYID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    gl.segment4 SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gl.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    ROUND(SSP.AVGCOSTEX * SSP.TOTALUNITS, 2) ENTERED_DR ,   --  i.ENTERED_DR
    0 ENTERED_CR ,   --  i.ENTERED_CR
    ROUND(SSP.AVGCOSTEX * SSP.TOTALUNITS, 2) ACCOUNTED_DR , --  i.ACCOUNTED_DR
    0 ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    SYSDATE REFERENCE1 ,      --  i.REFERENCE1
    'Cost Account' REFERENCE2,     --  i.REFERENCE2
    'COST' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'Cost Account' REFERENCE5 --  i.REFERENCE5
  FROM SALESSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ss ,
    SALESSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ssp,
    (
    SELECT   distinct gcc.segment4
             ,gcc.segment6
             ,msi.segment1 item_segment1
        FROM  mtl_item_categories mic,
              mtl_category_sets_tl mcst,
              mtl_category_sets_b mcs,
              mtl_categories_b_kfv mc,
              mtl_system_items_b msi,
              GL_CODE_COMBINATIONS gcc
        WHERE mic.category_set_id = mcs.category_set_id
              AND mcs.category_set_id   = mcst.category_set_id
              AND mcst.LANGUAGE         = USERENV ('LANG')
              AND mic.category_id       = mc.category_id     
              AND msi.organization_id = mic.organization_id    
              AND msi.inventory_item_id = mic.inventory_item_id   
              AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%Cost of Sale%'||mc.segment1||'%')
              --AND UPPER('%'||mc.segment4||'%') like (CASE WHEN mc.segment1 like '%GROCERY%' then UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) else mc.segment4 end)
              AND UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) = (CASE WHEN mc.segment1 like '%GROCERY%' then UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) else 'UNSPECIFIED' end)
              AND gcc.end_date_active is null
        ) gl
  WHERE ss.SALESUMMARYID = ssp.SALESUMMARYID
        AND ssp.partnumber = gl.item_segment1(+)
        and ss.status_flag is null

  )
GROUP BY SALESUMMARYID,
  LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5
)
UNION ALL
    (SELECT SALESUMMARYID,
  LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  SUM(ENTERED_DR) ENTERED_DR,
  SUM(ENTERED_CR) ENTERED_CR,
  SUM(ACCOUNTED_DR) ACCOUNTED_DR,
  SUM(ACCOUNTED_CR) ACCOUNTED_CR,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5
FROM
  ( SELECT DISTINCT '0' SALESUMMARYID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    gl.segment4 SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gl.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    0 ENTERED_DR ,   --  i.ENTERED_DR
    ROUND(SSP.AVGCOSTEX * SSP.TOTALUNITS, 2) ENTERED_CR ,   --  i.ENTERED_CR
    0 ACCOUNTED_DR , --  i.ACCOUNTED_DR
    ROUND(SSP.AVGCOSTEX * SSP.TOTALUNITS, 2) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    SYSDATE REFERENCE1 ,      --  i.REFERENCE1
    'Inventory Control Account' REFERENCE2,     --  i.REFERENCE2
    'INV CONTROL' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'Inventory Control Account' REFERENCE5 --  i.REFERENCE5
  FROM SALESSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ss ,
    SALESSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ssp,
    (SELECT   distinct gcc.segment4
             ,gcc.segment6
             ,msi.segment1 item_segment1
        FROM  mtl_item_categories mic,
              mtl_category_sets_tl mcst,
              mtl_category_sets_b mcs,
              mtl_categories_b_kfv mc,
              mtl_system_items_b msi,
              GL_CODE_COMBINATIONS gcc
        WHERE mic.category_set_id = mcs.category_set_id
              AND mcs.category_set_id   = mcst.category_set_id
              AND mcst.LANGUAGE         = USERENV ('LANG')
              AND mic.category_id       = mc.category_id     
              AND msi.organization_id = mic.organization_id    
              AND msi.inventory_item_id = mic.inventory_item_id   
              AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%Control%'||mc.segment1||'%')
              --AND UPPER('%'||mc.segment4||'%') like (CASE WHEN mc.segment1 like '%GROCERY%' then UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) else mc.segment4 end)
              AND UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) = (CASE WHEN mc.segment1 like '%GROCERY%' then UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) else 'UNSPECIFIED' end)
              AND gcc.end_date_active is null
      ) gl
        WHERE ss.SALESUMMARYID = ssp.SALESUMMARYID
        AND gl.item_segment1(+) = ssp.partnumber
        AND ss.status_flag is null

  )
GROUP BY SALESUMMARYID,
  LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5)
  UNION ALL
  (
  SELECT SALESUMMARYID,
  LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  SUM(ENTERED_DR) ENTERED_DR,
  SUM(ENTERED_CR) ENTERED_CR,
  SUM(ACCOUNTED_DR) ACCOUNTED_DR,
  SUM(ACCOUNTED_CR) ACCOUNTED_CR,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5
FROM
  ( SELECT DISTINCT '0' SALESUMMARYID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    '219030' SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    SSP.TOTALVALUEEX + SSP.TOTALVALUETAX ENTERED_DR ,   --  i.ENTERED_DR
    0 ENTERED_CR ,   --  i.ENTERED_CR
    SSP.TOTALVALUEEX + SSP.TOTALVALUETAX ACCOUNTED_DR , --  i.ACCOUNTED_DR
    0 ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    SYSDATE REFERENCE1 ,      --  i.REFERENCE1
    'Cash Control Account' REFERENCE2,     --  i.REFERENCE2
    'CASH CONTROL' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'Cash Control Account' REFERENCE5 --  i.REFERENCE5
  FROM SALESSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ss ,
    SALESSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ssp,
    (
    SELECT   distinct gcc.segment4
             ,gcc.segment6
             ,msi.segment1 item_segment1
        FROM  mtl_item_categories mic,
              mtl_category_sets_tl mcst,
              mtl_category_sets_b mcs,
              mtl_categories_b_kfv mc,
              mtl_system_items_b msi,
              GL_CODE_COMBINATIONS gcc
        WHERE mic.category_set_id = mcs.category_set_id
              AND mcs.category_set_id   = mcst.category_set_id
              AND mcst.LANGUAGE         = USERENV ('LANG')
              AND mic.category_id       = mc.category_id     
              AND msi.organization_id = mic.organization_id    
              AND msi.inventory_item_id = mic.inventory_item_id   
              AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%Cash Control%'||mc.segment1||'%')
              --AND UPPER('%'||mc.segment4||'%') like (CASE WHEN mc.segment1 like '%GROCERY%' then UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) else mc.segment4 end)
              AND UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) = (CASE WHEN mc.segment1 like '%GROCERY%' then UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) else 'UNSPECIFIED' end)
              AND gcc.end_date_active is null
    ) gl
  WHERE ss.SALESUMMARYID = ssp.SALESUMMARYID
        and ss.status_flag is null
        AND gl.item_segment1(+) = ssp.partnumber

  )
GROUP BY SALESUMMARYID,
  LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5
  )
  ) glq
WHERE 1 = 1
)
group by LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5;

    cursor outlet
    is
    SELECT ffv.flex_value, ffvt.description
    FROM   fnd_flex_values ffv
          ,fnd_flex_values_tl ffvt
    WHERE  ffv.flex_value_id = ffvt.flex_value_id
           AND ffv.flex_value_set_id = 1017028--need to change after the next setup
           AND ffv.flex_value = '11000'
           AND ffv.attribute2 is null;--need to change with the data from LSL mapped to SALESSUMMARY table new column

    cursor prod
    is
    SELECT distinct ssp.PARTNUMBER
    FROM SALESSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ss,
         SALESSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ssp
    WHERE 1 = 1
          AND ss.SALESUMMARYID = ssp.SALESUMMARYID
          AND ss.status_flag is null;

    cursor parts_gcc(p_parts varchar2)
    is
    SELECT ffv.flex_value
    FROM   fnd_flex_values ffv
          ,fnd_flex_values_tl ffvt
    WHERE  ffv.flex_value_id = ffvt.flex_value_id
    AND    ffv.flex_value_set_id = 1017032--need to change after the next setup
           and UPPER(ffvt.description) like 
           '%'||
           (SELECT distinct UPPER(mc.segment1)
            FROM  mtl_item_categories mic,
                  mtl_category_sets_tl mcst,
                  mtl_category_sets_b mcs,
                  mtl_categories_b_kfv mc,
                  mtl_system_items_b msi
            WHERE mic.category_set_id = mcs.category_set_id
                  AND mcs.category_set_id   = mcst.category_set_id
                  AND mcst.LANGUAGE         = USERENV ('LANG')
                  AND mic.category_id       = mc.category_id     
                  AND msi.organization_id = mic.organization_id    
                  AND msi.inventory_item_id = mic.inventory_item_id
                  AND msi.segment1 = p_parts)
            ||'%';

        cursor prod_gcc(p_prod varchar2)
        is
        SELECT ffv.flex_value
        FROM   fnd_flex_values ffv
              ,fnd_flex_values_tl ffvt
        WHERE  ffv.flex_value_id = ffvt.flex_value_id
        AND    ffv.flex_value_set_id = 1017030--need to change after the next setup
               and UPPER(ffvt.description) like 
               '%'||NVL(
               (SELECT distinct UPPER(mc.segment4)
                FROM  mtl_item_categories mic,
                      mtl_category_sets_tl mcst,
                      mtl_category_sets_b mcs,
                      mtl_categories_b_kfv mc,
                      mtl_system_items_b msi
                WHERE mic.category_set_id = mcs.category_set_id
                      AND mcs.category_set_id   = mcst.category_set_id
                      AND mcst.LANGUAGE         = USERENV ('LANG')
                      AND mic.category_id       = mc.category_id     
                      AND msi.organization_id = mic.organization_id    
                      AND msi.inventory_item_id = mic.inventory_item_id
                      AND msi.organization_id = 101
                      AND msi.segment1 = p_prod),'UNSPECIFIED')
                ||'%';

BEGIN

SELECT ffv.flex_value, ffvt.description
into l_segment2, l_batch_name
FROM   fnd_flex_values ffv
      ,fnd_flex_values_tl ffvt
WHERE  ffv.flex_value_id = ffvt.flex_value_id
       AND ffv.flex_value_set_id = 1017028
       AND ffv.flex_value = '11000'
       AND ffv.attribute2 is null;--store ID value based on IP of data sent to Oracle

for o in outlet
loop
    
    for cur_parts in prod
    loop
        for parts_cc in parts_gcc(cur_parts.PARTNUMBER)
        loop
            l_segment6 := parts_cc.flex_value;
        end loop;
    
        for prod_cc in prod_gcc(cur_parts.PARTNUMBER)
        loop
            l_segment4 := prod_cc.flex_value;
        end loop;
        
        select   '11'||'-'||o.flex_value||'-'||'00'||'-'||
                 l_segment4||'-'||'000'||'-'||l_segment6||'-'||
                 '00000'||'-'||'000'||'-'||'000'
        into l_code
        from dual;
        
        insert into XXPBSA_ACCOUNT_COMBINATIONS
        (select l_code from dual where l_code not in (select CONCATENATED_SEGMENTS from gl_code_combinations_kfv));
        COMMIT;
        
        XXPBSA_CREATE_GL_ACC_COMB;
        
    end loop;
end loop;

for cur_rec in cur
loop

INSERT INTO GL_INTERFACE (
                          LEDGER_ID                     ,
                          STATUS                        ,                                  
                          SET_OF_BOOKS_ID               ,        
                          USER_JE_SOURCE_NAME           ,        
                          USER_JE_CATEGORY_NAME         ,      
                          ACCOUNTING_DATE               ,      
                          CURRENCY_CODE                 ,      
                          DATE_CREATED                  ,      
                          CREATED_BY                    ,      
                          ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          USER_CURRENCY_CONVERSION_TYPE ,        
                          CURRENCY_CONVERSION_DATE      ,        
                          CURRENCY_CONVERSION_RATE      ,        
                          SEGMENT1                      ,        
                          SEGMENT2                      ,        
                          SEGMENT3                      ,        
                          SEGMENT4                      ,        
                          SEGMENT5                      ,        
                          SEGMENT6                      ,  
                          SEGMENT7                      ,
                          SEGMENT8                      ,
                          SEGMENT9                      ,      
                          ENTERED_DR                    ,        
                          ENTERED_CR                    ,        
                          ACCOUNTED_DR                  ,        
                          ACCOUNTED_CR                  ,        
                          PERIOD_NAME                   ,        
                          REFERENCE1                    ,        
                          REFERENCE2                    ,        
                          REFERENCE4                    ,   
                          REFERENCE5                              
                        )
                    values
                        ( 

                          cur_rec.LEDGER_ID                     ,
                          cur_rec.STATUS                        ,                                  
                          cur_rec.SET_OF_BOOKS_ID               ,        
                          cur_rec.USER_JE_SOURCE_NAME           ,        
                          cur_rec.USER_JE_CATEGORY_NAME         ,      
                          cur_rec.ACCOUNTING_DATE               ,      
                          cur_rec.CURRENCY_CODE                 ,      
                          cur_rec.DATE_CREATED                  ,      
                          cur_rec.CREATED_BY                    ,      
                          cur_rec.ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          cur_rec.USER_CURRENCY_CONVERSION_TYPE ,        
                          cur_rec.CURRENCY_CONVERSION_DATE      ,        
                          cur_rec.CURRENCY_CONVERSION_RATE      ,        

                         cur_rec.SEGMENT1                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02   
                         l_segment2                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01  
                         cur_rec.SEGMENT3                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01   
                         cur_rec.SEGMENT4                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05   
                         cur_rec.SEGMENT5                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00   
                         cur_rec.SEGMENT6                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00   
                         cur_rec.SEGMENT7                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01   
                         cur_rec.SEGMENT8                     , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100  
                         cur_rec.SEGMENT9                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00                          

                          cur_rec.ENTERED_DR                    ,        
                          cur_rec.ENTERED_CR                    ,        
                          cur_rec.ACCOUNTED_DR                  ,        
                          cur_rec.ACCOUNTED_CR                  ,        
                          cur_rec.PERIOD_NAME                   ,        
                          cur_rec.REFERENCE1                    ,        
                          l_batch_name||'-'||SYSDATE,--cur_rec.REFERENCE2                    ,        
                          cur_rec.REFERENCE4                    ,   
                          cur_rec.REFERENCE5                   
                         );

                         update SALESSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG
                         set status_flag = 'P'
                         where SALESUMMARYID in
                         ( select distinct ss.SALESUMMARYID 
                           FROM SALESSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ss ,
                                SALESSUMMARYPRODUCT@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ssp
                           WHERE ss.SALESUMMARYID = ssp.SALESUMMARYID
                                 and ssp.PARTNUMBER = cur_rec.REFERENCE5)
                                 and status_flag is null;
 end loop;
 XXPBSA_REQ_JE_IMPORT('Manual');
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_JE_INTERFACE_SUM_CREDIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_JE_INTERFACE_SUM_CREDIT" (errbuf OUT NOCOPY VARCHAR2, retcode OUT NOCOPY VARCHAR2) 
IS        
        cursor cur
        is
        SELECT LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  ENTERED_DR,
  ENTERED_CR,
  ACCOUNTED_DR,
  ACCOUNTED_CR,
  PERIOD_NAME,
  REFERENCE1,
  SYSDATE||'-'||'Outlet - Ampara' REFERENCE2,
  'TEST SALES CREDIT' REFERENCE4,
  REFERENCE5
FROM 
(
  (
  
  select TRANSACTIONID, LEDGER_ID, STATUS, SET_OF_BOOKS_ID, USER_JE_SOURCE_NAME, USER_JE_CATEGORY_NAME, ACCOUNTING_DATE, CURRENCY_CODE, DATE_CREATED, CREATED_BY, ACTUAL_FLAG, USER_CURRENCY_CONVERSION_TYPE, CURRENCY_CONVERSION_DATE, CURRENCY_CONVERSION_RATE, SEGMENT1, SEGMENT2, SEGMENT3, SEGMENT4, SEGMENT5, SEGMENT6, SEGMENT7, SEGMENT8, SEGMENT9, sum(ENTERED_DR) ENTERED_DR, sum(ENTERED_CR) ENTERED_CR, sum(ACCOUNTED_DR) ACCOUNTED_DR, sum(ACCOUNTED_CR) ACCOUNTED_CR, PERIOD_NAME, REFERENCE1, REFERENCE2, REFERENCE4, REFERENCE5
 from
 (
 SELECT DISTINCT ccd.TRANSACTIONID,
    2021 LEDGER_ID,     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE, --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,--ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,    --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,         --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,         --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                    --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    0 ENTERED_DR ,        --  i.ENTERED_DR
    ccd.DIFFERENCE ENTERED_CR ,        --  i.ENTERED_CR
    0 ACCOUNTED_DR ,      --  i.ACCOUNTED_DR
    ccd.DIFFERENCE ACCOUNTED_CR ,      --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    sysdate REFERENCE1 ,                 --  i.REFERENCE1
    sysdate REFERENCE2,                --  i.REFERENCE2
    'Debtor Account' REFERENCE4 ,                --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ccd.CREDITDATE REFERENCE5            --  i.REFERENCE5
  FROM CUSTOMERCREDITDIFFERENCE@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccd,
       gl_code_combinations gcc
  WHERE 1 = 1
        AND gcc.segment6 =        
                            (
                            SELECT ffv.flex_value
                            FROM   fnd_flex_values ffv
                                  ,fnd_flex_values_tl ffvt
                            WHERE  ffv.flex_value_id = ffvt.flex_value_id
                                   AND ffv.flex_value_set_id = 1017032
                                   AND upper(ffvt.description) like '%'||UPPER('Debtor')||'%'
                            )
    )
group by TRANSACTIONID, LEDGER_ID, STATUS, SET_OF_BOOKS_ID, USER_JE_SOURCE_NAME, USER_JE_CATEGORY_NAME, ACCOUNTING_DATE, CURRENCY_CODE, DATE_CREATED, CREATED_BY, ACTUAL_FLAG, USER_CURRENCY_CONVERSION_TYPE, CURRENCY_CONVERSION_DATE, CURRENCY_CONVERSION_RATE, SEGMENT1, SEGMENT2, SEGMENT3, SEGMENT4, SEGMENT5, SEGMENT6, SEGMENT7, SEGMENT8, SEGMENT9, PERIOD_NAME, REFERENCE1, REFERENCE2, REFERENCE4, REFERENCE5
  
  ) 
  
  )
WHERE 1 = 1;


BEGIN

for cur_rec in cur
loop

INSERT INTO GL_INTERFACE (
                          LEDGER_ID                     ,
                          STATUS                        ,                                  
                          SET_OF_BOOKS_ID               ,        
                          USER_JE_SOURCE_NAME           ,        
                          USER_JE_CATEGORY_NAME         ,      
                          ACCOUNTING_DATE               ,      
                          CURRENCY_CODE                 ,      
                          DATE_CREATED                  ,      
                          CREATED_BY                    ,      
                          ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          USER_CURRENCY_CONVERSION_TYPE ,        
                          CURRENCY_CONVERSION_DATE      ,        
                          CURRENCY_CONVERSION_RATE      ,        
                          SEGMENT1                      ,        
                          SEGMENT2                      ,        
                          SEGMENT3                      ,        
                          SEGMENT4                      ,        
                          SEGMENT5                      ,        
                          SEGMENT6                      ,  
                          SEGMENT7                      ,
                          SEGMENT8                      ,
                          SEGMENT9                      ,      
                          ENTERED_DR                    ,        
                          ENTERED_CR                    ,        
                          ACCOUNTED_DR                  ,        
                          ACCOUNTED_CR                  ,        
                          PERIOD_NAME                   ,        
                          REFERENCE1                    ,        
                          REFERENCE2                    ,        
                          REFERENCE4                    ,   
                          REFERENCE5                              
                        )
                    values
                        ( 

                          cur_rec.LEDGER_ID                     ,
                          cur_rec.STATUS                        ,                                  
                          cur_rec.SET_OF_BOOKS_ID               ,        
                          cur_rec.USER_JE_SOURCE_NAME           ,        
                          cur_rec.USER_JE_CATEGORY_NAME         ,      
                          cur_rec.ACCOUNTING_DATE               ,      
                          cur_rec.CURRENCY_CODE                 ,      
                          cur_rec.DATE_CREATED                  ,      
                          cur_rec.CREATED_BY                    ,      
                          cur_rec.ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          cur_rec.USER_CURRENCY_CONVERSION_TYPE ,        
                          cur_rec.CURRENCY_CONVERSION_DATE      ,        
                          cur_rec.CURRENCY_CONVERSION_RATE      ,        

                         cur_rec.SEGMENT1                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02   
                         cur_rec.SEGMENT2                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01  
                         cur_rec.SEGMENT3                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01   
                         cur_rec.SEGMENT4                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05   
                         cur_rec.SEGMENT5                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00   
                         cur_rec.SEGMENT6                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00   
                         cur_rec.SEGMENT7                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01   
                         cur_rec.SEGMENT8                     , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100  
                         cur_rec.SEGMENT9                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00                          

                          cur_rec.ENTERED_DR                    ,        
                          cur_rec.ENTERED_CR                    ,        
                          cur_rec.ACCOUNTED_DR                  ,        
                          cur_rec.ACCOUNTED_CR                  ,        
                          cur_rec.PERIOD_NAME                   ,        
                          cur_rec.REFERENCE1                    ,        
                          cur_rec.REFERENCE2                    ,        
                          cur_rec.REFERENCE4                    ,   
                          cur_rec.REFERENCE5                   
                         );
 end loop;
 XXPBSA_REQ_JE_IMPORT('Manual');
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_JE_INTERFACE_SUM_RETURN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_JE_INTERFACE_SUM_RETURN" (errbuf OUT NOCOPY VARCHAR2, retcode OUT NOCOPY VARCHAR2) 
IS        
cursor cur
is
select LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
SUM(ENTERED_DR) ENTERED_DR,
  SUM(ENTERED_CR) ENTERED_CR,
  SUM(ACCOUNTED_DR) ACCOUNTED_DR,
  SUM(ACCOUNTED_CR) ACCOUNTED_CR,
    PERIOD_NAME,
  REFERENCE1,
  SYSDATE||'-'||'Outlet - Ampara' REFERENCE2,
  'TEST RETURN JE' REFERENCE4,
  REFERENCE5
from
(
SELECT LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
--  ENTERED_DR,
--  ENTERED_CR,
--  ACCOUNTED_DR,
--  ACCOUNTED_CR,
(
  CASE 
  WHEN  REFERENCE2 like ('%'||'Cash'||'%')
     OR REFERENCE4 like UPPER('%'||'%Sales%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Card%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Bank%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%COGS%'||'%') 
     THEN
    0
  ELSE ENTERED_DR
  END) ENTERED_DR ,
(
  CASE 
    WHEN  REFERENCE2 like ('%'||'Cash'||'%')
     OR REFERENCE4 like UPPER('%'||'%Sales%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Card%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Bank%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%COGS%'||'%') 
     THEN
    ENTERED_CR
  ELSE 0
  END) ENTERED_CR,
(
  CASE 
    WHEN  REFERENCE2 like ('%'||'Cash'||'%')
     OR REFERENCE4 like UPPER('%'||'%Sales%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Card%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Bank%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%COGS%'||'%') 
     THEN
    0
  ELSE ACCOUNTED_DR
  END) ACCOUNTED_DR,
(
  CASE 
    WHEN  REFERENCE2 like ('%'||'Cash'||'%')
     OR REFERENCE4 like UPPER('%'||'%Sales%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Card%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Bank%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%COGS%'||'%') 
     THEN
    ACCOUNTED_CR
  ELSE 0
  END) ACCOUNTED_CR,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5
FROM
  (
  (
  
  SELECT DISTINCT 0 PAYMENTTYPESID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ENTERED_DR ,   --  i.ENTERED_DR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ENTERED_CR ,   --  i.ENTERED_CR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ACCOUNTED_DR , --  i.ACCOUNTED_DR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    ccs.CREDITCARDTYPE REFERENCE1 ,      --  i.REFERENCE1
    pts.PAYMENTTYPE REFERENCE2,     --  i.REFERENCE2
    'COGS' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ccs.REFERENCENUMBER REFERENCE5 --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
  WHERE 1 = 1
        and ps.TRANSACTIONID = ccs.TRANSACTIONID
        and ps.PAYMENTTYPESID = pts.PAYMENTTYPESID
        and ps.status_flag is null
        --and pts.PAYMENTTYPE like '%Credit%'
        AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%Cost%Sale%General%')
        AND gcc.end_date_active is null
  )
  UNION ALL
  (
  
  SELECT DISTINCT 0 PAYMENTTYPESID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ENTERED_DR ,   --  i.ENTERED_DR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ENTERED_CR ,   --  i.ENTERED_CR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ACCOUNTED_DR , --  i.ACCOUNTED_DR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    ccs.CREDITCARDTYPE REFERENCE1 ,      --  i.REFERENCE1
    pts.PAYMENTTYPE REFERENCE2,     --  i.REFERENCE2
    'INV CONTROL' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ccs.REFERENCENUMBER REFERENCE5 --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
  WHERE 1 = 1
        and ps.TRANSACTIONID = ccs.TRANSACTIONID
        and ps.PAYMENTTYPESID = pts.PAYMENTTYPESID
        and ps.status_flag is null
        --and pts.PAYMENTTYPE like '%Credit%'
        AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%Inv%Control%')
        AND gcc.end_date_active is null
  )
  UNION ALL
  (
  
  SELECT DISTINCT 0 PAYMENTTYPESID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    NVL(ccs.AMOUNT, 0) ENTERED_DR ,   --  i.ENTERED_DR
    NVL(ccs.AMOUNT, 0) ENTERED_CR ,   --  i.ENTERED_CR
    NVL(ccs.AMOUNT, 0) ACCOUNTED_DR , --  i.ACCOUNTED_DR
    NVL(ccs.AMOUNT, 0) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    ccs.CREDITCARDTYPE REFERENCE1 ,      --  i.REFERENCE1
    pts.PAYMENTTYPE REFERENCE2,     --  i.REFERENCE2
    'BANK CONTROL ACCOUNT' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ccs.REFERENCENUMBER REFERENCE5 --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
  WHERE 1 = 1
        and ps.TRANSACTIONID = ccs.TRANSACTIONID(+)
        and ps.PAYMENTTYPESID = pts.PAYMENTTYPESID
        and ps.status_flag is null
        and pts.PAYMENTTYPE like '%Credit%'
        AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%Control%BOC%')
        AND gcc.end_date_active is null
  )--needs to modify BANK CONTROL ACCOUNT
  UNION ALL
  (
  
  SELECT DISTINCT 0 PAYMENTTYPESID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    NVL(ccs.AMOUNT, 0) ENTERED_DR ,   --  i.ENTERED_DR
    NVL(ccs.AMOUNT, 0) ENTERED_CR ,   --  i.ENTERED_CR
    NVL(ccs.AMOUNT, 0) ACCOUNTED_DR , --  i.ACCOUNTED_DR
    NVL(ccs.AMOUNT, 0) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    ccs.CREDITCARDTYPE REFERENCE1 ,      --  i.REFERENCE1
    pts.PAYMENTTYPE REFERENCE2,     --  i.REFERENCE2
    'BANK ACCOUNT' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ccs.REFERENCENUMBER REFERENCE5 --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
  WHERE 1 = 1
        and ps.TRANSACTIONID = ccs.TRANSACTIONID(+)
        and pts.PAYMENTTYPESID = ps.PAYMENTTYPESID
        and ps.status_flag is null
        and pts.PAYMENTTYPE like '%Credit%'
        AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('BOC')
        AND gcc.end_date_active is null

    
  )
  UNION ALL
  (
  SELECT DISTINCT  0 PAYMENTTYPESID,
    2021 LEDGER_ID,     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE, --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,--ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,    --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,         --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,         --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                    --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    NVL(ccs.AMOUNT, 0) ENTERED_DR ,        --  i.ENTERED_DR
    NVL(ccs.AMOUNT, 0) ENTERED_CR ,        --  i.ENTERED_CR
    NVL(ccs.AMOUNT, 0) ACCOUNTED_DR ,      --  i.ACCOUNTED_DR
    NVL(ccs.AMOUNT, 0) ACCOUNTED_CR ,      --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    TO_CHAR(SYSDATE) REFERENCE1 ,                 --  i.REFERENCE1
    'Card' REFERENCE2,                --  i.REFERENCE2
    'CARD CONTROL' REFERENCE4 ,                --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'CARD Account' REFERENCE5            --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
      WHERE 1 = 1
            and ps.TRANSACTIONID = ccs.TRANSACTIONID
            and pts.PAYMENTTYPESID = ps.PAYMENTTYPESID
            and ps.status_flag is null
            AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%'||'%Card Control Ac%')
            --AND UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) like UPPER('%'||mc.segment6||'%')
            AND gcc.end_date_active is null
  )
  UNION ALL
  (
  
  SELECT DISTINCT  0 PAYMENTTYPESID,
    2021 LEDGER_ID,     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE, --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,--ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,    --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,         --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,         --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                    --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    NVL(pts.TOTALVALUE, 0) ENTERED_DR ,        --  i.ENTERED_DR
    NVL(pts.TOTALVALUE, 0) ENTERED_CR ,        --  i.ENTERED_CR
    NVL(pts.TOTALVALUE, 0) ACCOUNTED_DR ,      --  i.ACCOUNTED_DR
    NVL(pts.TOTALVALUE, 0) ACCOUNTED_CR ,      --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    TO_CHAR(SYSDATE) REFERENCE1 ,                 --  i.REFERENCE1
    'Sales' REFERENCE2,                --  i.REFERENCE2
    'SALES CONTROL' REFERENCE4 ,                --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'Sales Control Account' REFERENCE5            --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
      WHERE 1 = 1
            and ps.TRANSACTIONID = ccs.TRANSACTIONID(+)
            and pts.PAYMENTTYPESID = ps.PAYMENTTYPESID
            and ps.status_flag is null
            and pts.PAYMENTTYPE like '%Cash%'
            AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%'||'Sales And Payment Control%')
            --AND UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) like UPPER('%'||mc.segment6||'%')
            AND gcc.end_date_active is null
  
  )
  
  UNION ALL

  ( 
  SELECT DISTINCT 0 PAYMENTTYPESID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    pts.TOTALVALUE ENTERED_DR ,   --  i.ENTERED_DR
    pts.TOTALVALUE ENTERED_CR ,   --  i.ENTERED_CR
    pts.TOTALVALUE ACCOUNTED_DR , --  i.ACCOUNTED_DR
    pts.TOTALVALUE ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    ccs.CREDITCARDTYPE REFERENCE1 ,      --  i.REFERENCE1
    pts.PAYMENTTYPE REFERENCE2,     --  i.REFERENCE2
    pts.PAYMENTTYPE||' CONTROL' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ccs.REFERENCENUMBER REFERENCE5 --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
  WHERE 1 = 1
        and ps.TRANSACTIONID = ccs.TRANSACTIONID(+)
        and pts.PAYMENTTYPESID = ps.PAYMENTTYPESID
        and ps.status_flag is null
        AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%'||pts.PAYMENTTYPE||'%Control%')
        AND gcc.end_date_active is null
  )
  UNION ALL

  ( 
  SELECT DISTINCT 0 PAYMENTTYPESID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ENTERED_DR ,   --  i.ENTERED_DR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ENTERED_CR ,   --  i.ENTERED_CR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ACCOUNTED_DR , --  i.ACCOUNTED_DR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    ccs.CREDITCARDTYPE REFERENCE1 ,      --  i.REFERENCE1
    pts.PAYMENTTYPE REFERENCE2,     --  i.REFERENCE2
    'SALES ACCOUNT' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ccs.REFERENCENUMBER REFERENCE5 --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
  WHERE 1 = 1
        and ps.TRANSACTIONID = ccs.TRANSACTIONID
        and pts.PAYMENTTYPESID = ps.PAYMENTTYPESID
        and ps.status_flag is null
        AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%'||'%Sales%Payment%')
        AND gcc.end_date_active is null
  )
  
  )) glq
WHERE 1 = 1
group by LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5;

BEGIN

for cur_rec in cur
loop

INSERT INTO GL_INTERFACE (
                          LEDGER_ID                     ,
                          STATUS                        ,                                  
                          SET_OF_BOOKS_ID               ,        
                          USER_JE_SOURCE_NAME           ,        
                          USER_JE_CATEGORY_NAME         ,      
                          ACCOUNTING_DATE               ,      
                          CURRENCY_CODE                 ,      
                          DATE_CREATED                  ,      
                          CREATED_BY                    ,      
                          ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          USER_CURRENCY_CONVERSION_TYPE ,        
                          CURRENCY_CONVERSION_DATE      ,        
                          CURRENCY_CONVERSION_RATE      ,        
                          SEGMENT1                      ,        
                          SEGMENT2                      ,        
                          SEGMENT3                      ,        
                          SEGMENT4                      ,        
                          SEGMENT5                      ,        
                          SEGMENT6                      ,  
                          SEGMENT7                      ,
                          SEGMENT8                      ,
                          SEGMENT9                      ,      
                          ENTERED_DR                    ,        
                          ENTERED_CR                    ,        
                          ACCOUNTED_DR                  ,        
                          ACCOUNTED_CR                  ,        
                          PERIOD_NAME                   ,        
                          REFERENCE1                    ,        
                          REFERENCE2                    ,        
                          REFERENCE4                    ,   
                          REFERENCE5                              
                        )
                    values
                        ( 

                          cur_rec.LEDGER_ID                     ,
                          cur_rec.STATUS                        ,                                  
                          cur_rec.SET_OF_BOOKS_ID               ,        
                          cur_rec.USER_JE_SOURCE_NAME           ,        
                          cur_rec.USER_JE_CATEGORY_NAME         ,      
                          cur_rec.ACCOUNTING_DATE               ,      
                          cur_rec.CURRENCY_CODE                 ,      
                          cur_rec.DATE_CREATED                  ,      
                          cur_rec.CREATED_BY                    ,      
                          cur_rec.ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          cur_rec.USER_CURRENCY_CONVERSION_TYPE ,        
                          cur_rec.CURRENCY_CONVERSION_DATE      ,        
                          cur_rec.CURRENCY_CONVERSION_RATE      ,        

                         cur_rec.SEGMENT1                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02   
                         cur_rec.SEGMENT2                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01  
                         cur_rec.SEGMENT3                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01   
                         cur_rec.SEGMENT4                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05   
                         cur_rec.SEGMENT5                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00   
                         cur_rec.SEGMENT6                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00   
                         cur_rec.SEGMENT7                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01   
                         cur_rec.SEGMENT8                     , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100  
                         cur_rec.SEGMENT9                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00                          

                          cur_rec.ENTERED_DR                    ,        
                          cur_rec.ENTERED_CR                    ,        
                          cur_rec.ACCOUNTED_DR                  ,        
                          cur_rec.ACCOUNTED_CR                  ,        
                          cur_rec.PERIOD_NAME                   ,        
                          cur_rec.REFERENCE1                    ,        
                          cur_rec.REFERENCE2                    ,        
                          cur_rec.REFERENCE4                    ,   
                          cur_rec.REFERENCE5                   
                         );
 end loop;
 XXPBSA_REQ_JE_IMPORT('Manual');
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_JE_INTERFACE_SUM_TAKING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_JE_INTERFACE_SUM_TAKING" (errbuf OUT NOCOPY VARCHAR2, retcode OUT NOCOPY VARCHAR2) 
IS        
cursor cur
is
select LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
    SUM(ENTERED_DR) ENTERED_DR,
  SUM(ENTERED_CR) ENTERED_CR,
  SUM(ACCOUNTED_DR) ACCOUNTED_DR,
  SUM(ACCOUNTED_CR) ACCOUNTED_CR,
    PERIOD_NAME,
  REFERENCE1,
  SYSDATE||'-'||'Outlet - Ampara' REFERENCE2,
  'TEST PAYMENTS TAKING' REFERENCE4,
  REFERENCE5
from
(
SELECT LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
--  ENTERED_DR,
--  ENTERED_CR,
--  ACCOUNTED_DR,
--  ACCOUNTED_CR,
(
  CASE 
  WHEN  REFERENCE2 like ('%'||'Cash'||'%')
     OR REFERENCE4 like UPPER('%'||'%Sales%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Card%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Bank%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%COGS%'||'%') 
     THEN
    ENTERED_DR
  ELSE 0
  END) ENTERED_DR ,
(
  CASE 
    WHEN  REFERENCE2 like ('%'||'Cash'||'%')
     OR REFERENCE4 like UPPER('%'||'%Sales%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Card%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Bank%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%COGS%'||'%') 
     THEN
    0
  ELSE ENTERED_CR
  END) ENTERED_CR,
(
  CASE 
    WHEN  REFERENCE2 like ('%'||'Cash'||'%')
     OR REFERENCE4 like UPPER('%'||'%Sales%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Card%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Bank%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%COGS%'||'%') 
     THEN
    ACCOUNTED_DR
  ELSE 0
  END) ACCOUNTED_DR,
(
  CASE 
    WHEN  REFERENCE2 like ('%'||'Cash'||'%')
     OR REFERENCE4 like UPPER('%'||'%Sales%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Card%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%Bank%Control%'||'%') 
     OR REFERENCE4 like UPPER('%'||'%COGS%'||'%') 
     THEN
    0
  ELSE ACCOUNTED_CR
  END) ACCOUNTED_CR,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  'TEST PAYMENT TAKE' REFERENCE4,
  REFERENCE5
FROM
  (
  (
  
  SELECT DISTINCT 0 PAYMENTTYPESID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ENTERED_DR ,   --  i.ENTERED_DR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ENTERED_CR ,   --  i.ENTERED_CR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ACCOUNTED_DR , --  i.ACCOUNTED_DR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    ccs.CREDITCARDTYPE REFERENCE1 ,      --  i.REFERENCE1
    pts.PAYMENTTYPE REFERENCE2,     --  i.REFERENCE2
    'COGS' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ccs.REFERENCENUMBER REFERENCE5 --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
  WHERE 1 = 1
        and ps.TRANSACTIONID = ccs.TRANSACTIONID
        and ps.PAYMENTTYPESID = pts.PAYMENTTYPESID
        and ps.status_flag is null
        --and pts.PAYMENTTYPE like '%Credit%'
        AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%Cost%Sale%General%')
        AND gcc.end_date_active is null
  )
  UNION ALL
  (
  
  SELECT DISTINCT 0 PAYMENTTYPESID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ENTERED_DR ,   --  i.ENTERED_DR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ENTERED_CR ,   --  i.ENTERED_CR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ACCOUNTED_DR , --  i.ACCOUNTED_DR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    ccs.CREDITCARDTYPE REFERENCE1 ,      --  i.REFERENCE1
    pts.PAYMENTTYPE REFERENCE2,     --  i.REFERENCE2
    'INV CONTROL' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ccs.REFERENCENUMBER REFERENCE5 --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
  WHERE 1 = 1
        and ps.TRANSACTIONID = ccs.TRANSACTIONID
        and ps.PAYMENTTYPESID = pts.PAYMENTTYPESID
        and ps.status_flag is null
        --and pts.PAYMENTTYPE like '%Credit%'
        AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%Inv%Control%')
        AND gcc.end_date_active is null
  )
  UNION ALL
  (
  
  SELECT DISTINCT 0 PAYMENTTYPESID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    NVL(ccs.AMOUNT, 0) ENTERED_DR ,   --  i.ENTERED_DR
    NVL(ccs.AMOUNT, 0) ENTERED_CR ,   --  i.ENTERED_CR
    NVL(ccs.AMOUNT, 0) ACCOUNTED_DR , --  i.ACCOUNTED_DR
    NVL(ccs.AMOUNT, 0) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    ccs.CREDITCARDTYPE REFERENCE1 ,      --  i.REFERENCE1
    pts.PAYMENTTYPE REFERENCE2,     --  i.REFERENCE2
    'BANK CONTROL ACCOUNT' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ccs.REFERENCENUMBER REFERENCE5 --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
  WHERE 1 = 1
        and ps.TRANSACTIONID = ccs.TRANSACTIONID(+)
        and ps.PAYMENTTYPESID = pts.PAYMENTTYPESID
        and ps.status_flag is null
        and pts.PAYMENTTYPE like '%Credit%'
        AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%Control%BOC%')
        AND gcc.end_date_active is null
  )--needs to modify BANK CONTROL ACCOUNT
  UNION ALL
  (
  
  SELECT DISTINCT 0 PAYMENTTYPESID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    NVL(ccs.AMOUNT, 0) ENTERED_DR ,   --  i.ENTERED_DR
    NVL(ccs.AMOUNT, 0) ENTERED_CR ,   --  i.ENTERED_CR
    NVL(ccs.AMOUNT, 0) ACCOUNTED_DR , --  i.ACCOUNTED_DR
    NVL(ccs.AMOUNT, 0) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    ccs.CREDITCARDTYPE REFERENCE1 ,      --  i.REFERENCE1
    pts.PAYMENTTYPE REFERENCE2,     --  i.REFERENCE2
    'BANK ACCOUNT' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ccs.REFERENCENUMBER REFERENCE5 --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
  WHERE 1 = 1
        and ps.TRANSACTIONID = ccs.TRANSACTIONID(+)
        and pts.PAYMENTTYPESID = ps.PAYMENTTYPESID
        and ps.status_flag is null
        and pts.PAYMENTTYPE like '%Credit%'
        AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('BOC')
        AND gcc.end_date_active is null

    
  )
  UNION ALL
  (
  SELECT DISTINCT  0 PAYMENTTYPESID,
    2021 LEDGER_ID,     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE, --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,--ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,    --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,         --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,         --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                    --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    NVL(ccs.AMOUNT, 0) ENTERED_DR ,        --  i.ENTERED_DR
    NVL(ccs.AMOUNT, 0) ENTERED_CR ,        --  i.ENTERED_CR
    NVL(ccs.AMOUNT, 0) ACCOUNTED_DR ,      --  i.ACCOUNTED_DR
    NVL(ccs.AMOUNT, 0) ACCOUNTED_CR ,      --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    TO_CHAR(SYSDATE) REFERENCE1 ,                 --  i.REFERENCE1
    'Card' REFERENCE2,                --  i.REFERENCE2
    'CARD CONTROL' REFERENCE4 ,                --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'CARD Account' REFERENCE5            --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
      WHERE 1 = 1
            and ps.TRANSACTIONID = ccs.TRANSACTIONID
            and pts.PAYMENTTYPESID = ps.PAYMENTTYPESID
            and ps.status_flag is null
            AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%'||'%Card Control Ac%')
            --AND UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) like UPPER('%'||mc.segment6||'%')
            AND gcc.end_date_active is null
  )
  UNION ALL
  (
  
  SELECT DISTINCT  0 PAYMENTTYPESID,
    2021 LEDGER_ID,     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE, --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,--ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,    --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,         --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,         --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                    --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    NVL(pts.TOTALVALUE, 0) ENTERED_DR ,        --  i.ENTERED_DR
    NVL(pts.TOTALVALUE, 0) ENTERED_CR ,        --  i.ENTERED_CR
    NVL(pts.TOTALVALUE, 0) ACCOUNTED_DR ,      --  i.ACCOUNTED_DR
    NVL(pts.TOTALVALUE, 0) ACCOUNTED_CR ,      --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    TO_CHAR(SYSDATE) REFERENCE1 ,                 --  i.REFERENCE1
    'Sales' REFERENCE2,                --  i.REFERENCE2
    'SALES CONTROL' REFERENCE4 ,                --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'Sales Control Account' REFERENCE5            --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
      WHERE 1 = 1
            and ps.TRANSACTIONID = ccs.TRANSACTIONID(+)
            and pts.PAYMENTTYPESID = ps.PAYMENTTYPESID
            and ps.status_flag is null
            and pts.PAYMENTTYPE like '%Cash%'
            AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%'||'Sales And Payment Control%')
            --AND UPPER(DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,4,gcc.segment4))) like UPPER('%'||mc.segment6||'%')
            AND gcc.end_date_active is null
  
  )
  
  UNION ALL

  ( 
  SELECT DISTINCT 0 PAYMENTTYPESID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    pts.TOTALVALUE ENTERED_DR ,   --  i.ENTERED_DR
    pts.TOTALVALUE ENTERED_CR ,   --  i.ENTERED_CR
    pts.TOTALVALUE ACCOUNTED_DR , --  i.ACCOUNTED_DR
    pts.TOTALVALUE ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    ccs.CREDITCARDTYPE REFERENCE1 ,      --  i.REFERENCE1
    pts.PAYMENTTYPE REFERENCE2,     --  i.REFERENCE2
    pts.PAYMENTTYPE||' CONTROL' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ccs.REFERENCENUMBER REFERENCE5 --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
  WHERE 1 = 1
        and ps.TRANSACTIONID = ccs.TRANSACTIONID(+)
        and pts.PAYMENTTYPESID = ps.PAYMENTTYPESID
        and ps.status_flag is null
        AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%'||pts.PAYMENTTYPE||'%Control%')
        AND gcc.end_date_active is null
  )
  UNION ALL

  ( 
  SELECT DISTINCT 0 PAYMENTTYPESID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ENTERED_DR ,   --  i.ENTERED_DR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ENTERED_CR ,   --  i.ENTERED_CR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ACCOUNTED_DR , --  i.ACCOUNTED_DR
    pts.TOTALVALUE + NVL(ccs.AMOUNT, 0) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    ccs.CREDITCARDTYPE REFERENCE1 ,      --  i.REFERENCE1
    pts.PAYMENTTYPE REFERENCE2,     --  i.REFERENCE2
    'SALES ACCOUNT' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    ccs.REFERENCENUMBER REFERENCE5 --  i.REFERENCE5
  FROM CREDITCARDTRANSACTION@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ccs,
       PAYMENTSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG ps,
       PAYMENTTYPESUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG pts,
       GL_CODE_COMBINATIONS gcc
  WHERE 1 = 1
        and ps.TRANSACTIONID = ccs.TRANSACTIONID
        and pts.PAYMENTTYPESID = ps.PAYMENTTYPESID
        and ps.status_flag is null
        AND REPLACE(UPPER(DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql( gcc.chart_of_accounts_id,6,gcc.segment6))), 'SALES - LIQUOR', 'SALES - LIQUOR ' || q'[&]' || ' TOBACCO') like UPPER('%'||'%Sales%Payment%')
        AND gcc.end_date_active is null
  )
  
  )) glq
WHERE 1 = 1
group by LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  PERIOD_NAME,
  REFERENCE1,
  REFERENCE2,
  REFERENCE4,
  REFERENCE5;

BEGIN

for cur_rec in cur
loop

INSERT INTO GL_INTERFACE (
                          LEDGER_ID                     ,
                          STATUS                        ,                                  
                          SET_OF_BOOKS_ID               ,        
                          USER_JE_SOURCE_NAME           ,        
                          USER_JE_CATEGORY_NAME         ,      
                          ACCOUNTING_DATE               ,      
                          CURRENCY_CODE                 ,      
                          DATE_CREATED                  ,      
                          CREATED_BY                    ,      
                          ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          USER_CURRENCY_CONVERSION_TYPE ,        
                          CURRENCY_CONVERSION_DATE      ,        
                          CURRENCY_CONVERSION_RATE      ,        
                          SEGMENT1                      ,        
                          SEGMENT2                      ,        
                          SEGMENT3                      ,        
                          SEGMENT4                      ,        
                          SEGMENT5                      ,        
                          SEGMENT6                      ,  
                          SEGMENT7                      ,
                          SEGMENT8                      ,
                          SEGMENT9                      ,      
                          ENTERED_DR                    ,        
                          ENTERED_CR                    ,        
                          ACCOUNTED_DR                  ,        
                          ACCOUNTED_CR                  ,        
                          PERIOD_NAME                   ,        
                          REFERENCE1                    ,        
                          REFERENCE2                    ,        
                          REFERENCE4                    ,   
                          REFERENCE5                              
                        )
                    values
                        ( 

                          cur_rec.LEDGER_ID                     ,
                          cur_rec.STATUS                        ,                                  
                          cur_rec.SET_OF_BOOKS_ID               ,        
                          cur_rec.USER_JE_SOURCE_NAME           ,        
                          cur_rec.USER_JE_CATEGORY_NAME         ,      
                          cur_rec.ACCOUNTING_DATE               ,      
                          cur_rec.CURRENCY_CODE                 ,      
                          cur_rec.DATE_CREATED                  ,      
                          cur_rec.CREATED_BY                    ,      
                          cur_rec.ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          cur_rec.USER_CURRENCY_CONVERSION_TYPE ,        
                          cur_rec.CURRENCY_CONVERSION_DATE      ,        
                          cur_rec.CURRENCY_CONVERSION_RATE      ,        

                         cur_rec.SEGMENT1                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02   
                         cur_rec.SEGMENT2                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01  
                         cur_rec.SEGMENT3                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01   
                         cur_rec.SEGMENT4                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05   
                         cur_rec.SEGMENT5                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00   
                         cur_rec.SEGMENT6                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00   
                         cur_rec.SEGMENT7                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01   
                         cur_rec.SEGMENT8                     , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100  
                         cur_rec.SEGMENT9                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00                          

                          cur_rec.ENTERED_DR                    ,        
                          cur_rec.ENTERED_CR                    ,        
                          cur_rec.ACCOUNTED_DR                  ,        
                          cur_rec.ACCOUNTED_CR                  ,        
                          cur_rec.PERIOD_NAME                   ,        
                          cur_rec.REFERENCE1                    ,        
                          cur_rec.REFERENCE2                    ,        
                          cur_rec.REFERENCE4                    ,   
                          cur_rec.REFERENCE5                   
                         );
 end loop;
 XXPBSA_REQ_JE_IMPORT('Manual');
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_JE_INTERFACE_TILL_RECON
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_JE_INTERFACE_TILL_RECON" (errbuf OUT NOCOPY VARCHAR2, retcode OUT NOCOPY VARCHAR2) 
IS        
        cursor cur
        is
SELECT LEDGER_ID,
  STATUS,
  SET_OF_BOOKS_ID,
  USER_JE_SOURCE_NAME,
  USER_JE_CATEGORY_NAME,
  ACCOUNTING_DATE,
  CURRENCY_CODE,
  DATE_CREATED,
  CREATED_BY,
  ACTUAL_FLAG,
  USER_CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_RATE,
  SEGMENT1,
  SEGMENT2,
  SEGMENT3,
  SEGMENT4,
  SEGMENT5,
  SEGMENT6,
  SEGMENT7,
  SEGMENT8,
  SEGMENT9,
  ENTERED_DR,
  ENTERED_CR,
  ACCOUNTED_DR,
  ACCOUNTED_CR,
  PERIOD_NAME,
  REFERENCE1,
  SYSDATE||'-'||'Outlet - Ampara' REFERENCE2,
  'TEST TILL RECON' REFERENCE4,
  REFERENCE5
FROM
  (
  ( 
  
  select TILL_RECON_ID, LEDGER_ID, STATUS, SET_OF_BOOKS_ID, USER_JE_SOURCE_NAME, USER_JE_CATEGORY_NAME, ACCOUNTING_DATE, CURRENCY_CODE, DATE_CREATED, CREATED_BY, ACTUAL_FLAG, USER_CURRENCY_CONVERSION_TYPE, CURRENCY_CONVERSION_DATE, CURRENCY_CONVERSION_RATE, SEGMENT1, SEGMENT2, SEGMENT3, SEGMENT4, SEGMENT5, SEGMENT6, SEGMENT7, SEGMENT8, SEGMENT9, sum(ENTERED_DR) ENTERED_DR, sum(ENTERED_CR) ENTERED_CR, sum(ACCOUNTED_DR) ACCOUNTED_DR, sum(ACCOUNTED_CR) ACCOUNTED_CR, PERIOD_NAME, REFERENCE1, REFERENCE2, REFERENCE4, 'REFERENCE5' REFERENCE5
from
(
SELECT DISTINCT '0' TILL_RECON_ID,
    2021 LEDGER_ID,     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE, --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,--ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,    --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,         --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,         --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                       --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                    --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    to_number(BDL.DIFFERENCE) ENTERED_DR ,        --  i.ENTERED_DR
    0 ENTERED_CR ,        --  i.ENTERED_CR
    to_number(BDL.DIFFERENCE) ACCOUNTED_DR ,      --  i.ACCOUNTED_DR
    0 ACCOUNTED_CR ,      --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    TO_CHAR(SYSDATE) REFERENCE1 ,                 --  i.REFERENCE1
    'Bank Account' REFERENCE2,                --  i.REFERENCE2
    'Bank Account' REFERENCE4 ,                --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    'Bank Account' REFERENCE5            --  i.REFERENCE5
  FROM TILLRECONCILIATIONSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG bd ,
       TILLRECONCILIATIONSUMMARYLINE@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG bdl,
       gl_code_combinations gcc
  WHERE bd.PAYMENTTYPESDATE = bdl.PAYMENTTYPESDATE
        AND bd.PAYMENTTYPE = bdl.PAYMENTTYPE
        AND gcc.segment6 =        
                            (
                            SELECT ffv.flex_value
                            FROM   fnd_flex_values ffv
                                  ,fnd_flex_values_tl ffvt
                            WHERE  ffv.flex_value_id = ffvt.flex_value_id
                                   AND ffv.flex_value_set_id = 1017032
                                   AND ffvt.description like UPPER('BOC')
                            )
)
group by TILL_RECON_ID, LEDGER_ID, STATUS, SET_OF_BOOKS_ID, USER_JE_SOURCE_NAME, USER_JE_CATEGORY_NAME, ACCOUNTING_DATE, CURRENCY_CODE, DATE_CREATED, CREATED_BY, ACTUAL_FLAG, USER_CURRENCY_CONVERSION_TYPE, CURRENCY_CONVERSION_DATE, CURRENCY_CONVERSION_RATE, SEGMENT1, SEGMENT2, SEGMENT3, SEGMENT4, SEGMENT5, SEGMENT6, SEGMENT7, SEGMENT8, SEGMENT9, PERIOD_NAME, REFERENCE1, REFERENCE2, REFERENCE4, REFERENCE5

  ) 
  UNION ALL
  (
  
 
 SELECT DISTINCT '0' TILL_RECON_ID,
    2021 LEDGER_ID,                     --  SELECT * FROM GL_SETS_OF_BOOKS
    'Y' STATUS,                         --  i.STATUS
    2021 SET_OF_BOOKS_ID,               --  SELECT * FROM GL_SETS_OF_BOOKS      (Trading Companies SOB)
    'Manual' USER_JE_SOURCE_NAME,       --  SELECT * FROM GL_JE_SOURCES WHERE JE_SOURCE_NAME LIKE 'Manual'
    'Adjustment' USER_JE_CATEGORY_NAME, --  SELECT USER_JE_CATEGORY_NAME FROM GL_JE_CATEGORIES WHERE USER_JE_CATEGORY_NAME LIKE 'SSE%'
    sysdate ACCOUNTING_DATE,            --ss.SALES_DATE ACCOUNTING_DATE,      --  i.ACCOUNTING_DATE
    'LKR' CURRENCY_CODE,                --  i.CURRENCY_CODE
    sysdate DATE_CREATED,               --ss.SALES_DATE DATE_CREATED,         --  DATE_CREATED
    0 CREATED_BY,                       --  fnd_global.user_id
    'A' ACTUAL_FLAG,                    --  i.ACTUAL_FLAG    -- A  Actual , B ? Budget E ? Encumbrance
    --  i.ENCUMBRANCE_TYPE_ID       ,
    --  i.BUDGET_VERSION_ID         ,
    '' USER_CURRENCY_CONVERSION_TYPE,                   --  i.USER_CURRENCY_CONVERSION_TYPE
    '' CURRENCY_CONVERSION_DATE,                        --  i.CURRENCY_CONVERSION_DATE
    '' CURRENCY_CONVERSION_RATE,                        --  i.CURRENCY_CONVERSION_RATE
    '11' SEGMENT1,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02
    '11000' SEGMENT2 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01
    '00' SEGMENT3,                                      --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01
    '00000' SEGMENT4 ,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05
    '000' SEGMENT5,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00
    gcc.segment6 SEGMENT6,                                  --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00
    '00000' SEGMENT7,                                   --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01
    '000' SEGMENT8,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100
    '000' SEGMENT9,                                     --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00
    0 ENTERED_DR ,   --  i.ENTERED_DR
    to_number(BDL.DIFFERENCE) ENTERED_CR ,   --  i.ENTERED_CR
    0 ACCOUNTED_DR , --  i.ACCOUNTED_DR
    to_number(BDL.DIFFERENCE) ACCOUNTED_CR , --  i.ACCOUNTED_CR
    XXPBSA_GL_CURR_OPERIOD PERIOD_NAME , --  i.PERIOD_NAME     (PERIOD SHOULD BE OPEN )
    TO_CHAR(SYSDATE) REFERENCE1 ,      --  i.REFERENCE1
    'Control Account' REFERENCE2,     --  i.REFERENCE2
    'CONTROL' REFERENCE4 ,     --  i.REFERENCE4     ( REFERENCE4   it takes in JE NAME  )
    bd.PAYMENTTYPE REFERENCE5 --  i.REFERENCE5
  FROM TILLRECONCILIATIONSUMMARY@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG bd ,
       TILLRECONCILIATIONSUMMARYLINE@DATABASE_LINK_EBS_APEX.LANKASATHOSA.ORG bdl,
       gl_code_combinations gcc
  WHERE bd.PAYMENTTYPESDATE = bdl.PAYMENTTYPESDATE
        AND bd.PAYMENTTYPE = bdl.PAYMENTTYPE
        AND gcc.segment6 =
            (
            SELECT ffv.flex_value
            FROM   fnd_flex_values ffv
                  ,fnd_flex_values_tl ffvt
            WHERE  ffv.flex_value_id = ffvt.flex_value_id
                   AND ffv.flex_value_set_id = 1017032
                   AND upper(ffvt.description) like UPPER('Other Income')
                   AND SUMMARY_FLAG = 'N'
            )
    )
  
  
  ) glq
WHERE 1 = 1;

BEGIN

for cur_rec in cur
loop

INSERT INTO GL_INTERFACE (
                          LEDGER_ID                     ,
                          STATUS                        ,                                  
                          SET_OF_BOOKS_ID               ,        
                          USER_JE_SOURCE_NAME           ,        
                          USER_JE_CATEGORY_NAME         ,      
                          ACCOUNTING_DATE               ,      
                          CURRENCY_CODE                 ,      
                          DATE_CREATED                  ,      
                          CREATED_BY                    ,      
                          ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          USER_CURRENCY_CONVERSION_TYPE ,        
                          CURRENCY_CONVERSION_DATE      ,        
                          CURRENCY_CONVERSION_RATE      ,        
                          SEGMENT1                      ,        
                          SEGMENT2                      ,        
                          SEGMENT3                      ,        
                          SEGMENT4                      ,        
                          SEGMENT5                      ,        
                          SEGMENT6                      ,  
                          SEGMENT7                      ,
                          SEGMENT8                      ,
                          SEGMENT9                      ,      
                          ENTERED_DR                    ,        
                          ENTERED_CR                    ,        
                          ACCOUNTED_DR                  ,        
                          ACCOUNTED_CR                  ,        
                          PERIOD_NAME                   ,        
                          REFERENCE1                    ,        
                          REFERENCE2                    ,        
                          REFERENCE4                    ,   
                          REFERENCE5                              
                        )
                    values
                        ( 

                          cur_rec.LEDGER_ID                     ,
                          cur_rec.STATUS                        ,                                  
                          cur_rec.SET_OF_BOOKS_ID               ,        
                          cur_rec.USER_JE_SOURCE_NAME           ,        
                          cur_rec.USER_JE_CATEGORY_NAME         ,      
                          cur_rec.ACCOUNTING_DATE               ,      
                          cur_rec.CURRENCY_CODE                 ,      
                          cur_rec.DATE_CREATED                  ,      
                          cur_rec.CREATED_BY                    ,      
                          cur_rec.ACTUAL_FLAG                   ,      
                   --       ENCUMBRANCE_TYPE_ID         ,      
                   --       BUDGET_VERSION_ID           ,        
                          cur_rec.USER_CURRENCY_CONVERSION_TYPE ,        
                          cur_rec.CURRENCY_CONVERSION_DATE      ,        
                          cur_rec.CURRENCY_CONVERSION_RATE      ,        

                         cur_rec.SEGMENT1                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT1 = 02   
                         cur_rec.SEGMENT2                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT2 = 01  
                         cur_rec.SEGMENT3                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT3 = 01   
                         cur_rec.SEGMENT4                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT4 = 05   
                         cur_rec.SEGMENT5                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT5 = 00   
                         cur_rec.SEGMENT6                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT6 = 00   
                         cur_rec.SEGMENT7                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT7 = 01   
                         cur_rec.SEGMENT8                     , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT8 = 981100  
                         cur_rec.SEGMENT9                         , --  SELECT * FROM GL_CODE_COMBINATIONS_KFV WHERE SEGMENT9 = 00                          

                          cur_rec.ENTERED_DR                    ,        
                          cur_rec.ENTERED_CR                    ,        
                          cur_rec.ACCOUNTED_DR                  ,        
                          cur_rec.ACCOUNTED_CR                  ,        
                          cur_rec.PERIOD_NAME                   ,        
                          cur_rec.REFERENCE1                    ,        
                          cur_rec.REFERENCE2                    ,        
                          cur_rec.REFERENCE4                    ,   
                          cur_rec.REFERENCE5                   
                         );
 end loop;
 XXPBSA_REQ_JE_IMPORT('Manual');
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_MTL_TRANSACTION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_MTL_TRANSACTION" (p_item_id           IN   VARCHAR2,
                           p_organization_id   IN   NUMBER,
                           p_subinv            IN   VARCHAR2,
                           p_loc               IN   VARCHAR2,
                           p_lot_no            IN   VARCHAR2,
                           p_uom_code          IN   VARCHAR2,
                           p_quantity          IN   NUMBER,
                           p_transaction_type  IN   VARCHAR2,
                           p_trans_type_ref    IN   VARCHAR2,
                           p_primary_qty       IN   NUMBER,
                           x_return_status     OUT  VARCHAR2,
                           x_msg_count         OUT  NUMBER,
                           x_msg_data          OUT  VARCHAR2)
IS

l_transaction_id        NUMBER;
l_loc_id                        NUMBER;
l_trn_type_id           NUMBER;
l_segment1                      VARCHAR2(150);
l_segment2                      VARCHAR2(150);
l_segment3                      VARCHAR2(150);
l_segment4                      VARCHAR2(150);
l_segment5                      VARCHAR2(150);
l_segment6                      VARCHAR2(150);
l_segment7                      VARCHAR2(150);
l_segment8                      VARCHAR2(150);
l_segment9                      VARCHAR2(150);
l_segment10             VARCHAR2(150);
l_segment11              VARCHAR2(150);
l_expiration_date       DATE;
l_trans_count       NUMBER;
lc_result           NUMBER;
l_subinv_code mtl_item_locations_kfv.subinventory_code%type;
r_mtl_trns_rec mtl_transactions_interface%rowtype;
R_MTL_LOT_REC MTL_TRANSACTION_LOTS_INTERFACE%ROWTYPE;

G_L_TRANSACTION_ID  number;
G_L_LPN_ID          number:=0;

CURSOR cur_tns_rec
IS
SELECT mtt.*
FROM MTL_TRANSACTION_TYPES mtt
where MTT.TRANSACTION_TYPE_NAME = P_TRANSACTION_TYPE;
R_TNS_REC CUR_TNS_REC%ROWTYPE;
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
      x_return_status:= null;
      x_msg_data := null;

dbms_output.put_line('================================================================================');
      BEGIN
           SELECT mtl_material_transactions_s.NEXTVAL
           INTO   l_transaction_id
           FROM   DUAL;
      EXCEPTION WHEN OTHERS THEN
          l_transaction_id := NULL;
      END;
      OPEN  cur_tns_rec;
      FETCH cur_tns_rec INTO r_tns_rec;
      CLOSE cur_tns_rec;

      BEGIN


      --l_segment1:=01;
                 l_segment1:='11';
                 l_segment2:='09100';
                 l_segment3:='00';
                 l_segment4:='00000';
                 l_segment5:='000';
                 l_segment6:='212400';
                 l_segment7:='00000';
                 l_segment8:='000';
                 l_segment9:='000';
                 l_segment10:=null;
           /*SELECT gcc.segment1,
                 gcc.segment2,
                 gcc.segment3,
                 gcc.segment4,
                 gcc.segment5,
                 gcc.segment6,
                 gcc.segment7,
                 gcc.segment8,
                 gcc.segment9,
                 gcc.segment10
           INTO   l_segment11,
                 l_segment2,
                 l_segment3,
                 l_segment4,
                 l_segment5,
                 l_segment6,
                 l_segment7,
                 l_segment8,
                 l_segment9,
                 l_segment10
           FROM   gl_code_combinations_kfv gcck, gl_code_combinations gcc
           where  GCC.CODE_COMBINATION_ID= 19547
               AND    gcc.code_combination_id = gcck.code_combination_id;*/
          EXCEPTION WHEN OTHERS THEN
                   l_segment1 :=NULL;
                   l_segment2 :=NULL;
                   l_segment6 :=NULL;
                   l_segment3 :=NULL;
                   l_segment4 :=NULL;
                   l_segment5 :=NULL;
                   l_segment7 :=NULL;
                   l_segment8 :=NULL;
                   l_segment9 :=NULL;
                   l_segment10 :=NULL;
          END;

          BEGIN
              SELECT inventory_location_id,subinventory_code
              INTO   l_loc_id,l_subinv_code
              FROM   mtl_item_locations_kfv
              WHERE  concatenated_segments = p_loc
              AND    organization_id = p_organization_id;
          EXCEPTION WHEN OTHERS THEN
                    l_loc_id := NULL;
          END;

          dbms_output.put_line('p_loc: '||p_loc);
          dbms_output.put_line('l_loc_id: '||l_loc_id);

          dbms_output.put_line('Transaction_type: '||r_tns_rec.transaction_type_name);
          dbms_output.put_line('p_quantity: '||p_quantity);
          BEGIN
              r_mtl_trns_rec := NULL;
              g_l_transaction_id := NULL;
              r_mtl_trns_rec.transaction_uom             :=  p_uom_code;
              r_mtl_trns_rec.transaction_date            :=  SYSDATE;
              r_mtl_trns_rec.source_code                 :=  p_transaction_type;
              r_mtl_trns_rec.source_line_id              :=  l_transaction_id; -- 422170
              r_mtl_trns_rec.source_header_id            :=  l_transaction_id ;  -- 167091
              r_mtl_trns_rec.process_flag                :=  1;
              r_mtl_trns_rec.transaction_mode            :=  3;
              r_mtl_trns_rec.lock_flag                   :=  2;
              r_mtl_trns_rec.locator_id                  :=  l_loc_id;
              r_mtl_trns_rec.last_update_date            :=  SYSDATE;
              r_mtl_trns_rec.last_updated_by             :=  fnd_global.user_id;
              r_mtl_trns_rec.creation_date               :=  SYSDATE;
              r_mtl_trns_rec.created_by                  :=  fnd_global.user_id;
              r_mtl_trns_rec.inventory_item_id           :=  p_item_id;
              r_mtl_trns_rec.subinventory_code           :=  nvl(p_subinv,l_subinv_code);
              r_mtl_trns_rec.organization_id             :=  p_organization_id;
              r_mtl_trns_rec.transaction_quantity        :=  p_quantity;
              r_mtl_trns_rec.primary_quantity            :=  p_primary_qty;
              R_MTL_TRNS_REC.TRANSACTION_TYPE_ID         :=  R_TNS_REC.TRANSACTION_TYPE_ID;
              r_mtl_trns_rec.transaction_source_type_id  :=  r_tns_rec.transaction_source_type_id;
              r_mtl_trns_rec.transaction_action_id       :=  r_tns_rec.transaction_action_id;
              r_mtl_trns_rec.dst_segment1                :=  l_segment1;
              r_mtl_trns_rec.dst_segment2                :=  l_segment2;
              r_mtl_trns_rec.dst_segment3                :=  l_segment3;
              r_mtl_trns_rec.dst_segment4                :=  l_segment4;
              r_mtl_trns_rec.dst_segment5                :=  l_segment5;
              r_mtl_trns_rec.dst_segment6                :=  l_segment6;
              r_mtl_trns_rec.dst_segment7                :=  l_segment7;
              r_mtl_trns_rec.dst_segment8                :=  l_segment8;
              r_mtl_trns_rec.dst_segment9                :=  l_segment9;
              r_mtl_trns_rec.dst_segment10               :=  l_segment10;
              r_mtl_trns_rec.transaction_interface_id    :=  l_transaction_id;
              r_mtl_trns_rec.transaction_header_id       :=  l_transaction_id;
              r_mtl_trns_rec.transaction_reference       :=  p_trans_type_ref;
              IF g_l_lpn_id >0 THEN
                 r_mtl_trns_rec.transfer_lpn_id      := g_l_lpn_id;

                 dbms_output.put_line('g_l_lpn_id: '||g_l_lpn_id);
              END IF;

              -- Insert MTI for inv open transactions.
              insert into MTL_TRANSACTIONS_INTERFACE values R_MTL_TRNS_REC;
              dbms_output.put_line('Record inserted into mtl_transactions_interface with transaction_header_id: '||l_transaction_id);
              g_l_transaction_id := l_transaction_id;

              --dbms_output.put_line('Inserted a record'||l_transaction_id);
              x_return_status := fnd_api.g_ret_sts_success;
          EXCEPTION WHEN OTHERS THEN
                 fnd_file.put_line (fnd_file.output,'in exception ---- inserting data into  MTL_TRANSACTIONS_INTERFACE : '|| SQLERRM);
                 dbms_output.put_line('Error'||SQLERRM);
                 x_return_status := fnd_api.g_ret_sts_error;
                 x_msg_count := x_msg_count+1;
                 x_msg_data := 'Error While Inserting data to MTL_TRANSACTIONS_INTERFACE :'||SQLERRM;
          END;

  DBMS_OUTPUT.PUT_LINE('STEP1');
         IF x_return_status != fnd_api.g_ret_sts_error  THEN --Successful return of first insert
            IF p_lot_no IS NOT NULL THEN
               --Derive lot expiration date for the lot number
               BEGIN
                    SELECT expiration_date
                    INTO l_expiration_date
                    FROM MTL_LOT_NUMBERS
                    WHERE lot_number = p_lot_no
                    AND inventory_item_id = p_item_id
                    AND organization_id = p_organization_id;

               EXCEPTION WHEN OTHERS THEN
                 dbms_output.put_line('Exception in fetching lot expiration_date: '||sqlerrm);
                 l_expiration_date:= null;
                 DBMS_OUTPUT.PUT_LINE('STEP2');
               END;
DBMS_OUTPUT.PUT_LINE('STEP3');
               dbms_output.put_line('Expiration_date: '||l_expiration_date);
DBMS_OUTPUT.PUT_LINE('STEP3.1');
               BEGIN
               DBMS_OUTPUT.PUT_LINE('STEP4');
                    --Insert lot number interface if the item is lot controlled.
                    r_mtl_lot_rec := NULL;
                    g_l_transaction_id := l_transaction_id;
                    r_mtl_lot_rec.transaction_interface_id    := l_transaction_id;
                    r_mtl_lot_rec.source_code                 := p_transaction_type;
                    r_mtl_lot_rec.source_line_id              := l_transaction_id;
                    r_mtl_lot_rec.last_update_date            := SYSDATE;
                    r_mtl_lot_rec.last_updated_by             := FND_GLOBAL.USER_ID;
                    r_mtl_lot_rec.creation_date               := SYSDATE;
                    r_mtl_lot_rec.created_by                  := FND_GLOBAL.USER_ID;
                    r_mtl_lot_rec.last_update_login           := FND_GLOBAL.LOGIN_ID ;
                    r_mtl_lot_rec.lot_number                  := p_lot_no;
                    r_mtl_lot_rec.lot_expiration_date         := l_expiration_date;
                    r_mtl_lot_rec.transaction_quantity        := p_quantity   ;
                    r_mtl_lot_rec.primary_quantity            := p_quantity;
                    r_mtl_lot_rec.serial_transaction_temp_id  := l_transaction_id  ;
DBMS_OUTPUT.PUT_LINE('STEP5');
                    INSERT INTO  MTL_TRANSACTION_LOTS_INTERFACE VALUES r_mtl_lot_rec;
                    DBMS_OUTPUT.PUT_LINE('STEP6');
               EXCEPTION WHEN OTHERS THEN
                   x_return_status := fnd_api.g_ret_sts_error;
                   x_msg_count := x_msg_count+1;
                   x_msg_data := 'Error While Inserting data to MTL_TRANSACTION_LOTS_INTERFACE :'||SQLERRM;
                   DBMS_OUTPUT.PUT_LINE('STEP7');
               END;
            END IF;
DBMS_OUTPUT.PUT_LINE('STEP8');
            COMMIT;
            --call Inventory open transaction api to perform transfer of material from source locator to destination locator.
            DBMS_OUTPUT.PUT_LINE('STEP9');
            x_return_status := null;
            x_msg_count := 0;
            X_MSG_DATA := null;
            dbms_output.put_line('Before Calling process_transactions'||l_transaction_id);
            lc_result := inv_txn_manager_pub.process_transactions
                                                 (p_api_version           => 1.0,
                                                  p_init_msg_list         => fnd_api.g_false,
                                                  p_commit                => fnd_api.g_true,
                                                  p_validation_level      => fnd_api.g_valid_level_full,
                                                  x_return_status         => x_return_status,
                                                  x_msg_count             => x_msg_count,
                                                  x_msg_data              => x_msg_data,
                                                  x_trans_count           => l_trans_count,
                                                  p_table                 => 1,
                                                  P_HEADER_ID             => L_TRANSACTION_ID
                                                 );
                                                 DBMS_OUTPUT.PUT_LINE('STEP10');
            dbms_output.put_line('Return Status'||x_return_status);
            IF NVL(x_return_status,'N') <> FND_API.g_ret_sts_success THEN
               x_return_status := FND_API.g_ret_sts_error;
               dbms_output.put_line('Return Status: '||x_return_status);
               dbms_output.put_line('Message: '||x_msg_data);
               DBMS_OUTPUT.PUT_LINE('STEP11');
            END IF;
         END IF;
         COMMIT;
      EXCEPTION WHEN OTHERS THEN
                dbms_output.put_line('In Exception'||sqlerrm);
                fnd_msg_pub.count_and_get (p_count        => x_msg_count,
                                           p_data         => x_msg_data,
                                           p_encoded      =>
                                          fnd_api.g_false
                                          );
                                          DBMS_OUTPUT.PUT_LINE('STEP12');
                 ROLLBACK;



end XXPBSA_MTL_TRANSACTION;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_PO_APPROVAL_REQ
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_PO_APPROVAL_REQ" (errbuf OUT NOCOPY VARCHAR2, retcode OUT NOCOPY VARCHAR2)
AS 

            cursor c1
            is
            SELECT distinct pha_outer.SEGMENT1
            FROM   PURCHASE_REQUESTS_LINES@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK pl_outer
                  ,PURCHASE_REQUESTS_HEADER@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ph_outer
                  ,PO_HEADERS_ALL pha_outer
                  ,PO_LINES_ALL pla_outer
                  ,PO_DISTRIBUTIONS_ALL PDA_outer
                  ,PO_REQ_DISTRIBUTIONS_ALL PRDA_outer
                  ,PO_REQUISITION_LINES_ALL PRLA_outer
                  ,PO_REQUISITION_HEADERS_ALL PRHA_outer
            WHERE  1 = 1
                   AND ph_outer.PurchaseRequestId = pl_outer.PurchaseRequestId
                   and NVL(PRHA_outer.INTERFACE_SOURCE_CODE, 0) = NVL(pl_outer.PurchaseOrderId, ph_outer.PurchaseRequestId)
                   AND PDA_outer.REQ_DISTRIBUTION_ID = PRDA_outer.DISTRIBUTION_ID
                   AND PRDA_outer.REQUISITION_LINE_ID = PRLA_outer.REQUISITION_LINE_ID
                   AND PRLA_outer.REQUISITION_HEADER_ID = PRHA_outer.REQUISITION_HEADER_ID
                   AND pda_outer.po_line_id = pla_outer.po_line_id
                   AND PDA_outer.REQ_DISTRIBUTION_ID = PRDA_outer.DISTRIBUTION_ID
                   AND pha_outer.po_header_id = pla_outer.po_header_id
                   AND pha_outer.attribute13 is null
                   AND pha_outer.authorization_status = 'APPROVED';
                   
  cursor c2
    is
    select *
    from (
    select aps.vendor_id, apsa.vendor_site_id
    from ap_suppliers aps
        ,ap_supplier_sites_all apsa
    where 1 = 1
          AND aps.vendor_id = apsa.vendor_id
          and aps.attribute11 is null
    order by aps.last_update_date desc, apsa.last_update_date desc
    )
    where rownum = 1
    ;
    
    l_response      varchar2(100);

BEGIN
    
    for cur_rec in c1
    loop

        XXPBSA_HO_EXECUTE_IMPORT_PRC('purchase-orders', cur_rec.SEGMENT1, NULL, l_response);
        
        update PO_HEADERS_ALL
        set attribute13 = 'Approval Sent'
        where segment1 = cur_rec.SEGMENT1;
  
    end loop;

    for cur_rec2 in c2
    loop
    
        XXPBSA_HO_EXECUTE_IMPORT_PRC@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK('suppliers', cur_rec2.vendor_id, cur_rec2.vendor_site_id, l_response);
        
        update ap_suppliers
        set attribute10 = l_response
        where vendor_id = cur_rec2.vendor_id;
        
        update ap_suppliers
        set attribute11 = 'SENT'
        where vendor_id = cur_rec2.vendor_id;
        
        COMMIT;
    
    end loop;
    
    
END XXPBSA_PO_APPROVAL_REQ;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_PROCESS_ITEMS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_PROCESS_ITEMS" (
         p_Transaction_Type     varchar2,
         p_Segment1             varchar2,
         p_Description          varchar2,
         p_Organization_Code    varchar2,
         p_template_name        varchar2,
         p_attribute10          varchar2,
         p_attribute11          varchar2,
         p_attribute12          varchar2,
         p_attribute13          varchar2,
         p_attribute14          varchar2,
         p_attribute15          varchar2,
         p_attribute16          varchar2,
         p_attribute17          varchar2,
         p_attribute18          varchar2,
         p_attribute19          varchar2,
         p_attribute20          varchar2
)
AS
        x_item_tbl		     EGO_ITEM_PUB.ITEM_TBL_TYPE;     
        x_message_list       Error_Handler.Error_Tbl_Type;
        x_return_status		 VARCHAR2(2);
        x_msg_count		     NUMBER := 0;

        l_user_id		      NUMBER := -1;
        l_resp_id		      NUMBER := -1;
        l_application_id	NUMBER := -1;

        l_rowcnt		      NUMBER := 1;
        l_api_version		   NUMBER := 1.0; 
        l_init_msg_list		 VARCHAR2(2) := FND_API.G_TRUE; 
        l_commit	      	 VARCHAR2(2) := FND_API.G_FALSE; 
        l_item_tbl		     EGO_ITEM_PUB.ITEM_TBL_TYPE; 
        l_role_grant_tbl	 EGO_ITEM_PUB.ROLE_GRANT_TBL_TYPE; 
        l_user_name		VARCHAR2(30) := 'SJAYASINGHE1';
        l_resp_name		VARCHAR2(30) := 'Inventory';    

        l_item_catalog_group_id NUMBER := 0;

  x_msg_data              Error_Handler.Error_Tbl_Type;
  x_status                varchar2(2);
  x_msg                   varchar2(20000);

BEGIN

          dbms_output.put_line('1');

          -- Get the user_id
          SELECT user_id
          INTO l_user_id
          FROM fnd_user
          WHERE user_name = l_user_name;
dbms_output.put_line('1');
          -- Get the application_id and responsibility_id
          SELECT application_id, responsibility_id
          INTO l_application_id, l_resp_id
          FROM fnd_responsibility_tl
          WHERE responsibility_name = l_resp_name;
dbms_output.put_line('1');
          FND_GLOBAL.APPS_INITIALIZE(l_user_id, l_resp_id, l_application_id);  
          dbms_output.put_line('Initialized applications context: '|| l_user_id || ' '|| l_resp_id ||' '|| l_application_id );

          -- Load the item catalog group id
--          SELECT item_catalog_group_id 
--          INTO l_item_catalog_group_id
--          FROM mtl_item_catalog_groups_b 
--          WHERE segment1 = 'SU_CATALOG';  -- Item Catalog Category Name

        -- Load l_item_tbl with the data
         l_item_tbl(l_rowcnt).Transaction_Type            := p_Transaction_Type; 
         l_item_tbl(l_rowcnt).Segment1                    := p_Segment1;            -- Item Number
         l_item_tbl(l_rowcnt).Description                 := p_Description;            -- Item Description
         l_item_tbl(l_rowcnt).Organization_Code           := p_Organization_Code;                     -- Organization Code
 --        l_item_tbl(l_rowcnt).Template_Name               := 'Finished Good';          -- Item template  (** should be associated to ICC, Not mandatory) 
         l_item_tbl(l_rowcnt).Inventory_Item_Status_Code  := 'Active';                 -- Item Status
         l_item_tbl(l_rowcnt).template_name               := p_template_name;  -- Item Catalog Group ID
         l_item_tbl(l_rowcnt).attribute10                 := p_attribute10;
         
         l_item_tbl(l_rowcnt).attribute11                 := p_attribute11;
         l_item_tbl(l_rowcnt).attribute12                 := p_attribute12;
         l_item_tbl(l_rowcnt).attribute13                 := p_attribute13;
         l_item_tbl(l_rowcnt).attribute14                 := p_attribute14;
         l_item_tbl(l_rowcnt).attribute15                 := p_attribute15;
         l_item_tbl(l_rowcnt).attribute16                 := p_attribute16;
         l_item_tbl(l_rowcnt).attribute17                 := p_attribute17;
         l_item_tbl(l_rowcnt).attribute18                 := p_attribute18;
         l_item_tbl(l_rowcnt).attribute19                 := p_attribute19;
         l_item_tbl(l_rowcnt).attribute20                 := p_attribute20;


          -- call API to load Items
         DBMS_OUTPUT.PUT_LINE('=====================================');
         DBMS_OUTPUT.PUT_LINE('Calling EGO_ITEM_PUB.Process_Items API');        
         EGO_ITEM_PUB.PROCESS_ITEMS( 
                                    p_api_version           => l_api_version
                                   ,p_init_msg_list         => l_init_msg_list
                                   ,p_commit                => l_commit
                                   ,p_item_tbl              => l_item_tbl
                                   ,p_role_grant_tbl        => l_role_grant_tbl
                                   ,x_item_tbl              => x_item_tbl
                                   ,x_return_status         => x_return_status
                                   ,x_msg_count             => x_msg_count);

         DBMS_OUTPUT.PUT_LINE('=====================================');
         DBMS_OUTPUT.PUT_LINE('Return Status: '||x_return_status);

       IF (x_return_status = FND_API.G_RET_STS_SUCCESS) THEN
          FOR i IN 1..x_item_tbl.COUNT LOOP
             DBMS_OUTPUT.PUT_LINE('Inventory Item Id :'||to_char(x_item_tbl(i).inventory_item_id));
             DBMS_OUTPUT.PUT_LINE('Organization Id   :'||to_char(x_item_tbl(i).organization_id));

--             SELECT category_set_id INTO l_category_set_id FROM mtl_category_sets 
--             WHERE category_set_name = p_category_set_name;  -- 'Product Family'
--        
--             SELECT category_id INTO l_category_id FROM mtl_categories_b 
--             WHERE segment1||'.'||segment2||'.'||segment3||'.'||segment4 = p_category_name; -- 'Consumer Goods' 

             --XXPBSA_AssignItmToCat(p_Segment1, p_category_set_name, p_category_name);

          END LOOP;
       ELSE
          DBMS_OUTPUT.PUT_LINE('Error Messages :');
          Error_Handler.GET_MESSAGE_LIST(x_message_list=>x_message_list);
          FOR i IN 1..x_message_list.COUNT LOOP
             DBMS_OUTPUT.PUT_LINE(x_message_list(i).message_text);
          END LOOP;
       END IF;
       DBMS_OUTPUT.PUT_LINE('=====================================');       
   DBMS_OUTPUT.PUT_LINE('==========================================='); 
DBMS_OUTPUT.PUT_LINE('Calling EGO_ITEM_PUB.Assign_Item_To_Org API');                      
      DBMS_OUTPUT.put_line ('Organization Id   : ' ||x_item_tbl(l_rowcnt).inventory_item_id);
      DBMS_OUTPUT.put_line ('Inventory Item Id : ' ||x_item_tbl(l_rowcnt).inventory_item_id);
     EGO_ITEM_PUB.ASSIGN_ITEM_TO_ORG(p_api_version       => 1.0,
                                     p_init_msg_list     => fnd_api.g_true,
                                     p_commit            => fnd_api.g_true,
                                     p_inventory_item_id => x_item_tbl(l_rowcnt).inventory_item_id,
                                     p_item_number       => null,
                                     p_organization_id   => 102,
                                     p_organization_code => NULL,
                                     --p_primary_uom_code  => x_item_tbl(l_rowcnt).primary_uom,
                                     x_return_status     => x_status,
                                     x_msg_count         => x_msg_count);

DBMS_OUTPUT.PUT_LINE('Return Status: '||x_status);
  IF (x_status <> FND_API.G_RET_STS_SUCCESS) THEN  
     -- Set the process code and error messages to the table.
     DBMS_OUTPUT.PUT_LINE('Error Messages :'); 
     Error_Handler.GET_MESSAGE_LIST(x_message_list => x_msg_data); 

     FOR i IN 1..x_msg_data.COUNT LOOP  
       DBMS_OUTPUT.PUT_LINE(x_msg_data(i).message_text);
       IF x_msg IS NULL THEN
         x_msg := x_msg_data(i).message_text;
       ELSE
         x_msg := x_msg ||'; '|| x_msg_data(i).message_text;
       END IF;
     END LOOP; 

  END IF;
  DBMS_OUTPUT.PUT_LINE('=========================================');                                    
     COMMIT;    
--XXPBSA_AssignItmToCat(p_segment1 => p_Segment1, p_category_set_name =>'Inventory' , p_category_name => p_attribute11);
--XXPBSA_AssignItmToCat('ABC1234567891235', 'Inventory', 'GROCERY.Cold Chain.Frozen Food.Frozen Fish');
EXCEPTION
        WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('Exception Occured :');
          DBMS_OUTPUT.PUT_LINE(SQLCODE ||':'||SQLERRM);
          DBMS_OUTPUT.PUT_LINE('=====================================');
        RAISE;
END XXPBSA_PROCESS_ITEMS;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_PRPO_CREATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_PRPO_CREATION" (errbuf VARCHAR2, retcode NUMBER)
as
      l_po_number                        VARCHAR2(10);
      l_po_header_id                     NUMBER;
      l_error_msg                        VARCHAR2(2000);
      l_errbuf                           VARCHAR2(1000);
      l_retcode                          NUMBER;  
      v_pr_number                        VARCHAR2(10);
      v_pr_header_id                     NUMBER;

      cursor cur is
      select distinct BATCH_ID
      from xx_req_po_stg
      where ERROR_FLAG is null
            and batch_id != 0;
begin

       for cur_rec in cur
          loop
            req_po_load_pkg.MAIN(
               l_errbuf
              ,l_retcode
              ,cur_rec.BATCH_ID
              ,cur_rec.BATCH_ID
              );

      select distinct REQUISITION_HEADER_ID
           , SEGMENT1
      into v_pr_header_id
          ,v_pr_number
      from PO_REQUISITION_HEADERS_ALL
      where 1 = 1
            and INTERFACE_SOURCE_CODE = TO_CHAR(cur_rec.BATCH_ID)
            and rownum = 1
      order by REQUISITION_HEADER_ID desc;

      XXPBSA_AUTO_CREATE_PO_PRC
      (
        p_requisition_number  => v_pr_number
      , p_po_header_id        => v_pr_header_id
      , x_po_number           => l_po_number
      , x_po_header_id        => l_po_header_id    
      , x_error_msg           => l_error_msg
      );

      end loop;
      dbms_output.put_line(l_po_number||'-'||l_po_header_id||'-'||l_error_msg);
end;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_PR_LINES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_PR_LINES" ( errbuf OUT NOCOPY VARCHAR2, retcode OUT NOCOPY VARCHAR2 )
AS
        cursor cur
        is

            SELECT distinct prh_outter.PURCHASEREQUESTID BATCH_ID
                      ,stg.REQUISITION_TYPE
                      ,prh_outter.PURCHASEREQUESTID INTERFACE_SOURCE_CODE--stg.INTERFACE_SOURCE_CODE
                      ,stg.DESTINATION_TYPE_CODE
                      ,msi.SEGMENT1 PRODUCTID--ITEM_NAME
                      ,prl_outter.QUANTITY--QUANTITY
                      ,stg.AUTHORIZATION_STATUS
                      ,stg.PREPARER_FULL_NAME
                      ,REPLACE(prl_outter.UNIT, 'ECH') UOM_CODE
                      ,DESTINATION_ORGANIZATION
                      ,DELIVER_TO_LOCATION
                      ,DELIVER_TO_REQUESTOR
                      ,COST_CENTER
                      ,NATURAL_ACCOUNT
                      ,SUB_ANALYSIS_1
                      ,INTER_COMPANY
                      ,NEED_BY_DATE
                      ,OU_NAME
                      ,(prl_outter.LINETOTALCOST + prl_outter.LINETOTALCOSTTAX + prl_outter.PERUNITPRICE * prl_outter.QUANTITY) LINETOTALCOST
                      ,sup.VENDOR_NAME--SUGGESTED_VENDOR_NAME
                      ,sup.VENDOR_SITE_CODE--SUGGESTED_VENDOR_SITE
                      ,prh_outter.PURCHASEREQUESTID
                    ,prl_outter.PERUNITCOST--9
                    ,prl_outter.PERUNITCOSTTAX--8
                    ,prl_outter.LINETOTALCOST LINETOTALCOST_1--7
                    ,prl_outter.LINETOTALCOSTTAX--6
                    ,prl_outter.PERUNITPRICE--5
                    ,prl_outter.PERUNITPRICETAX--4
            FROM PURCHASE_REQUESTS_HEADER@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prh_outter,
              PURCHASE_REQUESTS_LINES@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prl_outter,
              (SELECT APS.VENDOR_NAME ,
                      apss.VENDOR_SITE_CODE,
                      prl.PURCHASEREQUESTID
              FROM PURCHASE_REQUESTS_LINES@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prl ,
                AP_SUPPLIERS aps ,
                AP_SUPPLIER_SITES_ALL apss
              WHERE 1            = 1
              AND prl.SUPPLIERID = aps.attribute10
              AND apss.VENDOR_ID = aps.VENDOR_ID
              ) sup,
              mtl_system_items_b msi,
              (SELECT * FROM xx_req_po_stg xrps WHERE rownum = 1 and batch_id = 0) stg
            WHERE prl_outter.PURCHASEREQUESTID = prh_outter.PURCHASEREQUESTID
                  and sup.PURCHASEREQUESTID = prh_outter.PURCHASEREQUESTID
                  and msi.attribute10 = prl_outter.PRODUCTID
                  and prh_outter.STATUS_FLAG is null;

BEGIN
for cur_rec in cur
loop
INSERT
INTO xx_req_po_stg
  (
    BATCH_ID,
    REQUISITION_TYPE,
    INTERFACE_SOURCE_CODE,
    DESTINATION_TYPE_CODE,
    ITEM_NAME,
    QUANTITY,
    AUTHORIZATION_STATUS,
    PREPARER_FULL_NAME,
    UOM_CODE,
    DESTINATION_ORGANIZATION,
    DELIVER_TO_LOCATION,
    DELIVER_TO_REQUESTOR,
    COST_CENTER,
    NATURAL_ACCOUNT,
    SUB_ANALYSIS_1,
    INTER_COMPANY,
    NEED_BY_DATE,
    OU_NAME,
    UNIT_PRICE,
    SUGGESTED_VENDOR_NAME,
    SUGGESTED_VENDOR_SITE,
    ATTRIBUTE9,
    ATTRIBUTE8,
    ATTRIBUTE7,
    ATTRIBUTE6,
    ATTRIBUTE5,
    ATTRIBUTE4
  )
values
(
                   cur_rec.BATCH_ID
                  ,cur_rec.REQUISITION_TYPE
                  ,cur_rec.INTERFACE_SOURCE_CODE
                  ,cur_rec.DESTINATION_TYPE_CODE
                  ,cur_rec.PRODUCTID
                  ,cur_rec.QUANTITY
                  ,cur_rec.AUTHORIZATION_STATUS
                  ,cur_rec.PREPARER_FULL_NAME
                  ,cur_rec.UOM_CODE
                  ,cur_rec.DESTINATION_ORGANIZATION
                  ,cur_rec.DELIVER_TO_LOCATION
                  ,cur_rec.DELIVER_TO_REQUESTOR
                  ,cur_rec.COST_CENTER
                  ,cur_rec.NATURAL_ACCOUNT
                  ,cur_rec.SUB_ANALYSIS_1
                  ,cur_rec.INTER_COMPANY
                  ,cur_rec.NEED_BY_DATE
                  ,cur_rec.OU_NAME
                  ,(cur_rec.PERUNITPRICE * cur_rec.QUANTITY)
                  ,cur_rec.VENDOR_NAME
                  ,cur_rec.VENDOR_SITE_CODE
                  ,cur_rec.PERUNITCOST
                  ,cur_rec.PERUNITCOSTTAX
                  ,cur_rec.LINETOTALCOST_1
                  ,cur_rec.LINETOTALCOSTTAX
                  ,cur_rec.PERUNITPRICE
                  ,cur_rec.PERUNITPRICETAX
);
        update PURCHASE_REQUESTS_HEADER@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK h
        set STATUS_FLAG = 'P'
        where h.PURCHASEREQUESTID = cur_rec.PURCHASEREQUESTID;
end loop;
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_REQ_JE_IMPORT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_REQ_JE_IMPORT" (p_source_name varchar2)
  IS
 
   l_conc_id          NUMBER;
   l_int_run_id       NUMBER;
   l_access_set_id    NUMBER;
   l_org_id           NUMBER := 81;
   l_sob_id           NUMBER := 2021;
   l_user_id          NUMBER := 0;
   l_resp_id          NUMBER := 20475;
   l_resp_app_id      NUMBER := 101;
   l_source_name      varchar2(100);
   lv_phase      VARCHAR2(10);

    lv_status     VARCHAR2(10);
    lv_dev_status VARCHAR2(10);
    lv_message    VARCHAR2(100);
    ln_interval   NUMBER;
    lv_dev_phase  VARCHAR2(10);
    rphase        VARCHAR2(10);
    rstatus       VARCHAR2(10);
    dphase        VARCHAR2(10);
    dstatus       VARCHAR2(10);
    MESSAGE       VARCHAR2(100);
    callv_status  BOOLEAN ;
    wait_status   BOOLEAN ;

BEGIN
   l_source_name := p_source_name;

   fnd_global.apps_initialize
   (
      user_id       => l_user_id       --User Id
      ,resp_id      => l_resp_id       --Responsibility Id
      ,resp_appl_id => l_resp_app_id   --Responsibility Application Id
   );

   mo_global.set_policy_context('S',l_org_id);

   SELECT   gl_journal_import_s.NEXTVAL
     INTO   l_int_run_id
     FROM   dual;

   SELECT   ACCESS_SET_ID
   INTO   l_access_set_id
     FROM   gl_access_sets
    WHERE   name = 'LSL Ledger' ;

   INSERT INTO gl_interface_control
   (
      je_source_name
      ,interface_run_id
      ,status
      ,set_of_books_id
   )
   VALUES
   (
      l_source_name
      ,l_int_run_id
      ,'S'
      ,l_sob_id
   );

   l_conc_id := fnd_request.submit_request
                   ( application   => 'SQLGL'
                    ,program       => 'GLLEZL'
                    ,description   => NULL
                    ,start_time    => SYSDATE
                    ,sub_request   => FALSE
                    ,argument1     => l_int_run_id    --interface run id
                    ,argument2     => l_access_set_id --data access set_id
                    ,argument3     => 'N'             --post to suspense
                    ,argument4     => NULL            --from date
                    ,argument5     => NULL            --to date
                    ,argument6     => 'N'             --summary mode
                    ,argument7     => 'N'             --import DFF
                    ,argument8     => 'Y'             --backward mode
                   );

   COMMIT;

   DBMS_OUTPUT.PUT_LINE('GL Import Submitted. Request Id : '||l_conc_id);
  BEGIN
   wait_status:=fnd_concurrent.wait_for_request (l_conc_id, 60 , 0, lv_phase , lv_status , lv_dev_phase, lv_dev_status, lv_message);
    -- callv_status :=fnd_concurrent.get_request_status(ln_request_id, '', '',
    --          rphase,rstatus,dphase,dstatus, message);
    fnd_file.put_line(fnd_file.log,'dphase = '||lv_dev_phase||'and '||'dstatus ='||lv_dev_status) ;
    IF UPPER(lv_dev_phase)='COMPLETE' AND UPPER(lv_dev_status)= 'NORMAL' THEN
      dbms_output.put_line ('JE Import program completed successfully');
      fnd_file.put_line(fnd_file.log,'JE Import program completed successfully');
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    fnd_file.put_line(fnd_file.log,'Error occure in procedure submit_request'||SQLERRM);
  END;  
EXCEPTION
   WHEN OTHERS THEN

      DBMS_OUTPUT.PUT_LINE('Error while submitting the GL Import Program.');
      DBMS_OUTPUT.PUT_LINE('Error : '||SQLCODE||'-'||SUBSTR(SQLERRM,1,200));
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_RETURN_TO_VENDOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_RETURN_TO_VENDOR" (p_errbuf OUT VARCHAR2, p_retcode OUT VARCHAR2)
AS

--declare
 X_USER_ID            NUMBER;
 X_PO_HEADER_ID       NUMBER;
 X_VAL                NUMBER;

 X_TRANS_TYPE         VARCHAR2 (20);
 X_ATTRIBUTE_15       VARCHAR (200) := 'Rel 12 ezROI Script for Standard Purchase Orders Return (Doc ID 1340331.1)';
 V_CREATE_RTV         BOOLEAN := TRUE;  -- If TRUE 'RETURN TO VENDOR' will be attempted. If FALSE 'RETURN TO RECEIVING' will be attempted.
 V_RT_DELIVER         BOOLEAN := TRUE;  -- If TRUE Return performed on RT DELIVER. If FALSE Return performed on RT RECEIVE
 V_SUCCESS            BOOLEAN;
 v_request_id         number;

 lv_status     VARCHAR2(10);
 lv_dev_status VARCHAR2(10);
 lv_message    VARCHAR2(100);
 ln_interval   NUMBER;
 lv_dev_phase  VARCHAR2(10);
 lv_phase             VARCHAR2(10);
     callv_status         BOOLEAN ;
     wait_status          BOOLEAN ;
     X_INTERFACE_SOURCE_CODE NUMBER;
     x_rcv_txn_id NUMBER;
     x_rts_txn_id NUMBER;
     x_po_dist_id NUMBER;
     x_quantity NUMBER;
     x_qty_uom VARCHAR2(20);
     x_unit_price NUMBER;
     --x_user_id NUMBER;
     rcv_seq    number;
     x_login_id NUMBER;
     x_calling_sequence NUMBER;

 BEGIN
DBMS_OUTPUT.PUT_LINE('*** ezROI for Standard Purchase Orders Returns ***');

IF V_CREATE_RTV
THEN 
   DBMS_OUTPUT.PUT_LINE('V_CREATE_RTV = TRUE = RETURN TO VENDOR');
ELSE
   DBMS_OUTPUT.PUT_LINE('V_CREATE_RTV = FALSE = RETURN TO RECEIEVING');
end if;

IF V_RT_DELIVER
THEN 
  SELECT 'DELIVER'
  INTO X_TRANS_TYPE
  FROM DUAL;
ELSE
  SELECT 'RECEIVE'
  INTO X_TRANS_TYPE
  FROM DUAL;
end if;

DBMS_OUTPUT.PUT_LINE('V_RT_DELIVER = Returning '||X_TRANS_TYPE||' Transactions');

SELECT USER_ID INTO X_USER_ID
FROM FND_USER
WHERE USER_NAME = UPPER('SJAYASINGHE1');


      select distinct po_header_id, INTERFACE_SOURCE_CODE
      INTO 
            X_PO_HEADER_ID , X_INTERFACE_SOURCE_CODE
     from
     (
      select distinct ph.po_header_id, PRHA.INTERFACE_SOURCE_CODE
      FROM po_headers_all          ph,
           po_lines_all          pl,
           po_line_locations_all pll,
           po_distributions_all  pd,
           mtl_parameters        mp,
           mtl_system_items_b    msi,
           PO_REQ_DISTRIBUTIONS_ALL PRDA,
           PO_REQUISITION_LINES_ALL PRLA,
           PO_REQUISITION_HEADERS_ALL PRHA,
           deliverysummary@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ds,
           deliverysummaryline@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK dsl,
           PURCHASE_REQUESTS_HEADER@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prh,
           PURCHASE_REQUESTS_LINES@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prl,
           SUPPLIERRETURN@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK srh,
           SUPPLIERRETURNLINE@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK srl,
           ap_suppliers aps--,
--           (
--            SELECT inv.invoice_id, pda.po_distribution_id, pl.item_id, inv.invoice_id
--            FROM ap_invoice_distributions_all inv,
--                 po_distributions_all         pda,
--                 po_lines_all                 pl
--            WHERE 1=1
--                  and rownum = 1
--                  AND pda.po_line_id = pl.po_line_id
--                  and inv.po_distribution_id = pda.po_distribution_id 
--            order by inv.invoice_id desc
--            ) inv
     WHERE 1 = 1
           and pl.po_header_id = ph.po_header_id
--           and pd.po_distribution_id = inv.po_distribution_id
--           and msi.inventory_item_id = inv.item_id
           and srh.supplierReturnId = srl.supplierReturnId
           and srl.title = msi.description
           and srl.SUPPLIERID = aps.attribute10
           and srh.STATUS_FLAG is NULL
           AND pl.po_line_id = pll.po_line_id
           AND pd.line_location_id = pll.line_location_id
           AND pd.po_line_id = pl.po_line_id
           AND pll.ship_to_organization_id = mp.organization_id
           AND ds.DeliveryId = dsl.DeliveryId
           AND srh.status_flag is null
           AND ds.EXTERNALREFERENCENUMBER = ph.SEGMENT1
           AND msi.inventory_item_id = pl.item_id
           AND msi.segment1 = dsl.PARTNUMBER
           AND pd.REQ_DISTRIBUTION_ID = PRDA.DISTRIBUTION_ID
           AND PRDA.REQUISITION_LINE_ID = PRLA.REQUISITION_LINE_ID
           AND PRLA.REQUISITION_HEADER_ID = PRHA.REQUISITION_HEADER_ID
    order by 2 desc
    )
    where rownum = 1;

--SELECT PO_HEADER_ID
--INTO 
-- X_PO_HEADER_ID 
--FROM PO_HEADERS_ALL
--WHERE 1 = 1
--AND SEGMENT1 = '100067'
--AND ORG_ID = 81
--AND PO_HEADER_ID = 4023
--AND AUTHORIZATION_STATUS = 'APPROVED'
--order by po_header_id desc;

DECLARE
CURSOR RT_DETAIL IS

select *
from 
(
SELECT 
 ret_req.QUANTITY   --RT.QUANTITY            -- RTI.QUANTITY         
,UNIT_OF_MEASURE    -- RTI.UNIT_OF_MEASURE
,TRANSACTION_ID     -- RTI.PARENT_TRANSACTION_ID
,SHIPMENT_HEADER_ID -- RTI.SHIPMENT_HEADER_ID
,SHIPMENT_LINE_ID   -- RTI.SHIPMENT_LINE_ID
,PO_HEADER_ID       -- RT.PO_HEADER_ID
,RECEIPT_NUM
,LINE_NUM
from
(
  SELECT RT.QUANTITY            -- RTI.QUANTITY
        ,RT.UNIT_OF_MEASURE    -- RTI.UNIT_OF_MEASURE
        ,RT.TRANSACTION_ID     -- RTI.PARENT_TRANSACTION_ID
        ,RT.SHIPMENT_HEADER_ID -- RTI.SHIPMENT_HEADER_ID
        ,RT.SHIPMENT_LINE_ID   -- RTI.SHIPMENT_LINE_ID
        ,RT.PO_HEADER_ID       -- RT.PO_HEADER_ID
        ,RSH.RECEIPT_NUM
        ,RSL.LINE_NUM
        ,ph.vendor_id
        ,ph.vendor_site_id
        ,pl.item_id
        ,NVL(PRHA.INTERFACE_SOURCE_CODE,0) INTERFACE_SOURCE_CODE
    FROM RCV_TRANSACTIONS RT
        ,RCV_SHIPMENT_LINES RSL
        ,RCV_SHIPMENT_HEADERS RSH
        ,po_headers_all ph
        ,po_lines_all pl
        ,po_distributions_all  pd
        ,PO_REQ_DISTRIBUTIONS_ALL PRDA
        ,PO_REQUISITION_LINES_ALL PRLA
        ,PO_REQUISITION_HEADERS_ALL PRHA
  WHERE 1 = 1
        and RT.TRANSACTION_TYPE = X_TRANS_TYPE
        AND RT.SHIPMENT_LINE_ID = RSL.SHIPMENT_LINE_ID
        AND RSL.SHIPMENT_HEADER_ID = RSH.SHIPMENT_HEADER_ID
        AND pd.po_line_id         = pl.po_line_id
        AND ph.po_header_id       = pl.po_header_id
        AND rt.po_header_id       = ph.po_header_id
        AND rt.shipment_header_id = rsh.shipment_header_id
        AND rt.po_line_id         = pl.po_line_id
        AND pd.REQ_DISTRIBUTION_ID = PRDA.DISTRIBUTION_ID
        AND PRDA.REQUISITION_LINE_ID = PRLA.REQUISITION_LINE_ID
        AND PRLA.REQUISITION_HEADER_ID = PRHA.REQUISITION_HEADER_ID
    order by INTERFACE_SOURCE_CODE desc
) por
,(
    select *
    from
    (
    
                  select distinct 
                         --,(srl.QUANTITY * -1) QUANTITY
                         srl.QUANTITY QUANTITY
                         --, srh.PURCHASEREQUESTID
                         , 0 PURCHASEREQUESTID
                         , msi.inventory_item_id
                         , aps.vendor_id
                         --, apss.vendor_site_id
                         , srl.PRODUCTID
                         , srl.SUPPLIERID
                         , NVL(PRHA.INTERFACE_SOURCE_CODE, 0) INTERFACE_SOURCE_CODE
                      FROM SUPPLIERRETURN@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK srh,
                           SUPPLIERRETURNLINE@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK srl,
                           po_lines_all pl,
                           po_line_locations_all pll,
                           po_distributions_all  pd,
                           mtl_parameters        mp,
                           mtl_system_items_b    msi,
                           PO_REQ_DISTRIBUTIONS_ALL PRDA,
                           PO_REQUISITION_LINES_ALL PRLA,
                           PO_REQUISITION_HEADERS_ALL PRHA,
                           ap_suppliers aps
                     WHERE 1 = 1
                           and srh.SUPPLIERRETURNID = srl.SUPPLIERRETURNID
                           and srl.title = msi.description
                           and srl.SUPPLIERID = aps.attribute10
                           and srh.STATUS_FLAG is null
                           AND pl.po_line_id = pll.po_line_id
                           AND pd.line_location_id = pll.line_location_id
                           AND pd.po_line_id = pl.po_line_id
                           AND pll.ship_to_organization_id = mp.organization_id
                           AND msi.inventory_item_id = pl.item_id
                           AND pd.REQ_DISTRIBUTION_ID = PRDA.DISTRIBUTION_ID
                           AND PRDA.REQUISITION_LINE_ID = PRLA.REQUISITION_LINE_ID
                           AND PRLA.REQUISITION_HEADER_ID = PRHA.REQUISITION_HEADER_ID                           
                    order by INTERFACE_SOURCE_CODE desc

    
    )
    where rownum = 1
 ) ret_req
WHERE  1 = 1
and ret_req.vendor_id = por.vendor_id(+)
and ret_req.inventory_item_id = por.item_id(+)
order by por.INTERFACE_SOURCE_CODE desc
)
where 1=1
      and rownum = 1;

BEGIN

select RCV_INTERFACE_GROUPS_S.NEXTVAL into X_VAL from dual;

FOR RTICURSOR IN RT_DETAIL LOOP



IF V_CREATE_RTV
THEN 
  SELECT 'RETURN TO VENDOR'
  INTO X_TRANS_TYPE
  FROM DUAL;
ELSE
  SELECT 'RETURN TO RECEIVING'
  INTO X_TRANS_TYPE
  FROM DUAL;
END IF;

INSERT INTO RCV_TRANSACTIONS_INTERFACE
(INTERFACE_TRANSACTION_ID
,GROUP_ID

,LAST_UPDATE_DATE
,LAST_UPDATED_BY
,CREATION_DATE
,CREATED_BY
,LAST_UPDATE_LOGIN

,TRANSACTION_TYPE  -- X_TRANS_TYPE
,TRANSACTION_DATE
,PROCESSING_STATUS_CODE
,PROCESSING_MODE_CODE
,TRANSACTION_STATUS_CODE

,QUANTITY               -- RT.QUANTITY
,UNIT_OF_MEASURE        -- RT.UNIT_OF_MEASURE 
,PARENT_TRANSACTION_ID  -- RT.TRANSACTION_ID
,SHIPMENT_HEADER_ID     -- RT.SHIPMENT_HEADER_ID
,SHIPMENT_LINE_ID       -- RT.SHIPMENT_LINE_ID
,PO_HEADER_ID           -- RT.PO_HEADER_ID - required for RTI to show in RDA Report

,VALIDATION_FLAG
,ORG_ID
,ATTRIBUTE15
,CREATE_DEBIT_MEMO_FLAG)
select
 RCV_TRANSACTIONS_INTERFACE_S.NEXTVAL  -- INTERFACE_TRANSACTION_ID
,RCV_INTERFACE_GROUPS_S.CURRVAL        -- GROUP_ID

,SYSDATE   -- LAST_UPDATE_DATE
,X_USER_ID -- LAST_UPDATED_BY
,SYSDATE   -- CREATION_DATE
,X_USER_ID -- CREATED_BY
,0         -- LAST_UPDATE_LOGIN

,X_TRANS_TYPE   -- TRANSACTION_TYPE
,SYSDATE        -- TRANSACTION_DATE
,'PENDING'      -- PROCESSING_STATUS_CODE
,'BATCH'        -- PROCESSING_MODE_CODE
,'PENDING'      -- TRANSACTION_STATUS_CODE

,RTICURSOR.QUANTITY         -- QUANTITY  -- RT.QUANTITY
,RTICURSOR.UNIT_OF_MEASURE  -- UNIT_OF_MEASURE  -- RT.UNIT_OF_MEASURE
,RTICURSOR.TRANSACTION_ID   -- PARENT_TRANSACTION_ID  -- RT.TRANSACTION_ID

,RTICURSOR.SHIPMENT_HEADER_ID  -- SHIPMENT_HEADER_ID  -- RT.SHIPMENT_HEADER_ID
,RTICURSOR.SHIPMENT_LINE_ID    -- SHIPMENT_LINE_ID  -- RT.SHIPMENT_LINE_ID
,RTICURSOR.PO_HEADER_ID        -- PO_HEADER_ID  -- RT.PO_HEADER_ID

,'Y'
,81
,X_ATTRIBUTE_15
,'N'
FROM DUAL;

DBMS_OUTPUT.PUT_LINE('Receipt: '||RTICURSOR.RECEIPT_NUM||' Line: '||RTICURSOR.LINE_NUM||' has been inserted into ROI for '||X_TRANS_TYPE||' with GROUP_ID '||RCV_INTERFACE_GROUPS_S.CURRVAL);

END LOOP;

--update SUPPLIERRETURN@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK
--set STATUS_FLAG = 'P'
--where STATUS_FLAG is null;

                update SUPPLIERRETURN@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK
                set STATUS_FLAG = 'P'
                where SUPPLIERRETURNID in 
                (
                    select *
                    from (
                     select srh.SUPPLIERRETURNID
                      FROM SUPPLIERRETURN@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK srh,
                           SUPPLIERRETURNLINE@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK srl,
                           po_lines_all pl,
                           po_line_locations_all pll,
                           po_distributions_all  pd,
                           mtl_parameters        mp,
                           mtl_system_items_b    msi,
                           PO_REQ_DISTRIBUTIONS_ALL PRDA,
                           PO_REQUISITION_LINES_ALL PRLA,
                           PO_REQUISITION_HEADERS_ALL PRHA,
                           ap_suppliers aps
                     WHERE 1 = 1
                           and srh.SUPPLIERRETURNID = srl.SUPPLIERRETURNID
                           and srl.title = msi.description
                           and NVL(srh.STATUS_FLAG,'A') = 'A'
                           AND pl.po_line_id = pll.po_line_id
                           AND pd.line_location_id = pll.line_location_id
                           AND pd.po_line_id = pl.po_line_id
                           AND pll.ship_to_organization_id = mp.organization_id
                           AND msi.inventory_item_id = pl.item_id
                           AND pd.REQ_DISTRIBUTION_ID = PRDA.DISTRIBUTION_ID
                           AND PRDA.REQUISITION_LINE_ID = PRLA.REQUISITION_LINE_ID
                           AND PRLA.REQUISITION_HEADER_ID = PRHA.REQUISITION_HEADER_ID
                           
                    order by 1 desc
                    )
                    where rownum = 1
                );

DBMS_OUTPUT.PUT_LINE('*** ezROI COMPLETE - End ***');

END; 
COMMIT;



BEGIN
apps.mo_global.init ('PO');
apps.mo_global.set_policy_context ('S',204);
apps.fnd_global.apps_initialize ( user_id => 0, resp_id => 20707, resp_appl_id => 201 );
--------CALLING STANDARD RECEIVING TRANSACTION PROCESSOR ---------------------------------

  v_request_id   := apps.fnd_request.submit_request ( application => 'PO', 
                                                      PROGRAM => 'RVCTP', 
                                                      argument1 => 'BATCH', 
                                                      argument2 => apps.rcv_interface_groups_s.currval, 
                                                      argument3 => 81);
                                                      commit;
    dbms_output.put_line('Request Id '||v_request_id);                                                 

   wait_status := fnd_concurrent.wait_for_request (v_request_id, 60 , 0, lv_phase , lv_status , lv_dev_phase, lv_dev_status, lv_message);
    -- callv_status :=fnd_concurrent.get_request_status(ln_request_id, '', '',
    --          rphase,rstatus,dphase,dstatus, message);
    fnd_file.put_line(fnd_file.log,'dphase = '||lv_dev_phase||'and '||'dstatus ='||lv_dev_status) ;
    IF UPPER(lv_dev_phase)='COMPLETE' AND UPPER(lv_dev_status)= 'NORMAL' THEN
      dbms_output.put_line ('Return to Vendor program completed successfully');
      fnd_file.put_line(fnd_file.log,'Return to Vendor program completed successfully');
    END IF;

--
--select RCV_TRANSACTIONS_INTERFACE_S.CURRVAL
--into rcv_seq
--from dual;
--
--select RCV_TXN_ID, RTS_TXN_ID, PO_DISTRIBUTION_ID, QUANTITY, UNIT_OF_MEASURE, UNIT_PRICE, USER_ID, LOGIN_ID, round(dbms_random.value(1,2000)) seq
--into x_rcv_txn_id,
--     x_rts_txn_id,
--     x_po_dist_id,
--     x_quantity,
--     x_qty_uom,
--     x_unit_price,
--     x_user_id,
--     x_login_id,
--     x_calling_sequence
--from 
--(
--select distinct TRANSACTION_ID rcv_txn_id
--      ,PARENT_TRANSACTION_ID rts_txn_id
--      ,PO_DISTRIBUTION_ID
--      ,QUANTITY
--      ,UNIT_OF_MEASURE
--      ,unit_price
--      ,fnd_profile.value('user_id') USER_ID
--      ,fnd_profile.value('login_id') LOGIN_ID
--from 
--(
--SELECT distinct
-- ret_req.QUANTITY   --RT.QUANTITY            -- RTI.QUANTITY         
--,UNIT_OF_MEASURE    -- RTI.UNIT_OF_MEASURE
--,TRANSACTION_ID     -- RTI.PARENT_TRANSACTION_ID
--,PARENT_TRANSACTION_ID
--,SHIPMENT_HEADER_ID -- RTI.SHIPMENT_HEADER_ID
--,SHIPMENT_LINE_ID   -- RTI.SHIPMENT_LINE_ID
--,PO_HEADER_ID       -- RT.PO_HEADER_ID
--,RECEIPT_NUM
--,LINE_NUM
--,TRANSACTION_TYPE
--,por.PO_DISTRIBUTION_ID
--,unit_price
--,por.item_id
--,inv.invoice_id
--from
--(
--  SELECT distinct RT.QUANTITY            -- RTI.QUANTITY
--        ,RT.UNIT_OF_MEASURE    -- RTI.UNIT_OF_MEASURE
--        ,RT.TRANSACTION_ID     -- RTI.PARENT_TRANSACTION_ID
--        ,RT.PARENT_TRANSACTION_ID
--        ,RT.SHIPMENT_HEADER_ID -- RTI.SHIPMENT_HEADER_ID
--        ,RT.SHIPMENT_LINE_ID   -- RTI.SHIPMENT_LINE_ID
--        ,RT.PO_HEADER_ID       -- RT.PO_HEADER_ID
--        ,RSH.RECEIPT_NUM
--        ,RSL.LINE_NUM
--        ,ph.vendor_id
--        ,ph.vendor_site_id
--        ,pl.item_id
--        ,pl.unit_price
--        ,NVL(PRHA.INTERFACE_SOURCE_CODE,0) INTERFACE_SOURCE_CODE
--        ,pd.PO_DISTRIBUTION_ID
--        ,RT.TRANSACTION_TYPE
--    FROM RCV_TRANSACTIONS RT
--        ,RCV_SHIPMENT_LINES RSL
--        ,RCV_SHIPMENT_HEADERS RSH
--        ,po_headers_all ph
--        ,po_lines_all pl
--        ,po_distributions_all  pd
--        ,PO_REQ_DISTRIBUTIONS_ALL PRDA
--        ,PO_REQUISITION_LINES_ALL PRLA
--        ,PO_REQUISITION_HEADERS_ALL PRHA
--  WHERE 1 = 1
--        and RT.TRANSACTION_TYPE in ('RETURN TO VENDOR')
--        AND RT.SHIPMENT_LINE_ID = RSL.SHIPMENT_LINE_ID
--        AND RSL.SHIPMENT_HEADER_ID = RSH.SHIPMENT_HEADER_ID
--        AND pd.po_line_id         = pl.po_line_id
--        AND ph.po_header_id       = pl.po_header_id
--        AND rt.po_header_id       = ph.po_header_id
--        AND rt.shipment_header_id = rsh.shipment_header_id
--        AND rt.po_line_id         = pl.po_line_id
--        AND pd.REQ_DISTRIBUTION_ID = PRDA.DISTRIBUTION_ID
--        AND PRDA.REQUISITION_LINE_ID = PRLA.REQUISITION_LINE_ID
--        AND PRLA.REQUISITION_HEADER_ID = PRHA.REQUISITION_HEADER_ID
--    order by INTERFACE_SOURCE_CODE desc
--) por
--,(
--       select distinct (srl.QUANTITY * -1) QUANTITY
--             , prh.PURCHASEREQUESTID
--             , msi.inventory_item_id
--             , aps.vendor_id
--             --, apss.vendor_site_id
--             , srl.PRODUCTID
--             , srl.SUPPLIERID
--             , NVL(PRHA.INTERFACE_SOURCE_CODE, 0) INTERFACE_SOURCE_CODE
--      FROM po_lines_all          pl,
--           po_line_locations_all pll,
--           po_distributions_all  pd,
--           mtl_parameters        mp,
--           mtl_system_items_b    msi,
--           PO_REQ_DISTRIBUTIONS_ALL PRDA,
--           PO_REQUISITION_LINES_ALL PRLA,
--           PO_REQUISITION_HEADERS_ALL PRHA,
--           deliverysummary@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ds,
--           deliverysummaryline@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK dsl,
--           PURCHASE_REQUESTS_HEADER@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prh,
--           PURCHASE_REQUESTS_LINES@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prl,
--           SUPPLIERRETURN@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK srh,
--           SUPPLIERRETURNLINE@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK srl,
--           ap_suppliers aps
--     WHERE 1 = 1
--           and srh.supplierReturnId = srl.supplierReturnId
--           and srl.title = msi.description
--           and srl.SUPPLIERID = aps.attribute10(+)
--           and srh.STATUS_FLAG is NULL
--           AND pl.po_line_id = pll.po_line_id
--           AND pd.line_location_id = pll.line_location_id
--           AND pd.po_line_id = pl.po_line_id
--           AND pll.ship_to_organization_id = mp.organization_id
--           AND ds.DeliveryId = dsl.DeliveryId
--           AND msi.inventory_item_id = pl.item_id
--           AND msi.segment1 = dsl.PARTNUMBER
--           AND pd.REQ_DISTRIBUTION_ID = PRDA.DISTRIBUTION_ID
--           AND PRDA.REQUISITION_LINE_ID = PRLA.REQUISITION_LINE_ID
--           AND PRLA.REQUISITION_HEADER_ID = PRHA.REQUISITION_HEADER_ID
--           --AND rownum = 1
--        order by INTERFACE_SOURCE_CODE desc     
-- ) ret_req
-- ,
-- (
--            SELECT distinct inv.invoice_id, pda.po_distribution_id, pl.item_id
--            FROM ap_invoice_distributions_all inv,
--                 po_distributions_all         pda,
--                 po_lines_all                 pl
--            WHERE 1=1
--                  AND pda.po_line_id = pl.po_line_id
--                  and inv.po_distribution_id = pda.po_distribution_id 
--            ) inv
--WHERE  1 = 1
--and ret_req.vendor_id = por.vendor_id
--and ret_req.inventory_item_id = por.item_id
--and por.po_distribution_id = inv.po_distribution_id
--and por.item_id = inv.item_id
--order by invoice_id desc
--)
--where 1=1
--)
--where 1 = 1
--      and x_rts_txn_id = rcv_seq;
--
--V_SUCCESS := XXAP_AUTO_DM_CREATION_PKG.Create_DM(
--                                            p_rcv_txn_id		=> x_rcv_txn_id,
--                                            p_rts_txn_id		=> x_rts_txn_id,
--                                            p_po_dist_id		=> x_po_dist_id,
--                                            p_quantity		    => x_quantity,
--                                            p_qty_uom		    => x_qty_uom,
--                                            p_unit_price		=> x_unit_price,
--                                            p_user_id		    => x_user_id,
--                                            p_login_id		    => x_login_id,
--                                            p_calling_sequence	=> x_calling_sequence
--                                          );

END;

END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_UPDATE_PRODUCT_GUID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_UPDATE_PRODUCT_GUID" (p_data varchar2)
as
    l_return_status VARCHAR2(10);
    l_msg_count NUMBER;
    l_msg_data VARCHAR2(1000);

    cursor cur is

                        SELECT PartNumber
                             , ProductId
                        FROM 
                             JSON_TABLE(
                             p_data
                             , '$' COLUMNS (
                              PartNumber varchar2(30) PATH '$.PartNumber',
                              ProductId    varchar2(100) PATH '$.ProductId'
                              )
                        ) JT;

BEGIN


    for cur_rec in cur
    loop   
    begin    

    update mtl_system_items_b
    set attribute10 = cur_rec.ProductId
    where segment1 = cur_rec.PartNumber;

    COMMIT;    

  exception
    when others then
      dbms_output.put_line(''||sqlerrm);

    end;

    end loop;

    dbms_output.put_line('return_status: '||l_return_status);
    dbms_output.put_line('msg_data: '||l_msg_data);
END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_UPDATE_SUP_GUID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_UPDATE_SUP_GUID" (p_data varchar2, p_param1 varchar2)
as
    l_vendor_rec    ap_vendor_pub_pkg.r_vendor_rec_type;
    l_return_status VARCHAR2(10);
    l_msg_count     NUMBER;
    l_msg_data      VARCHAR2(1000);
    l_data          varchar2(100);

BEGIN
--    l_data := p_data;
--    l_vendor_rec.vendor_id   := TO_NUMBER(p_param1);
--    l_vendor_rec.attribute10 := l_data;
--    
--    pos_vendor_pub_pkg.update_vendor(
--        p_vendor_rec => l_vendor_rec,
--        x_return_status => l_return_status,
--        x_msg_count => l_msg_count,
--        x_msg_data => l_msg_data);
--
--    COMMIT;    

        update ap_suppliers
        set attribute10 = p_data
        where vendor_id = TO_NUMBER(p_param1);

END;

/
--------------------------------------------------------
--  DDL for Procedure XXPBSA_VENDOR_RET_LINES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXPBSA_VENDOR_RET_LINES" (p_errbuf OUT VARCHAR2, p_retcode OUT VARCHAR2)
as
     v_request_id         number;

     lv_status            VARCHAR2(10);
     lv_dev_status        VARCHAR2(10);
     lv_message           VARCHAR2(100);
     ln_interval          NUMBER;
     lv_dev_phase         VARCHAR2(10);
     lv_phase             VARCHAR2(10);
     callv_status         BOOLEAN ;
     wait_status          BOOLEAN ;
BEGIN
apps.mo_global.init ('PO');
apps.mo_global.set_policy_context ('S',204);
apps.fnd_global.apps_initialize ( user_id => 0, resp_id => 20707, resp_appl_id => 201 );
--------CALLING STANDARD RECEIVING TRANSACTION PROCESSOR ---------------------------------

  v_request_id   := apps.fnd_request.submit_request ( application => 'PO', 
                                                      PROGRAM => 'RVCTP', 
                                                      argument1 => 'BATCH', 
                                                      argument2 => apps.rcv_interface_groups_s.currval, 
                                                      argument3 => 81);
                                                      commit;
    dbms_output.put_line('Request Id '||v_request_id);                                                 

   wait_status := fnd_concurrent.wait_for_request (v_request_id, 60 , 0, lv_phase , lv_status , lv_dev_phase, lv_dev_status, lv_message);
    -- callv_status :=fnd_concurrent.get_request_status(ln_request_id, '', '',
    --          rphase,rstatus,dphase,dstatus, message);
    fnd_file.put_line(fnd_file.log,'dphase = '||lv_dev_phase||'and '||'dstatus ='||lv_dev_status) ;
    IF UPPER(lv_dev_phase)='COMPLETE' AND UPPER(lv_dev_status)= 'NORMAL' THEN
      dbms_output.put_line ('Return to Vendor program completed successfully');
      fnd_file.put_line(fnd_file.log,'Return to Vendor program completed successfully');
    END IF;


END;

/
--------------------------------------------------------
--  DDL for Procedure XXSEND_MAIL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APPS"."XXSEND_MAIL" (p_to        IN VARCHAR2,
                                       p_from      IN VARCHAR2,
                                       p_message   IN VARCHAR2,
                                       p_smtp_host IN VARCHAR2,
                                       p_smtp_port IN NUMBER DEFAULT 25)
AS
  l_mail_conn   UTL_SMTP.connection;
BEGIN
  l_mail_conn := UTL_SMTP.open_connection(p_smtp_host, p_smtp_port);
  UTL_SMTP.helo(l_mail_conn, p_smtp_host);
  UTL_SMTP.mail(l_mail_conn, p_from);
  UTL_SMTP.rcpt(l_mail_conn, p_to);
  UTL_SMTP.data(l_mail_conn, p_message || UTL_TCP.crlf || UTL_TCP.crlf);
  UTL_SMTP.quit(l_mail_conn);
END;

/
--------------------------------------------------------
--  DDL for Package XXLSL_TRX_CUST
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "APPS"."XXLSL_TRX_CUST" is
    TYPE xxlsl_cust_det IS RECORD
    (
    p_cust VARCHAR2(150),
    p_description VARCHAR2(150),
    p_amount NUMBER,
    p_qty NUMBER 
    );
  cust_det xxlsl_cust_det;
  TYPE i_array IS TABLE OF cust_det.p_cust%TYPE;

  procedure trx_run;

end;

/
--------------------------------------------------------
--  DDL for Package XXLSL_RA_CUST_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "APPS"."XXLSL_RA_CUST_PKG" AS 

    function xxlsl_ar_inv(p_cust varchar2, p_description varchar2, P_CODE_COMBINATION_ID number, p_amount number, p_qty varchar2, p_sale_date date, r_type xxlsl_callbck := xxlsl_callbck())
    return varchar2;
    procedure xxlsl_execute;

END XXLSL_RA_CUST_PKG;

/
--------------------------------------------------------
--  DDL for Package Body XXLSL_TRX_CUST
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XXLSL_TRX_CUST" is

  procedure trx_run is
    lt_results i_array := i_array();
    --cur sys_refcursor;

  begin
    for r in (select * from table(lt_results))
	loop
      lt_results.extend;
      lt_results(lt_results.count) := 1;
      DBMS_OUTPUT.PUT_LINE(lt_results.count);
    end loop;

--    for cur in c1
--    loop
--        DBMS_OUTPUT.PUT_LINE(cur.p_cust);
--    end loop;


  end trx_run;

end;

/
--------------------------------------------------------
--  DDL for Function XXLSL_AMOUNT_IN_WORDS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APPS"."XXLSL_AMOUNT_IN_WORDS" (p_amount number) return varchar2
as
v_amount varchar2(10000);
begin

select(InitCap(TO_CHAR(TO_DATE(TO_CHAR(to_number(NVL(SUBSTR(replace(rtrim(to_char(p_amount, 'FM9G999G990D999', 'NLS_NUMERIC_CHARACTERS='',.'''),','), '.'), 0, INSTR(replace(rtrim(to_char(p_amount, 'FM9G999G990D999', 'NLS_NUMERIC_CHARACTERS='',.'''),','), '.'), ',')-1), replace(rtrim(to_char(p_amount, 'FM9G999G990D999', 'NLS_NUMERIC_CHARACTERS='',.'''),','), '.')))), 'J'),'Jsp'))||' '||nvl(InitCap(TO_CHAR(TO_DATE(TO_CHAR(DECODE(to_char(substr(to_char(replace(substr(replace(rtrim(to_char(p_amount, 'FM9G999G990D999', 'NLS_NUMERIC_CHARACTERS='',.'''),','), '.'),instr(replace(rtrim(to_char(p_amount, 'FM9G999G990D999', 'NLS_NUMERIC_CHARACTERS='',.'''),','), '.'),','),length(replace(rtrim(to_char(p_amount, 'FM9G999G990D999', 'NLS_NUMERIC_CHARACTERS='',.'''),','), '.'))), ',','.'),'FM9G999G990D00'),-2)),'00',null,substr(to_char(replace(substr(replace(rtrim(to_char(p_amount, 'FM9G999G990D999', 'NLS_NUMERIC_CHARACTERS='',.'''),','), '.'),instr(replace(rtrim(to_char(p_amount, 'FM9G999G990D999', 'NLS_NUMERIC_CHARACTERS='',.'''),','), '.'),','),length(replace(rtrim(to_char(p_amount, 'FM9G999G990D999', 'NLS_NUMERIC_CHARACTERS='',.'''),','), '.'))), ',','.'),'FM9G999G990D00'),-2))), 'J'),'Jsp')), 'Zero')||' Cents Only')
into v_amount
from dual;

return v_amount;

end;

/
--------------------------------------------------------
--  DDL for Function XXLSL_APPLY_RECIPT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APPS"."XXLSL_APPLY_RECIPT" (
										 p_amount 				number ,
										 p_receipt_number 		varchar2,
										 p_receipt_date 		date,
										 p_gl_date 				date,
										 p_customer_number 		varchar2,
										 p_receipt_method_id 	number,
										 p_trx_number 			varchar2,
										 p_currency_code 		varchar2
)
return varchar2
as
	l_return_status 		VARCHAR2(1);
	l_msg_count 			NUMBER;
	l_msg_data 				VARCHAR2(240);
	l_cash_receipt_id 		NUMBER;
	p_count 				number := 0;

	v_user_id      NUMBER;
	v_resp_id      NUMBER;
	v_resp_appl_id NUMBER;
	v_lang         VARCHAR2(100);
	v_session_lang VARCHAR2(100)	:=fnd_global.current_language;
	v_return       VARCHAR2(10)		:='T';
	v_nls_lang     VARCHAR2(100);
	v_org_id       NUMBER		 	:= 81;

    I_USER_NAME    VARCHAR2(50) := 'SJAYASINGHE1';
    I_RESP_NAME    VARCHAR2(50) := 'Purchasing Super User';

/* Cursor to get the user id information based on the input user name */
CURSOR cur_user
IS
   SELECT user_id
   FROM fnd_user
   WHERE user_name = i_user_name;
/* Cursor to get the responsibility information */
CURSOR cur_resp
IS
    SELECT responsibility_id
          ,application_id
          ,language
    FROM fnd_responsibility_tl
    WHERE responsibility_name = i_resp_name;
/* Cursor to get the nls language information for setting the language context */
CURSOR cur_lang(p_lang_code VARCHAR2)
IS
    SELECT nls_language
    FROM fnd_languages
    WHERE language_code = p_lang_code;

BEGIN
     -- 1) Set the applications context
    mo_global.init('AR');
    mo_global.set_policy_context('S','81');


    /* To get the user id details */
    OPEN cur_user;
    FETCH cur_user INTO v_user_id;
    IF cur_user%NOTFOUND
    THEN
        v_return:='F';    
	END IF; --IF cur_user%NOTFOUND
    CLOSE cur_user;

    /* To get the responsibility and responsibility application id */
    OPEN cur_resp;
    FETCH cur_resp INTO v_resp_id, v_resp_appl_id,v_lang;
    IF cur_resp%NOTFOUND
    THEN
        v_return:='F';        
    END IF; --IF cur_resp%NOTFOUND
    CLOSE cur_resp; 

    /* Setting the oracle applications context for the particular session */
    fnd_global.apps_initialize ( 
								 user_id      => v_user_id
                                ,resp_id      => v_resp_id
                                ,resp_appl_id => v_resp_appl_id
							   );

    --fnd_global.apps_initialize(1011902, 50559, 222,0);


    AR_RECEIPT_API_PUB.create_and_apply( p_api_version 			=> 1.0,
										 p_init_msg_list 		=> FND_API.G_TRUE,
										 p_commit 				=> FND_API.G_TRUE,
										 p_validation_level 	=> FND_API.G_VALID_LEVEL_FULL,
										 x_return_status 		=> l_return_status,
										 x_msg_count 			=> l_msg_count,
										 x_msg_data 			=> l_msg_data,
										 p_amount 				=> p_amount,
										 p_receipt_number 		=> p_receipt_number,
										 p_receipt_date 		=> p_receipt_date,
										 p_gl_date 				=> p_gl_date,
										 p_customer_number 		=> 1001,--p_customer_number,
										 p_receipt_method_id 	=> 1001,
										 p_trx_number 			=> p_trx_number,
										 p_currency_code 		=> p_currency_code,
										 p_cr_id 				=> l_cash_receipt_id 
										);

    -- 3) Review the API output
    dbms_output.put_line('Status ' || l_return_status);
    dbms_output.put_line('Message count ' || l_msg_count);
    dbms_output.put_line('Cash Receipt ID ' || l_cash_receipt_id );

    if l_msg_count = 1 Then
       dbms_output.put_line('l_msg_data '|| l_msg_data);
    elsif l_msg_count > 1 Then
       loop
          p_count := p_count + 1;
          l_msg_data := FND_MSG_PUB.Get(FND_MSG_PUB.G_NEXT,FND_API.G_FALSE);
          if l_msg_data is NULL Then
             exit;
          end if;
          dbms_output.put_line('Message ' || p_count ||'. '||l_msg_data);
       end loop;
    end if;
	return l_return_status;
END;

/
--------------------------------------------------------
--  DDL for Function XXLSL_AP_SEQ1_FUNC
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APPS"."XXLSL_AP_SEQ1_FUNC" 
return varchar2
as
x_seq1  varchar2(20);
begin

select XXLSL_AP_SEQ1.nextval into x_seq1 from dual;

return 'LSL'||x_seq1;
end;

/
--------------------------------------------------------
--  DDL for Function XXLSL_AR_INV
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APPS"."XXLSL_AR_INV" (p_cust varchar2, p_description varchar2, P_CODE_COMBINATION_ID number, p_amount number, p_qty varchar2, p_sale_date date, r_type xxlsl_CALLBACK_T)
    return varchar2
as
	l_return_status 	varchar2(1);
	p_count  			NUMBER;
	l_msg_count 		number;
	l_msg_data 			varchar2(2000);
	l_batch_id 			number;
	l_cnt 				number := 0;
	l_customer_trx_id 	number;
	cnt 				number; 
	v_context 			varchar2(100);

	l_batch_source_rec 		ar_invoice_api_pub.batch_source_rec_type;
	l_trx_header_tbl 		ar_invoice_api_pub.trx_header_tbl_type;
	l_trx_lines_tbl 		ar_invoice_api_pub.trx_line_tbl_type;
	l_trx_dist_tbl 			ar_invoice_api_pub.trx_dist_tbl_type;
	l_trx_salescredits_tbl 	ar_invoice_api_pub.trx_salescredits_tbl_type;

    V_TRX_HEADER_ID number;
    V_TRX_LINE_ID   number;
    V_TRX_DIST_ID   number;

    username            varchar2(30) := 'SJAYASINGHE1';
    responsiblity_name  varchar2(30) := 'Purchasing Super User';
    org_id              number       := 81;

BEGIN

DBMS_OUTPUT.PUT_LINE('1');
--1. Set applications context if not already set.
	BEGIN
	v_context := xxlsl_set_context(username,responsiblity_name,org_id);
	IF v_context = 'F'
		THEN
			DBMS_OUTPUT.PUT_LINE('Error while setting the context');        
		END IF;
	DBMS_OUTPUT.PUT_LINE('2');
	exception
	when others then
	dbms_output.put_line('Error in Crea_cm:'||sqlerrm);
	end;

	select xxlsl_trx_header_seq.nextval
	into v_trx_header_id
	from dual;

	select xxlsl_trx_line_seq.nextval
	into v_trx_line_id
	from dual;

	select xxlsl_trx_dist_seq.nextval
	into v_trx_dist_id
	from dual;

	--v_trx_header_id = 102
	--v_trx_line_id = 101
	--v_trx_dist_id = 1021



	-- Populate header information.
	l_trx_header_tbl(1).trx_header_id := v_trx_header_id;
	--l_trx_header_tbl(1).trx_number := 'Test_inv';--The transaction number is populated when automatic transaction numbering is selected on the transaction batch source.
	l_trx_header_tbl(1).bill_to_customer_id := p_cust;
	l_trx_header_tbl(1).cust_trx_type_id := 1;
	l_trx_header_tbl(1).primary_salesrep_id := -3;
	-- Populate batch source information.
	l_batch_source_rec.batch_source_id := 1001;
	-- Populate line 1 information.
	l_trx_lines_tbl(1).trx_header_id := v_trx_header_id;
	l_trx_lines_tbl(1).trx_line_id := v_trx_line_id;
	l_trx_lines_tbl(1).line_number := 1;
	l_trx_lines_tbl(1).description := p_description;
	l_trx_lines_tbl(1).quantity_invoiced := p_qty;
	l_trx_lines_tbl(1).unit_selling_price := (p_amount/p_qty);
	l_trx_lines_tbl(1).uom_code := 'ECH';
	l_trx_lines_tbl(1).line_type := 'LINE';
	l_trx_lines_tbl(1).taxable_flag := 'N';
	-- Populate Distribution Information
	l_trx_dist_tbl(1).trx_dist_id := v_trx_dist_id;
	l_trx_dist_tbl(1).trx_header_id := v_trx_header_id;
	l_trx_dist_tbl(1).trx_LINE_ID := v_trx_line_id;
	l_trx_dist_tbl(1).ACCOUNT_CLASS := 'REV';
	l_trx_dist_tbl(1).percent     := 100;
	l_trx_dist_tbl(1).AMOUNT := p_amount;
	l_trx_dist_tbl(1).CODE_COMBINATION_ID := P_CODE_COMBINATION_ID;

	-- CAll the api
		AR_INVOICE_API_PUB.create_single_invoice(
													p_api_version 			=> 1.0,
													p_batch_source_rec 		=> l_batch_source_rec,
													p_trx_header_tbl 		=> l_trx_header_tbl,
													p_trx_lines_tbl 		=> l_trx_lines_tbl,
													p_trx_dist_tbl 			=> l_trx_dist_tbl,
													p_trx_salescredits_tbl 	=> l_trx_salescredits_tbl,
													x_customer_trx_id 		=> l_customer_trx_id,
													x_return_status 		=> l_return_status,
													x_msg_count 			=> l_msg_count,
													x_msg_data 				=> l_msg_data
												); 

	DBMS_OUTPUT.PUT_LINE('l_return_status : '||l_return_status);

	IF l_return_status = 'S' THEN
	dbms_output.put_line('unexpected errors found!'); 
	 IF l_msg_count = 1 Then
		  dbms_output.put_line('l_msg_data '||l_msg_data);
	   ELSIF l_msg_count > 1 Then
	   LOOP
		 p_count := p_count+1;
		 l_msg_data := FND_MSG_PUB.Get(FND_MSG_PUB.G_NEXT,FND_API.G_FALSE);
		 IF l_msg_data is NULL Then
		 EXIT;
		 END IF;
		 dbms_output.put_line('Message' || p_count ||'.'||l_msg_data);
	   END LOOP;
	   END IF;
	ELSE
	dbms_output.put_line(' Got Created Sucessfully : '||l_customer_trx_id);
	END IF;
	return l_customer_trx_id;
END;

/
--------------------------------------------------------
--  DDL for Function XXLSL_SET_CONTEXT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APPS"."XXLSL_SET_CONTEXT" ( 
					  i_user_name  	IN  VARCHAR2
                     ,i_resp_name   IN  VARCHAR2
                     ,i_org_id      IN  NUMBER
) RETURN VARCHAR2
IS
v_user_id      NUMBER;
v_resp_id      NUMBER;
v_resp_appl_id NUMBER;
v_lang         VARCHAR2(100);
v_session_lang VARCHAR2(100):= fnd_global.current_language;
v_return       VARCHAR2(10)	:= 'T';
v_nls_lang     VARCHAR2(100);
v_org_id       NUMBER		:= i_org_id;

/* Cursor to get the user id information based on the input user name */
CURSOR cur_user
IS
   SELECT user_id
   FROM fnd_user
   WHERE user_name = i_user_name;
/* Cursor to get the responsibility information */
CURSOR cur_resp
IS
    SELECT responsibility_id
          ,application_id
          ,language
    FROM fnd_responsibility_tl
    WHERE responsibility_name = i_resp_name;
/* Cursor to get the nls language information for setting the language context */
CURSOR cur_lang(p_lang_code VARCHAR2)
IS
    SELECT nls_language
    FROM fnd_languages
    WHERE language_code = p_lang_code;
BEGIN
    /* To get the user id details */
    OPEN cur_user;
    FETCH cur_user INTO v_user_id;
    IF cur_user%NOTFOUND
    THEN
        v_return:='F';    
	END IF; --IF cur_user%NOTFOUND
    CLOSE cur_user;

    /* To get the responsibility and responsibility application id */
    OPEN cur_resp;
    FETCH cur_resp INTO v_resp_id, v_resp_appl_id,v_lang;
    IF cur_resp%NOTFOUND
    THEN
        v_return:='F';        
    END IF; --IF cur_resp%NOTFOUND
    CLOSE cur_resp; 

    /* Setting the oracle applications context for the particular session */
    fnd_global.apps_initialize ( user_id      => v_user_id
                                ,resp_id      => v_resp_id
                                ,resp_appl_id => v_resp_appl_id);
    /* Setting the org context for the particular session */
    mo_global.set_policy_context('S',v_org_id);
    /* setting the nls context for the particular session */
    IF v_session_lang != v_lang
    THEN
        OPEN cur_lang(v_lang);
        FETCH cur_lang INTO v_nls_lang;
        CLOSE cur_lang;
        fnd_global.set_nls_context(v_nls_lang);
    END IF; --IF v_session_lang != v_lang
  RETURN v_return;
EXCEPTION
WHEN OTHERS THEN
    RETURN 'F';
END xxlsl_set_context;

/
--------------------------------------------------------
--  DDL for Function XXPBSA_CREATE_CCID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APPS"."XXPBSA_CREATE_CCID" 
( p_concat_segs in varchar2
) return varchar2
is
  -- pragma autonomous_transaction; -- if you need autonomy!
    l_keyval_status     BOOLEAN;
    l_cr_combination    BOOLEAN;
    l_coa_id            NUMBER;
    l_err_msg           varchar2(20000);
    l_error             varchar2(255);
    l_structure_num     FND_ID_FLEX_STRUCTURES.ID_FLEX_NUM%TYPE;

begin
  begin
    
    select chart_of_accounts_id
    into   l_coa_id
    from   gl_sets_of_books
    where  chart_of_accounts_id = 101;
    
  exception
    when no_data_found then
      dbms_output.put_line('Chart of Accounts ID not found from profile option GL_SET_OF_BKS_ID');
      dbms_output.put_line('Try setting up your environment with fnd_global.apps_initialize');
      raise;
  end;
  
  BEGIN
  SELECT id_flex_num
      INTO l_structure_num
      FROM fnd_id_flex_structures
     WHERE id_flex_code        = 'GL#'
       AND id_flex_structure_code='ACCOUNTING_FLEXFIELD';
  EXCEPTION
  WHEN OTHERS THEN
    l_structure_num:=NULL;
  END;
  
  -- keyval_mode can be one of CREATE_COMBINATION CHECK_COMBINATION FIND_COMBINATION
  --create will only work if dynamic inserts on and cross validation rules not broken
  l_keyval_status := fnd_flex_keyval.validate_segs(
                                           'CHECK_COMBINATION',
                                           'SQLGL',
                                           'GL#',
                                           l_coa_id,
                                           p_concat_segs,
                                           'V',
                                           sysdate,
                                           'ALL', NULL, NULL, NULL, NULL,
                                           FALSE,FALSE, NULL, NULL, NULL);
                                           
    L_CR_COMBINATION := FND_FLEX_KEYVAL.VALIDATE_SEGS(
                                          operation => 'CREATE_COMBINATION',
                                          appl_short_name => 'SQLGL',
                                          key_flex_code => 'GL#',
                                          structure_number => L_STRUCTURE_NUM,
                                          concat_segments => p_concat_segs );                                           

  if l_keyval_status then  
    return 'S';   
  else
   --return l_error;
    l_err_msg:=substr(fnd_flex_keyval.error_message, 1, 240);     --fnd_message.get;

    l_error := substr(fnd_flex_keyval.error_message, 1, 240); 
   dbms_output.put_line(l_error); 
   dbms_output.put_line('ERROR SEGMENT :');
   l_error := to_char(fnd_flex_keyval.error_segment);
   dbms_output.put_line(l_error); 
   dbms_output.put_line('ERROR ENCODED :');
   l_error := substr(fnd_flex_keyval.encoded_error_message, 1, 240);
   dbms_output.put_line(l_error); 
   dbms_output.put_line('FALSE'); 

    dbms_output.put_line(l_err_msg||substr(sqlerrm,150,3));
    return l_error;
  end if;
end XXPBSA_CREATE_CCID;

/
--------------------------------------------------------
--  DDL for Function XXPBSA_GL_CURR_OPEN_PERIOD
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APPS"."XXPBSA_GL_CURR_OPEN_PERIOD" 
return varchar2
as
        l_period_name varchar2(10);
begin
                            select period_name
                            into l_period_name
                            from gl_period_statuses gls
                            where 1 = 1
                                  and sysdate between START_DATE and END_DATE
                                  and CLOSING_STATUS = 'O'
                                  and rownum = 1
                            order by START_DATE desc;
end;

/
--------------------------------------------------------
--  DDL for Function XXPBSA_GET_GL_ACCOUNT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APPS"."XXPBSA_GET_GL_ACCOUNT" (p_acc in varchar2)
return varchar2
AS
      l_acc_desc       varchar2(500) := 'Lanka Sathosa Ltd.Head Office.Unspecified.Unspecified.Unspecified.Sales And Payment Control.Unspecified.Unspecified';
      l_acc            varchar2(500);
begin
          
          --l_acc := p_acc;
          
          SELECT distinct (gcc.segment1
                ||'.'||gcc.segment2
                ||'.'||gcc.segment3
                ||'.'||gcc.segment4
                ||'.'||gcc.segment5
                ||'.'||gcc.segment6
                ||'.'||gcc.segment7
                ||'.'||gcc.segment8
                ||'.'||gcc.segment9)
                gcc
          into l_acc
          FROM  gl_code_combinations gcc
               ,(select DECODE(gcc.segment1,NULL,'',apps.gl_flexfields_pkg.get_description_sql
                                                                 (gcc.chart_of_accounts_id,1,gcc.segment1))
             ||'.'||DECODE(gcc.segment2,NULL,'',apps.gl_flexfields_pkg.get_description_sql
                                                                ( gcc.chart_of_accounts_id,2,gcc.segment2)) 
             ||'.'||DECODE(gcc.segment3,NULL,'',apps.gl_flexfields_pkg.get_description_sql
                                                                 (gcc.chart_of_accounts_id,3,gcc.segment3))
             ||'.'||DECODE(gcc.segment4,NULL,'',apps.gl_flexfields_pkg.get_description_sql
                                                                ( gcc.chart_of_accounts_id,4,gcc.segment4))
             ||'.'||DECODE(gcc.segment5,NULL,'',apps.gl_flexfields_pkg.get_description_sql
                                                                ( gcc.chart_of_accounts_id,5,gcc.segment5))
             ||'.'||DECODE(gcc.segment6,NULL,'',apps.gl_flexfields_pkg.get_description_sql
                                                               ( gcc.chart_of_accounts_id,6,gcc.segment6))
             ||'.'||DECODE(gcc.SEGMENT7,NULL,'',apps.gl_flexfields_pkg.get_description_sql
                                                               ( gcc.chart_of_accounts_id,7,gcc.segment7))
             ||'.'||DECODE(gcc.SEGMENT8,NULL,'',apps.gl_flexfields_pkg.get_description_sql
                                                               ( gcc.chart_of_accounts_id,8,gcc.segment9))
            gcc,
            gcc.segment1,
            gcc.segment2,
            gcc.segment3,
            gcc.segment4,
            gcc.segment5,
            gcc.segment6,
            gcc.segment7,
            gcc.segment8
from gl_code_combinations gcc) glc
          where glc.gcc = l_acc_desc
                and GLC.SEGMENT1 = GCC.SEGMENT1
                and GLC.SEGMENT2 = GCC.SEGMENT2
                and GLC.SEGMENT3 = GCC.SEGMENT3
                and GLC.SEGMENT4 = GCC.SEGMENT4
                and GLC.SEGMENT5 = GCC.SEGMENT5
                and GLC.SEGMENT6 = GCC.SEGMENT6
                and GLC.SEGMENT7 = GCC.SEGMENT7
                and GLC.SEGMENT8 = GCC.SEGMENT8;
    return l_acc;
end;

/
--------------------------------------------------------
--  DDL for Function XXPBSA_GL_CURR_OPERIOD
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APPS"."XXPBSA_GL_CURR_OPERIOD" 
return varchar2
as
        l_period_name varchar2(10);
begin
                            select period_name
                            into l_period_name
                            from gl_period_statuses gls
                            where 1 = 1
                                  and sysdate between START_DATE and END_DATE
                                  and CLOSING_STATUS = 'O'
                                  and rownum = 1
                            order by START_DATE desc;
          return l_period_name;
end;

/
--------------------------------------------------------
--  DDL for Function XXPBSA_INV_RANK
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APPS"."XXPBSA_INV_RANK" (p_sup_id number, p_item_id number)
return number
as

inv_amount       number;
ret_quantity     number;
ret_unit_price   number;
l_invoice_id     number;
cnt_invoice_id   number;

i              number;
j              number;

cursor cur_rec
is
select INV_AMOUNT, RET_QUANTITY, RET_UNIT_PRICE
from
(
SELECT distinct inv.amount inv_amount
          ,dsl.quantity*10000 ret_quantity
          ,prl.PERUNITPRICE ret_unit_price, inv.invoice_id
    FROM po_headers_all ph
        ,po_lines_all pl
        ,PO_DISTRIBUTIONS_ALL PD
        ,PO_REQ_DISTRIBUTIONS_ALL PRDA
        ,PO_REQUISITION_LINES_ALL PRLA
        ,PO_REQUISITION_HEADERS_ALL PRHA
        ,deliverysummary@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ds
        ,deliverysummaryline@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK dsl
        ,PURCHASE_REQUESTS_HEADER@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prh
        ,PURCHASE_REQUESTS_LINES@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prl
        ,mtl_system_items_b msi
        ,(
            SELECT invoice_id, amount, po_distribution_id
            FROM ap_invoice_distributions_all
            order by invoice_id desc
         ) inv
         ,ap_invoices_all apia--needs to get the last invice rank
    WHERE   1 = 1   
           AND pd.po_distribution_id = inv.po_distribution_id     
           AND apia.vendor_id = p_sup_id
           AND msi.inventory_item_id = p_item_id
           AND apia.invoice_id = inv.invoice_id
           AND ph.po_header_id = pl.po_header_id
           AND pd.po_line_id = pl.po_line_id
           AND ds.DeliveryId = dsl.DeliveryId
           --AND ds.status_flag is null
           --AND prh.PURCHASEREQUESTID = PRHA.INTERFACE_SOURCE_CODE
           AND msi.inventory_item_id = pl.item_id
           AND msi.segment1 = dsl.PARTNUMBER
           --AND ds.EXTERNALREFERENCENUMBER = ph.SEGMENT1
           AND pd.REQ_DISTRIBUTION_ID = PRDA.DISTRIBUTION_ID
           AND PRDA.REQUISITION_LINE_ID = PRLA.REQUISITION_LINE_ID
           AND PRLA.REQUISITION_HEADER_ID = PRHA.REQUISITION_HEADER_ID
           --AND NVL(ds.PurchaseOrderID, 0) = NVL(prl.PurchaseOrderID, 0)
           AND rownum < 10
           order by invoice_id desc
           )
           where 1 = 1
                 AND ((ret_quantity-(ret_quantity*ret_unit_price-inv_amount)/ret_unit_price) <= ret_quantity)
           ;

begin

select count(invoice_id)
into cnt_invoice_id
from 
 (SELECT distinct inv.amount inv_amount
          ,dsl.quantity*10 ret_quantity
          ,prl.PERUNITPRICE ret_unit_price
          ,inv.invoice_id
    FROM po_headers_all ph
        ,po_lines_all pl
        ,PO_DISTRIBUTIONS_ALL PD
        ,PO_REQ_DISTRIBUTIONS_ALL PRDA
        ,PO_REQUISITION_LINES_ALL PRLA
        ,PO_REQUISITION_HEADERS_ALL PRHA
        ,deliverysummary@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ds
        ,deliverysummaryline@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK dsl
        ,PURCHASE_REQUESTS_HEADER@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prh
        ,PURCHASE_REQUESTS_LINES@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK prl
        ,mtl_system_items_b msi
        ,(
            SELECT invoice_id, amount, po_distribution_id
            FROM ap_invoice_distributions_all
            order by invoice_id desc
         ) inv
         ,ap_invoices_all apia--needs to get the last invice rank
    WHERE   1 = 1   
           AND pd.po_distribution_id = inv.po_distribution_id     
           AND apia.vendor_id = p_sup_id
           AND msi.inventory_item_id = p_item_id
           AND apia.invoice_id = inv.invoice_id
           AND ph.po_header_id = pl.po_header_id
           AND pd.po_line_id = pl.po_line_id
           AND ds.DeliveryId = dsl.DeliveryId
           --AND ds.status_flag is null
           --AND prh.PURCHASEREQUESTID = PRHA.INTERFACE_SOURCE_CODE
           AND msi.inventory_item_id = pl.item_id
           AND msi.segment1 = dsl.PARTNUMBER
           --AND ds.EXTERNALREFERENCENUMBER = ph.SEGMENT1
           AND pd.REQ_DISTRIBUTION_ID = PRDA.DISTRIBUTION_ID
           AND PRDA.REQUISITION_LINE_ID = PRLA.REQUISITION_LINE_ID
           AND PRLA.REQUISITION_HEADER_ID = PRHA.REQUISITION_HEADER_ID
           --AND NVL(ds.PurchaseOrderID, 0) = NVL(prl.PurchaseOrderID, 0)
           AND rownum < 10
           )
           where 1 = 1
           AND ((ret_quantity-(ret_quantity*ret_unit_price-inv_amount)/ret_unit_price) <= ret_quantity)
        order by invoice_id desc
           ;

for cur in cur_rec
loop
loop
i := 0;
cnt_invoice_id := cnt_invoice_id - 1;
j := i + 1;
exit when (cnt_invoice_id = 1 AND (cur.ret_quantity-(cur.ret_quantity*cur.ret_unit_price-cur.inv_amount)/cur.ret_unit_price) <= cur.ret_quantity);
end loop;
end loop;
return j;
end;

/
--------------------------------------------------------
--  DDL for Function XXPBSA_REJECTED_LINES_PRC
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APPS"."XXPBSA_REJECTED_LINES_PRC" 
return varchar2
as
    v_cnt number;
begin

--        SELECT (count (PRLA.REQUISITION_LINE_ID) - count(pol.PO_LINE_ID)) NO_OF_REJECTED_LINES
--        INTO v_cnt
--        FROM PO_HEADERS_ALL POH, 
--               PO_LINES_ALL POL,
--               PO_DISTRIBUTIONS_ALL PDA ,
--               PO_REQ_DISTRIBUTIONS_ALL PRDA ,
--               PO_REQUISITION_LINES_ALL PRLA ,
--               PO_REQUISITION_HEADERS_ALL PRHA
--        WHERE POH.PO_HEADER_ID = PDA.PO_HEADER_ID 
--              AND POH.PO_HEADER_ID = POL.PO_HEADER_ID 
--              AND PDA.REQ_DISTRIBUTION_ID = PRDA.DISTRIBUTION_ID
--              AND PRDA.REQUISITION_LINE_ID = PRLA.REQUISITION_LINE_ID
--              AND PRLA.REQUISITION_HEADER_ID = PRHA.REQUISITION_HEADER_ID
--              --AND POH.ROWID in (:p_row_id)--from Oracle Alert
--              AND rownum = 1
--        GROUP BY POH.SEGMENT1
--                ,PRHA.SEGMENT1
--                ,PRHA.REQUISITION_HEADER_ID
--        ORDER BY PRHA.REQUISITION_HEADER_ID desc;
--      select srl.SUPPLIERRETURNREQUESTID
--      INTO v_cnt
--      FROM SUPPLIER_RET_REQUESTS_HEADER@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK srh,
--           SUPPLIER_RET_REQUESTS_LINES@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK srl,
--           po_lines_all pl,
--           po_line_locations_all pll,
--           po_distributions_all  pd,
--           mtl_parameters        mp,
--           mtl_system_items_b    msi,
--           PO_REQ_DISTRIBUTIONS_ALL PRDA,
--           PO_REQUISITION_LINES_ALL PRLA,
--           PO_REQUISITION_HEADERS_ALL PRHA,
--           ap_suppliers aps
--     WHERE 1 = 1
--           and srh.SupplierReturnRequestId = srl.SupplierReturnRequestId
--           and srl.PRODUCTID = msi.attribute10
--           and srl.SUPPLIERID = aps.attribute10
--           and NVL(srh.STATUS_FLAG, 'R') = 'R'
--           AND pl.po_line_id = pll.po_line_id
--           AND pd.line_location_id = pll.line_location_id
--           AND pd.po_line_id = pl.po_line_id
--           AND pll.ship_to_organization_id = mp.organization_id
--           AND msi.inventory_item_id = pl.item_id
--           AND pd.REQ_DISTRIBUTION_ID = PRDA.DISTRIBUTION_ID
--           AND PRDA.REQUISITION_LINE_ID = PRLA.REQUISITION_LINE_ID
--           AND PRLA.REQUISITION_HEADER_ID = PRHA.REQUISITION_HEADER_ID
--           and NVL(PRHA.INTERFACE_SOURCE_CODE, 0) = NVL(srl.PurchaseOrderId,0)
--           AND rownum = 1;


        select PurchaseRequestLineId
        INTO v_cnt
        from
        (
        select pl_outer.PurchaseRequestLineId       
        from PURCHASE_REQUESTS_LINES@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK pl_outer
                  ,PURCHASE_REQUESTS_HEADER@DATABASE_LINK_EBS_APEX.LANKASATHOSA.LK ph_outer
                  ,PO_HEADERS_ALL pha_outer
                  ,PO_LINES_ALL pla_outer
                  ,PO_DISTRIBUTIONS_ALL PDA_outer
                  ,PO_REQ_DISTRIBUTIONS_ALL PRDA_outer
                  ,PO_REQUISITION_LINES_ALL PRLA_outer
                  ,PO_REQUISITION_HEADERS_ALL PRHA_outer
            WHERE  1 = 1
                   AND ph_outer.PurchaseRequestId = pl_outer.PurchaseRequestId
                   and NVL(PRHA_outer.INTERFACE_SOURCE_CODE, 0) = NVL(pl_outer.PurchaseOrderId, ph_outer.PurchaseRequestId)
                   AND PDA_outer.REQ_DISTRIBUTION_ID = PRDA_outer.DISTRIBUTION_ID
                   AND PRDA_outer.REQUISITION_LINE_ID = PRLA_outer.REQUISITION_LINE_ID
                   AND PRLA_outer.REQUISITION_HEADER_ID = PRHA_outer.REQUISITION_HEADER_ID
                   AND pda_outer.po_line_id = pla_outer.po_line_id
                   AND PDA_outer.REQ_DISTRIBUTION_ID = PRDA_outer.DISTRIBUTION_ID
                   AND pha_outer.po_header_id = pla_outer.po_header_id
                   AND pha_outer.authorization_status = 'APPROVED'
                   AND pha_outer.attribute13 is null
                   AND pl_outer.STATUS_FLAG = 'R'
        order by PurchaseRequestLineId desc
        )
        WHERE 1 = 1
              AND rownum = 1;

    return v_cnt;

end;

/

/
--------------------------------------------------------
--  DDL for Sequence XXLSL_AP_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APPS"."XXLSL_AP_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 100012 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence XXLSL_TRX_DIST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPS"."XXLSL_TRX_DIST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1082 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence XXLSL_TRX_HEADER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPS"."XXLSL_TRX_HEADER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 163 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence XXLSL_TRX_LINE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPS"."XXLSL_TRX_LINE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 162 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence XXPBSA_SUP_RET_HEADER_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPS"."XXPBSA_SUP_RET_HEADER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 50027 CACHE 20 NOORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence XXPBSA_SUP_RET_LINE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APPS"."XXPBSA_SUP_RET_LINE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10027 CACHE 20 NOORDER  NOCYCLE   ;
   
   